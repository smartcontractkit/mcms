// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// Inspector is an autogenerated mock type for the Inspector type
type Inspector struct {
	mock.Mock
}

type Inspector_Expecter struct {
	mock *mock.Mock
}

func (_m *Inspector) EXPECT() *Inspector_Expecter {
	return &Inspector_Expecter{mock: &_m.Mock}
}

// GetBypassers provides a mock function with given fields: timelockAddress
func (_m *Inspector) GetBypassers(timelockAddress string) ([]common.Address, error) {
	ret := _m.Called(timelockAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetBypassers")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]common.Address, error)); ok {
		return rf(timelockAddress)
	}
	if rf, ok := ret.Get(0).(func(string) []common.Address); ok {
		r0 = rf(timelockAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timelockAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspector_GetBypassers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBypassers'
type Inspector_GetBypassers_Call struct {
	*mock.Call
}

// GetBypassers is a helper method to define mock.On call
//   - timelockAddress string
func (_e *Inspector_Expecter) GetBypassers(timelockAddress interface{}) *Inspector_GetBypassers_Call {
	return &Inspector_GetBypassers_Call{Call: _e.mock.On("GetBypassers", timelockAddress)}
}

func (_c *Inspector_GetBypassers_Call) Run(run func(timelockAddress string)) *Inspector_GetBypassers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_GetBypassers_Call) Return(_a0 []common.Address, _a1 error) *Inspector_GetBypassers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inspector_GetBypassers_Call) RunAndReturn(run func(string) ([]common.Address, error)) *Inspector_GetBypassers_Call {
	_c.Call.Return(run)
	return _c
}

// GetCancellers provides a mock function with given fields: timelockAddress
func (_m *Inspector) GetCancellers(timelockAddress string) ([]common.Address, error) {
	ret := _m.Called(timelockAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetCancellers")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]common.Address, error)); ok {
		return rf(timelockAddress)
	}
	if rf, ok := ret.Get(0).(func(string) []common.Address); ok {
		r0 = rf(timelockAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timelockAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspector_GetCancellers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCancellers'
type Inspector_GetCancellers_Call struct {
	*mock.Call
}

// GetCancellers is a helper method to define mock.On call
//   - timelockAddress string
func (_e *Inspector_Expecter) GetCancellers(timelockAddress interface{}) *Inspector_GetCancellers_Call {
	return &Inspector_GetCancellers_Call{Call: _e.mock.On("GetCancellers", timelockAddress)}
}

func (_c *Inspector_GetCancellers_Call) Run(run func(timelockAddress string)) *Inspector_GetCancellers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_GetCancellers_Call) Return(_a0 []common.Address, _a1 error) *Inspector_GetCancellers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inspector_GetCancellers_Call) RunAndReturn(run func(string) ([]common.Address, error)) *Inspector_GetCancellers_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecutors provides a mock function with given fields: timelockAddress
func (_m *Inspector) GetExecutors(timelockAddress string) ([]common.Address, error) {
	ret := _m.Called(timelockAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutors")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]common.Address, error)); ok {
		return rf(timelockAddress)
	}
	if rf, ok := ret.Get(0).(func(string) []common.Address); ok {
		r0 = rf(timelockAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timelockAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspector_GetExecutors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutors'
type Inspector_GetExecutors_Call struct {
	*mock.Call
}

// GetExecutors is a helper method to define mock.On call
//   - timelockAddress string
func (_e *Inspector_Expecter) GetExecutors(timelockAddress interface{}) *Inspector_GetExecutors_Call {
	return &Inspector_GetExecutors_Call{Call: _e.mock.On("GetExecutors", timelockAddress)}
}

func (_c *Inspector_GetExecutors_Call) Run(run func(timelockAddress string)) *Inspector_GetExecutors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_GetExecutors_Call) Return(_a0 []common.Address, _a1 error) *Inspector_GetExecutors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inspector_GetExecutors_Call) RunAndReturn(run func(string) ([]common.Address, error)) *Inspector_GetExecutors_Call {
	_c.Call.Return(run)
	return _c
}

// GetProposers provides a mock function with given fields: timelockAddress
func (_m *Inspector) GetProposers(timelockAddress string) ([]common.Address, error) {
	ret := _m.Called(timelockAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetProposers")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]common.Address, error)); ok {
		return rf(timelockAddress)
	}
	if rf, ok := ret.Get(0).(func(string) []common.Address); ok {
		r0 = rf(timelockAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(timelockAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspector_GetProposers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposers'
type Inspector_GetProposers_Call struct {
	*mock.Call
}

// GetProposers is a helper method to define mock.On call
//   - timelockAddress string
func (_e *Inspector_Expecter) GetProposers(timelockAddress interface{}) *Inspector_GetProposers_Call {
	return &Inspector_GetProposers_Call{Call: _e.mock.On("GetProposers", timelockAddress)}
}

func (_c *Inspector_GetProposers_Call) Run(run func(timelockAddress string)) *Inspector_GetProposers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_GetProposers_Call) Return(_a0 []common.Address, _a1 error) *Inspector_GetProposers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inspector_GetProposers_Call) RunAndReturn(run func(string) ([]common.Address, error)) *Inspector_GetProposers_Call {
	_c.Call.Return(run)
	return _c
}

// isOperation provides a mock function with given fields: timelockAddress
func (_m *Inspector) isOperation(timelockAddress string) {
	_m.Called(timelockAddress)
}

// Inspector_isOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isOperation'
type Inspector_isOperation_Call struct {
	*mock.Call
}

// isOperation is a helper method to define mock.On call
//   - timelockAddress string
func (_e *Inspector_Expecter) isOperation(timelockAddress interface{}) *Inspector_isOperation_Call {
	return &Inspector_isOperation_Call{Call: _e.mock.On("isOperation", timelockAddress)}
}

func (_c *Inspector_isOperation_Call) Run(run func(timelockAddress string)) *Inspector_isOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_isOperation_Call) Return() *Inspector_isOperation_Call {
	_c.Call.Return()
	return _c
}

func (_c *Inspector_isOperation_Call) RunAndReturn(run func(string)) *Inspector_isOperation_Call {
	_c.Call.Return(run)
	return _c
}

// isOperationDone provides a mock function with given fields: timelockAddress
func (_m *Inspector) isOperationDone(timelockAddress string) {
	_m.Called(timelockAddress)
}

// Inspector_isOperationDone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isOperationDone'
type Inspector_isOperationDone_Call struct {
	*mock.Call
}

// isOperationDone is a helper method to define mock.On call
//   - timelockAddress string
func (_e *Inspector_Expecter) isOperationDone(timelockAddress interface{}) *Inspector_isOperationDone_Call {
	return &Inspector_isOperationDone_Call{Call: _e.mock.On("isOperationDone", timelockAddress)}
}

func (_c *Inspector_isOperationDone_Call) Run(run func(timelockAddress string)) *Inspector_isOperationDone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_isOperationDone_Call) Return() *Inspector_isOperationDone_Call {
	_c.Call.Return()
	return _c
}

func (_c *Inspector_isOperationDone_Call) RunAndReturn(run func(string)) *Inspector_isOperationDone_Call {
	_c.Call.Return(run)
	return _c
}

// isOperationPending provides a mock function with given fields: timelockAddress
func (_m *Inspector) isOperationPending(timelockAddress string) {
	_m.Called(timelockAddress)
}

// Inspector_isOperationPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isOperationPending'
type Inspector_isOperationPending_Call struct {
	*mock.Call
}

// isOperationPending is a helper method to define mock.On call
//   - timelockAddress string
func (_e *Inspector_Expecter) isOperationPending(timelockAddress interface{}) *Inspector_isOperationPending_Call {
	return &Inspector_isOperationPending_Call{Call: _e.mock.On("isOperationPending", timelockAddress)}
}

func (_c *Inspector_isOperationPending_Call) Run(run func(timelockAddress string)) *Inspector_isOperationPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_isOperationPending_Call) Return() *Inspector_isOperationPending_Call {
	_c.Call.Return()
	return _c
}

func (_c *Inspector_isOperationPending_Call) RunAndReturn(run func(string)) *Inspector_isOperationPending_Call {
	_c.Call.Return(run)
	return _c
}

// isOperationReady provides a mock function with given fields: timelockAddress
func (_m *Inspector) isOperationReady(timelockAddress string) {
	_m.Called(timelockAddress)
}

// Inspector_isOperationReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isOperationReady'
type Inspector_isOperationReady_Call struct {
	*mock.Call
}

// isOperationReady is a helper method to define mock.On call
//   - timelockAddress string
func (_e *Inspector_Expecter) isOperationReady(timelockAddress interface{}) *Inspector_isOperationReady_Call {
	return &Inspector_isOperationReady_Call{Call: _e.mock.On("isOperationReady", timelockAddress)}
}

func (_c *Inspector_isOperationReady_Call) Run(run func(timelockAddress string)) *Inspector_isOperationReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_isOperationReady_Call) Return() *Inspector_isOperationReady_Call {
	_c.Call.Return()
	return _c
}

func (_c *Inspector_isOperationReady_Call) RunAndReturn(run func(string)) *Inspector_isOperationReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewInspector creates a new instance of Inspector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInspector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Inspector {
	mock := &Inspector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
