// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	jsonrpc "github.com/gagliardetto/solana-go/rpc/jsonrpc"

	mock "github.com/stretchr/testify/mock"
)

// JSONRPCClient is an autogenerated mock type for the JSONRPCClient type
type JSONRPCClient struct {
	mock.Mock
}

type JSONRPCClient_Expecter struct {
	mock *mock.Mock
}

func (_m *JSONRPCClient) EXPECT() *JSONRPCClient_Expecter {
	return &JSONRPCClient_Expecter{mock: &_m.Mock}
}

// CallBatch provides a mock function with given fields: ctx, requests
func (_m *JSONRPCClient) CallBatch(ctx context.Context, requests jsonrpc.RPCRequests) (jsonrpc.RPCResponses, error) {
	ret := _m.Called(ctx, requests)

	if len(ret) == 0 {
		panic("no return value specified for CallBatch")
	}

	var r0 jsonrpc.RPCResponses
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, jsonrpc.RPCRequests) (jsonrpc.RPCResponses, error)); ok {
		return rf(ctx, requests)
	}
	if rf, ok := ret.Get(0).(func(context.Context, jsonrpc.RPCRequests) jsonrpc.RPCResponses); ok {
		r0 = rf(ctx, requests)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsonrpc.RPCResponses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, jsonrpc.RPCRequests) error); ok {
		r1 = rf(ctx, requests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JSONRPCClient_CallBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallBatch'
type JSONRPCClient_CallBatch_Call struct {
	*mock.Call
}

// CallBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - requests jsonrpc.RPCRequests
func (_e *JSONRPCClient_Expecter) CallBatch(ctx interface{}, requests interface{}) *JSONRPCClient_CallBatch_Call {
	return &JSONRPCClient_CallBatch_Call{Call: _e.mock.On("CallBatch", ctx, requests)}
}

func (_c *JSONRPCClient_CallBatch_Call) Run(run func(ctx context.Context, requests jsonrpc.RPCRequests)) *JSONRPCClient_CallBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(jsonrpc.RPCRequests))
	})
	return _c
}

func (_c *JSONRPCClient_CallBatch_Call) Return(_a0 jsonrpc.RPCResponses, _a1 error) *JSONRPCClient_CallBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JSONRPCClient_CallBatch_Call) RunAndReturn(run func(context.Context, jsonrpc.RPCRequests) (jsonrpc.RPCResponses, error)) *JSONRPCClient_CallBatch_Call {
	_c.Call.Return(run)
	return _c
}

// CallForInto provides a mock function with given fields: ctx, out, method, params
func (_m *JSONRPCClient) CallForInto(ctx context.Context, out interface{}, method string, params []interface{}) error {
	ret := _m.Called(ctx, out, method, params)

	if len(ret) == 0 {
		panic("no return value specified for CallForInto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, []interface{}) error); ok {
		r0 = rf(ctx, out, method, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JSONRPCClient_CallForInto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallForInto'
type JSONRPCClient_CallForInto_Call struct {
	*mock.Call
}

// CallForInto is a helper method to define mock.On call
//   - ctx context.Context
//   - out interface{}
//   - method string
//   - params []interface{}
func (_e *JSONRPCClient_Expecter) CallForInto(ctx interface{}, out interface{}, method interface{}, params interface{}) *JSONRPCClient_CallForInto_Call {
	return &JSONRPCClient_CallForInto_Call{Call: _e.mock.On("CallForInto", ctx, out, method, params)}
}

func (_c *JSONRPCClient_CallForInto_Call) Run(run func(ctx context.Context, out interface{}, method string, params []interface{})) *JSONRPCClient_CallForInto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), args[3].([]interface{}))
	})
	return _c
}

func (_c *JSONRPCClient_CallForInto_Call) Return(_a0 error) *JSONRPCClient_CallForInto_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JSONRPCClient_CallForInto_Call) RunAndReturn(run func(context.Context, interface{}, string, []interface{}) error) *JSONRPCClient_CallForInto_Call {
	_c.Call.Return(run)
	return _c
}

// CallWithCallback provides a mock function with given fields: ctx, method, params, callback
func (_m *JSONRPCClient) CallWithCallback(ctx context.Context, method string, params []interface{}, callback func(*http.Request, *http.Response) error) error {
	ret := _m.Called(ctx, method, params, callback)

	if len(ret) == 0 {
		panic("no return value specified for CallWithCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}, func(*http.Request, *http.Response) error) error); ok {
		r0 = rf(ctx, method, params, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JSONRPCClient_CallWithCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallWithCallback'
type JSONRPCClient_CallWithCallback_Call struct {
	*mock.Call
}

// CallWithCallback is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - params []interface{}
//   - callback func(*http.Request , *http.Response) error
func (_e *JSONRPCClient_Expecter) CallWithCallback(ctx interface{}, method interface{}, params interface{}, callback interface{}) *JSONRPCClient_CallWithCallback_Call {
	return &JSONRPCClient_CallWithCallback_Call{Call: _e.mock.On("CallWithCallback", ctx, method, params, callback)}
}

func (_c *JSONRPCClient_CallWithCallback_Call) Run(run func(ctx context.Context, method string, params []interface{}, callback func(*http.Request, *http.Response) error)) *JSONRPCClient_CallWithCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]interface{}), args[3].(func(*http.Request, *http.Response) error))
	})
	return _c
}

func (_c *JSONRPCClient_CallWithCallback_Call) Return(_a0 error) *JSONRPCClient_CallWithCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JSONRPCClient_CallWithCallback_Call) RunAndReturn(run func(context.Context, string, []interface{}, func(*http.Request, *http.Response) error) error) *JSONRPCClient_CallWithCallback_Call {
	_c.Call.Return(run)
	return _c
}

// NewJSONRPCClient creates a new instance of JSONRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJSONRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *JSONRPCClient {
	mock := &JSONRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
