// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// AbigenLog is an autogenerated mock type for the AbigenLog type
type AbigenLog struct {
	mock.Mock
}

type AbigenLog_Expecter struct {
	mock *mock.Mock
}

func (_m *AbigenLog) EXPECT() *AbigenLog_Expecter {
	return &AbigenLog_Expecter{mock: &_m.Mock}
}

// Topic provides a mock function with given fields:
func (_m *AbigenLog) Topic() common.Hash {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// AbigenLog_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type AbigenLog_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *AbigenLog_Expecter) Topic() *AbigenLog_Topic_Call {
	return &AbigenLog_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *AbigenLog_Topic_Call) Run(run func()) *AbigenLog_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AbigenLog_Topic_Call) Return(_a0 common.Hash) *AbigenLog_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AbigenLog_Topic_Call) RunAndReturn(run func() common.Hash) *AbigenLog_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// NewAbigenLog creates a new instance of AbigenLog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAbigenLog(t interface {
	mock.TestingT
	Cleanup(func())
}) *AbigenLog {
	mock := &AbigenLog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
