// Code generated by mockery v2.53.5. DO NOT EDIT.

package mock_sui

import (
	context "context"

	models "github.com/block-vision/sui-go-sdk/models"
	mock "github.com/stretchr/testify/mock"
)

// ISuiAPI is an autogenerated mock type for the ISuiAPI type
type ISuiAPI struct {
	mock.Mock
}

type ISuiAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *ISuiAPI) EXPECT() *ISuiAPI_Expecter {
	return &ISuiAPI_Expecter{mock: &_m.Mock}
}

// BatchTransaction provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) BatchTransaction(ctx context.Context, req models.BatchTransactionRequest) (models.BatchTransactionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BatchTransaction")
	}

	var r0 models.BatchTransactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.BatchTransactionRequest) (models.BatchTransactionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.BatchTransactionRequest) models.BatchTransactionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.BatchTransactionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.BatchTransactionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_BatchTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchTransaction'
type ISuiAPI_BatchTransaction_Call struct {
	*mock.Call
}

// BatchTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.BatchTransactionRequest
func (_e *ISuiAPI_Expecter) BatchTransaction(ctx interface{}, req interface{}) *ISuiAPI_BatchTransaction_Call {
	return &ISuiAPI_BatchTransaction_Call{Call: _e.mock.On("BatchTransaction", ctx, req)}
}

func (_c *ISuiAPI_BatchTransaction_Call) Run(run func(ctx context.Context, req models.BatchTransactionRequest)) *ISuiAPI_BatchTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.BatchTransactionRequest))
	})
	return _c
}

func (_c *ISuiAPI_BatchTransaction_Call) Return(_a0 models.BatchTransactionResponse, _a1 error) *ISuiAPI_BatchTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_BatchTransaction_Call) RunAndReturn(run func(context.Context, models.BatchTransactionRequest) (models.BatchTransactionResponse, error)) *ISuiAPI_BatchTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// MergeCoins provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) MergeCoins(ctx context.Context, req models.MergeCoinsRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MergeCoins")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MergeCoinsRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.MergeCoinsRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.MergeCoinsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_MergeCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergeCoins'
type ISuiAPI_MergeCoins_Call struct {
	*mock.Call
}

// MergeCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.MergeCoinsRequest
func (_e *ISuiAPI_Expecter) MergeCoins(ctx interface{}, req interface{}) *ISuiAPI_MergeCoins_Call {
	return &ISuiAPI_MergeCoins_Call{Call: _e.mock.On("MergeCoins", ctx, req)}
}

func (_c *ISuiAPI_MergeCoins_Call) Run(run func(ctx context.Context, req models.MergeCoinsRequest)) *ISuiAPI_MergeCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.MergeCoinsRequest))
	})
	return _c
}

func (_c *ISuiAPI_MergeCoins_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_MergeCoins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_MergeCoins_Call) RunAndReturn(run func(context.Context, models.MergeCoinsRequest) (models.TxnMetaData, error)) *ISuiAPI_MergeCoins_Call {
	_c.Call.Return(run)
	return _c
}

// MoveCall provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) MoveCall(ctx context.Context, req models.MoveCallRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MoveCall")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MoveCallRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.MoveCallRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.MoveCallRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_MoveCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveCall'
type ISuiAPI_MoveCall_Call struct {
	*mock.Call
}

// MoveCall is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.MoveCallRequest
func (_e *ISuiAPI_Expecter) MoveCall(ctx interface{}, req interface{}) *ISuiAPI_MoveCall_Call {
	return &ISuiAPI_MoveCall_Call{Call: _e.mock.On("MoveCall", ctx, req)}
}

func (_c *ISuiAPI_MoveCall_Call) Run(run func(ctx context.Context, req models.MoveCallRequest)) *ISuiAPI_MoveCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.MoveCallRequest))
	})
	return _c
}

func (_c *ISuiAPI_MoveCall_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_MoveCall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_MoveCall_Call) RunAndReturn(run func(context.Context, models.MoveCallRequest) (models.TxnMetaData, error)) *ISuiAPI_MoveCall_Call {
	_c.Call.Return(run)
	return _c
}

// Pay provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) Pay(ctx context.Context, req models.PayRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PayRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PayRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PayRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type ISuiAPI_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.PayRequest
func (_e *ISuiAPI_Expecter) Pay(ctx interface{}, req interface{}) *ISuiAPI_Pay_Call {
	return &ISuiAPI_Pay_Call{Call: _e.mock.On("Pay", ctx, req)}
}

func (_c *ISuiAPI_Pay_Call) Run(run func(ctx context.Context, req models.PayRequest)) *ISuiAPI_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PayRequest))
	})
	return _c
}

func (_c *ISuiAPI_Pay_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_Pay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_Pay_Call) RunAndReturn(run func(context.Context, models.PayRequest) (models.TxnMetaData, error)) *ISuiAPI_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// PayAllSui provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) PayAllSui(ctx context.Context, req models.PayAllSuiRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PayAllSui")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PayAllSuiRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PayAllSuiRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PayAllSuiRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_PayAllSui_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayAllSui'
type ISuiAPI_PayAllSui_Call struct {
	*mock.Call
}

// PayAllSui is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.PayAllSuiRequest
func (_e *ISuiAPI_Expecter) PayAllSui(ctx interface{}, req interface{}) *ISuiAPI_PayAllSui_Call {
	return &ISuiAPI_PayAllSui_Call{Call: _e.mock.On("PayAllSui", ctx, req)}
}

func (_c *ISuiAPI_PayAllSui_Call) Run(run func(ctx context.Context, req models.PayAllSuiRequest)) *ISuiAPI_PayAllSui_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PayAllSuiRequest))
	})
	return _c
}

func (_c *ISuiAPI_PayAllSui_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_PayAllSui_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_PayAllSui_Call) RunAndReturn(run func(context.Context, models.PayAllSuiRequest) (models.TxnMetaData, error)) *ISuiAPI_PayAllSui_Call {
	_c.Call.Return(run)
	return _c
}

// PaySui provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) PaySui(ctx context.Context, req models.PaySuiRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for PaySui")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PaySuiRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PaySuiRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PaySuiRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_PaySui_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PaySui'
type ISuiAPI_PaySui_Call struct {
	*mock.Call
}

// PaySui is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.PaySuiRequest
func (_e *ISuiAPI_Expecter) PaySui(ctx interface{}, req interface{}) *ISuiAPI_PaySui_Call {
	return &ISuiAPI_PaySui_Call{Call: _e.mock.On("PaySui", ctx, req)}
}

func (_c *ISuiAPI_PaySui_Call) Run(run func(ctx context.Context, req models.PaySuiRequest)) *ISuiAPI_PaySui_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PaySuiRequest))
	})
	return _c
}

func (_c *ISuiAPI_PaySui_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_PaySui_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_PaySui_Call) RunAndReturn(run func(context.Context, models.PaySuiRequest) (models.TxnMetaData, error)) *ISuiAPI_PaySui_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) Publish(ctx context.Context, req models.PublishRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PublishRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PublishRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PublishRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type ISuiAPI_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.PublishRequest
func (_e *ISuiAPI_Expecter) Publish(ctx interface{}, req interface{}) *ISuiAPI_Publish_Call {
	return &ISuiAPI_Publish_Call{Call: _e.mock.On("Publish", ctx, req)}
}

func (_c *ISuiAPI_Publish_Call) Run(run func(ctx context.Context, req models.PublishRequest)) *ISuiAPI_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.PublishRequest))
	})
	return _c
}

func (_c *ISuiAPI_Publish_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_Publish_Call) RunAndReturn(run func(context.Context, models.PublishRequest) (models.TxnMetaData, error)) *ISuiAPI_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// RequestAddStake provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) RequestAddStake(ctx context.Context, req models.AddStakeRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RequestAddStake")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddStakeRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AddStakeRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AddStakeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_RequestAddStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestAddStake'
type ISuiAPI_RequestAddStake_Call struct {
	*mock.Call
}

// RequestAddStake is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.AddStakeRequest
func (_e *ISuiAPI_Expecter) RequestAddStake(ctx interface{}, req interface{}) *ISuiAPI_RequestAddStake_Call {
	return &ISuiAPI_RequestAddStake_Call{Call: _e.mock.On("RequestAddStake", ctx, req)}
}

func (_c *ISuiAPI_RequestAddStake_Call) Run(run func(ctx context.Context, req models.AddStakeRequest)) *ISuiAPI_RequestAddStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.AddStakeRequest))
	})
	return _c
}

func (_c *ISuiAPI_RequestAddStake_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_RequestAddStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_RequestAddStake_Call) RunAndReturn(run func(context.Context, models.AddStakeRequest) (models.TxnMetaData, error)) *ISuiAPI_RequestAddStake_Call {
	_c.Call.Return(run)
	return _c
}

// RequestWithdrawStake provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) RequestWithdrawStake(ctx context.Context, req models.WithdrawStakeRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RequestWithdrawStake")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WithdrawStakeRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WithdrawStakeRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WithdrawStakeRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_RequestWithdrawStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestWithdrawStake'
type ISuiAPI_RequestWithdrawStake_Call struct {
	*mock.Call
}

// RequestWithdrawStake is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.WithdrawStakeRequest
func (_e *ISuiAPI_Expecter) RequestWithdrawStake(ctx interface{}, req interface{}) *ISuiAPI_RequestWithdrawStake_Call {
	return &ISuiAPI_RequestWithdrawStake_Call{Call: _e.mock.On("RequestWithdrawStake", ctx, req)}
}

func (_c *ISuiAPI_RequestWithdrawStake_Call) Run(run func(ctx context.Context, req models.WithdrawStakeRequest)) *ISuiAPI_RequestWithdrawStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.WithdrawStakeRequest))
	})
	return _c
}

func (_c *ISuiAPI_RequestWithdrawStake_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_RequestWithdrawStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_RequestWithdrawStake_Call) RunAndReturn(run func(context.Context, models.WithdrawStakeRequest) (models.TxnMetaData, error)) *ISuiAPI_RequestWithdrawStake_Call {
	_c.Call.Return(run)
	return _c
}

// SignAndExecuteTransactionBlock provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SignAndExecuteTransactionBlock(ctx context.Context, req models.SignAndExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SignAndExecuteTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SignAndExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SignAndExecuteTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SignAndExecuteTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SignAndExecuteTransactionBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignAndExecuteTransactionBlock'
type ISuiAPI_SignAndExecuteTransactionBlock_Call struct {
	*mock.Call
}

// SignAndExecuteTransactionBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SignAndExecuteTransactionBlockRequest
func (_e *ISuiAPI_Expecter) SignAndExecuteTransactionBlock(ctx interface{}, req interface{}) *ISuiAPI_SignAndExecuteTransactionBlock_Call {
	return &ISuiAPI_SignAndExecuteTransactionBlock_Call{Call: _e.mock.On("SignAndExecuteTransactionBlock", ctx, req)}
}

func (_c *ISuiAPI_SignAndExecuteTransactionBlock_Call) Run(run func(ctx context.Context, req models.SignAndExecuteTransactionBlockRequest)) *ISuiAPI_SignAndExecuteTransactionBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SignAndExecuteTransactionBlockRequest))
	})
	return _c
}

func (_c *ISuiAPI_SignAndExecuteTransactionBlock_Call) Return(_a0 models.SuiTransactionBlockResponse, _a1 error) *ISuiAPI_SignAndExecuteTransactionBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SignAndExecuteTransactionBlock_Call) RunAndReturn(run func(context.Context, models.SignAndExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)) *ISuiAPI_SignAndExecuteTransactionBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SplitCoin provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SplitCoin(ctx context.Context, req models.SplitCoinRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SplitCoin")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SplitCoinRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SplitCoinRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SplitCoinRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SplitCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SplitCoin'
type ISuiAPI_SplitCoin_Call struct {
	*mock.Call
}

// SplitCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SplitCoinRequest
func (_e *ISuiAPI_Expecter) SplitCoin(ctx interface{}, req interface{}) *ISuiAPI_SplitCoin_Call {
	return &ISuiAPI_SplitCoin_Call{Call: _e.mock.On("SplitCoin", ctx, req)}
}

func (_c *ISuiAPI_SplitCoin_Call) Run(run func(ctx context.Context, req models.SplitCoinRequest)) *ISuiAPI_SplitCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SplitCoinRequest))
	})
	return _c
}

func (_c *ISuiAPI_SplitCoin_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_SplitCoin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SplitCoin_Call) RunAndReturn(run func(context.Context, models.SplitCoinRequest) (models.TxnMetaData, error)) *ISuiAPI_SplitCoin_Call {
	_c.Call.Return(run)
	return _c
}

// SplitCoinEqual provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SplitCoinEqual(ctx context.Context, req models.SplitCoinEqualRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SplitCoinEqual")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SplitCoinEqualRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SplitCoinEqualRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SplitCoinEqualRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SplitCoinEqual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SplitCoinEqual'
type ISuiAPI_SplitCoinEqual_Call struct {
	*mock.Call
}

// SplitCoinEqual is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SplitCoinEqualRequest
func (_e *ISuiAPI_Expecter) SplitCoinEqual(ctx interface{}, req interface{}) *ISuiAPI_SplitCoinEqual_Call {
	return &ISuiAPI_SplitCoinEqual_Call{Call: _e.mock.On("SplitCoinEqual", ctx, req)}
}

func (_c *ISuiAPI_SplitCoinEqual_Call) Run(run func(ctx context.Context, req models.SplitCoinEqualRequest)) *ISuiAPI_SplitCoinEqual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SplitCoinEqualRequest))
	})
	return _c
}

func (_c *ISuiAPI_SplitCoinEqual_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_SplitCoinEqual_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SplitCoinEqual_Call) RunAndReturn(run func(context.Context, models.SplitCoinEqualRequest) (models.TxnMetaData, error)) *ISuiAPI_SplitCoinEqual_Call {
	_c.Call.Return(run)
	return _c
}

// SuiCall provides a mock function with given fields: ctx, method, params
func (_m *ISuiAPI) SuiCall(ctx context.Context, method string, params ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, method)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SuiCall")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (interface{}, error)); ok {
		return rf(ctx, method, params...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) interface{}); ok {
		r0 = rf(ctx, method, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, method, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiCall'
type ISuiAPI_SuiCall_Call struct {
	*mock.Call
}

// SuiCall is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - params ...interface{}
func (_e *ISuiAPI_Expecter) SuiCall(ctx interface{}, method interface{}, params ...interface{}) *ISuiAPI_SuiCall_Call {
	return &ISuiAPI_SuiCall_Call{Call: _e.mock.On("SuiCall",
		append([]interface{}{ctx, method}, params...)...)}
}

func (_c *ISuiAPI_SuiCall_Call) Run(run func(ctx context.Context, method string, params ...interface{})) *ISuiAPI_SuiCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ISuiAPI_SuiCall_Call) Return(_a0 interface{}, _a1 error) *ISuiAPI_SuiCall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiCall_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (interface{}, error)) *ISuiAPI_SuiCall_Call {
	_c.Call.Return(run)
	return _c
}

// SuiDevInspectTransactionBlock provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiDevInspectTransactionBlock(ctx context.Context, req models.SuiDevInspectTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiDevInspectTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiDevInspectTransactionBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiDevInspectTransactionBlock'
type ISuiAPI_SuiDevInspectTransactionBlock_Call struct {
	*mock.Call
}

// SuiDevInspectTransactionBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiDevInspectTransactionBlockRequest
func (_e *ISuiAPI_Expecter) SuiDevInspectTransactionBlock(ctx interface{}, req interface{}) *ISuiAPI_SuiDevInspectTransactionBlock_Call {
	return &ISuiAPI_SuiDevInspectTransactionBlock_Call{Call: _e.mock.On("SuiDevInspectTransactionBlock", ctx, req)}
}

func (_c *ISuiAPI_SuiDevInspectTransactionBlock_Call) Run(run func(ctx context.Context, req models.SuiDevInspectTransactionBlockRequest)) *ISuiAPI_SuiDevInspectTransactionBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiDevInspectTransactionBlockRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiDevInspectTransactionBlock_Call) Return(_a0 models.SuiTransactionBlockResponse, _a1 error) *ISuiAPI_SuiDevInspectTransactionBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiDevInspectTransactionBlock_Call) RunAndReturn(run func(context.Context, models.SuiDevInspectTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)) *ISuiAPI_SuiDevInspectTransactionBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SuiDryRunTransactionBlock provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiDryRunTransactionBlock(ctx context.Context, req models.SuiDryRunTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiDryRunTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDryRunTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDryRunTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiDryRunTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiDryRunTransactionBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiDryRunTransactionBlock'
type ISuiAPI_SuiDryRunTransactionBlock_Call struct {
	*mock.Call
}

// SuiDryRunTransactionBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiDryRunTransactionBlockRequest
func (_e *ISuiAPI_Expecter) SuiDryRunTransactionBlock(ctx interface{}, req interface{}) *ISuiAPI_SuiDryRunTransactionBlock_Call {
	return &ISuiAPI_SuiDryRunTransactionBlock_Call{Call: _e.mock.On("SuiDryRunTransactionBlock", ctx, req)}
}

func (_c *ISuiAPI_SuiDryRunTransactionBlock_Call) Run(run func(ctx context.Context, req models.SuiDryRunTransactionBlockRequest)) *ISuiAPI_SuiDryRunTransactionBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiDryRunTransactionBlockRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiDryRunTransactionBlock_Call) Return(_a0 models.SuiTransactionBlockResponse, _a1 error) *ISuiAPI_SuiDryRunTransactionBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiDryRunTransactionBlock_Call) RunAndReturn(run func(context.Context, models.SuiDryRunTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)) *ISuiAPI_SuiDryRunTransactionBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SuiExecuteTransactionBlock provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiExecuteTransactionBlock(ctx context.Context, req models.SuiExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiExecuteTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiExecuteTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiExecuteTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiExecuteTransactionBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiExecuteTransactionBlock'
type ISuiAPI_SuiExecuteTransactionBlock_Call struct {
	*mock.Call
}

// SuiExecuteTransactionBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiExecuteTransactionBlockRequest
func (_e *ISuiAPI_Expecter) SuiExecuteTransactionBlock(ctx interface{}, req interface{}) *ISuiAPI_SuiExecuteTransactionBlock_Call {
	return &ISuiAPI_SuiExecuteTransactionBlock_Call{Call: _e.mock.On("SuiExecuteTransactionBlock", ctx, req)}
}

func (_c *ISuiAPI_SuiExecuteTransactionBlock_Call) Run(run func(ctx context.Context, req models.SuiExecuteTransactionBlockRequest)) *ISuiAPI_SuiExecuteTransactionBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiExecuteTransactionBlockRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiExecuteTransactionBlock_Call) Return(_a0 models.SuiTransactionBlockResponse, _a1 error) *ISuiAPI_SuiExecuteTransactionBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiExecuteTransactionBlock_Call) RunAndReturn(run func(context.Context, models.SuiExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)) *ISuiAPI_SuiExecuteTransactionBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetChainIdentifier provides a mock function with given fields: ctx
func (_m *ISuiAPI) SuiGetChainIdentifier(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetChainIdentifier")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetChainIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetChainIdentifier'
type ISuiAPI_SuiGetChainIdentifier_Call struct {
	*mock.Call
}

// SuiGetChainIdentifier is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISuiAPI_Expecter) SuiGetChainIdentifier(ctx interface{}) *ISuiAPI_SuiGetChainIdentifier_Call {
	return &ISuiAPI_SuiGetChainIdentifier_Call{Call: _e.mock.On("SuiGetChainIdentifier", ctx)}
}

func (_c *ISuiAPI_SuiGetChainIdentifier_Call) Run(run func(ctx context.Context)) *ISuiAPI_SuiGetChainIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetChainIdentifier_Call) Return(_a0 string, _a1 error) *ISuiAPI_SuiGetChainIdentifier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetChainIdentifier_Call) RunAndReturn(run func(context.Context) (string, error)) *ISuiAPI_SuiGetChainIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetCheckpoint provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetCheckpoint(ctx context.Context, req models.SuiGetCheckpointRequest) (models.CheckpointResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetCheckpoint")
	}

	var r0 models.CheckpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetCheckpointRequest) (models.CheckpointResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetCheckpointRequest) models.CheckpointResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.CheckpointResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetCheckpointRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetCheckpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetCheckpoint'
type ISuiAPI_SuiGetCheckpoint_Call struct {
	*mock.Call
}

// SuiGetCheckpoint is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiGetCheckpointRequest
func (_e *ISuiAPI_Expecter) SuiGetCheckpoint(ctx interface{}, req interface{}) *ISuiAPI_SuiGetCheckpoint_Call {
	return &ISuiAPI_SuiGetCheckpoint_Call{Call: _e.mock.On("SuiGetCheckpoint", ctx, req)}
}

func (_c *ISuiAPI_SuiGetCheckpoint_Call) Run(run func(ctx context.Context, req models.SuiGetCheckpointRequest)) *ISuiAPI_SuiGetCheckpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiGetCheckpointRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetCheckpoint_Call) Return(_a0 models.CheckpointResponse, _a1 error) *ISuiAPI_SuiGetCheckpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetCheckpoint_Call) RunAndReturn(run func(context.Context, models.SuiGetCheckpointRequest) (models.CheckpointResponse, error)) *ISuiAPI_SuiGetCheckpoint_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetCheckpoints provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetCheckpoints(ctx context.Context, req models.SuiGetCheckpointsRequest) (models.PaginatedCheckpointsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetCheckpoints")
	}

	var r0 models.PaginatedCheckpointsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetCheckpointsRequest) (models.PaginatedCheckpointsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetCheckpointsRequest) models.PaginatedCheckpointsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedCheckpointsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetCheckpointsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetCheckpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetCheckpoints'
type ISuiAPI_SuiGetCheckpoints_Call struct {
	*mock.Call
}

// SuiGetCheckpoints is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiGetCheckpointsRequest
func (_e *ISuiAPI_Expecter) SuiGetCheckpoints(ctx interface{}, req interface{}) *ISuiAPI_SuiGetCheckpoints_Call {
	return &ISuiAPI_SuiGetCheckpoints_Call{Call: _e.mock.On("SuiGetCheckpoints", ctx, req)}
}

func (_c *ISuiAPI_SuiGetCheckpoints_Call) Run(run func(ctx context.Context, req models.SuiGetCheckpointsRequest)) *ISuiAPI_SuiGetCheckpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiGetCheckpointsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetCheckpoints_Call) Return(_a0 models.PaginatedCheckpointsResponse, _a1 error) *ISuiAPI_SuiGetCheckpoints_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetCheckpoints_Call) RunAndReturn(run func(context.Context, models.SuiGetCheckpointsRequest) (models.PaginatedCheckpointsResponse, error)) *ISuiAPI_SuiGetCheckpoints_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetEvents provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetEvents(ctx context.Context, req models.SuiGetEventsRequest) (models.GetEventsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetEvents")
	}

	var r0 models.GetEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetEventsRequest) (models.GetEventsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetEventsRequest) models.GetEventsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.GetEventsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetEventsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetEvents'
type ISuiAPI_SuiGetEvents_Call struct {
	*mock.Call
}

// SuiGetEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiGetEventsRequest
func (_e *ISuiAPI_Expecter) SuiGetEvents(ctx interface{}, req interface{}) *ISuiAPI_SuiGetEvents_Call {
	return &ISuiAPI_SuiGetEvents_Call{Call: _e.mock.On("SuiGetEvents", ctx, req)}
}

func (_c *ISuiAPI_SuiGetEvents_Call) Run(run func(ctx context.Context, req models.SuiGetEventsRequest)) *ISuiAPI_SuiGetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiGetEventsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetEvents_Call) Return(_a0 models.GetEventsResponse, _a1 error) *ISuiAPI_SuiGetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetEvents_Call) RunAndReturn(run func(context.Context, models.SuiGetEventsRequest) (models.GetEventsResponse, error)) *ISuiAPI_SuiGetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetLatestCheckpointSequenceNumber provides a mock function with given fields: ctx
func (_m *ISuiAPI) SuiGetLatestCheckpointSequenceNumber(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetLatestCheckpointSequenceNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetLatestCheckpointSequenceNumber'
type ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call struct {
	*mock.Call
}

// SuiGetLatestCheckpointSequenceNumber is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISuiAPI_Expecter) SuiGetLatestCheckpointSequenceNumber(ctx interface{}) *ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call {
	return &ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call{Call: _e.mock.On("SuiGetLatestCheckpointSequenceNumber", ctx)}
}

func (_c *ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call) Run(run func(ctx context.Context)) *ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call) Return(_a0 uint64, _a1 error) *ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call) RunAndReturn(run func(context.Context) (uint64, error)) *ISuiAPI_SuiGetLatestCheckpointSequenceNumber_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetLoadedChildObjects provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetLoadedChildObjects(ctx context.Context, req models.SuiGetLoadedChildObjectsRequest) (models.ChildObjectsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetLoadedChildObjects")
	}

	var r0 models.ChildObjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetLoadedChildObjectsRequest) (models.ChildObjectsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetLoadedChildObjectsRequest) models.ChildObjectsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.ChildObjectsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetLoadedChildObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetLoadedChildObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetLoadedChildObjects'
type ISuiAPI_SuiGetLoadedChildObjects_Call struct {
	*mock.Call
}

// SuiGetLoadedChildObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiGetLoadedChildObjectsRequest
func (_e *ISuiAPI_Expecter) SuiGetLoadedChildObjects(ctx interface{}, req interface{}) *ISuiAPI_SuiGetLoadedChildObjects_Call {
	return &ISuiAPI_SuiGetLoadedChildObjects_Call{Call: _e.mock.On("SuiGetLoadedChildObjects", ctx, req)}
}

func (_c *ISuiAPI_SuiGetLoadedChildObjects_Call) Run(run func(ctx context.Context, req models.SuiGetLoadedChildObjectsRequest)) *ISuiAPI_SuiGetLoadedChildObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiGetLoadedChildObjectsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetLoadedChildObjects_Call) Return(_a0 models.ChildObjectsResponse, _a1 error) *ISuiAPI_SuiGetLoadedChildObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetLoadedChildObjects_Call) RunAndReturn(run func(context.Context, models.SuiGetLoadedChildObjectsRequest) (models.ChildObjectsResponse, error)) *ISuiAPI_SuiGetLoadedChildObjects_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetMoveFunctionArgTypes provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetMoveFunctionArgTypes(ctx context.Context, req models.GetMoveFunctionArgTypesRequest) (models.GetMoveFunctionArgTypesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetMoveFunctionArgTypes")
	}

	var r0 models.GetMoveFunctionArgTypesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetMoveFunctionArgTypesRequest) (models.GetMoveFunctionArgTypesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetMoveFunctionArgTypesRequest) models.GetMoveFunctionArgTypesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.GetMoveFunctionArgTypesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetMoveFunctionArgTypesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetMoveFunctionArgTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetMoveFunctionArgTypes'
type ISuiAPI_SuiGetMoveFunctionArgTypes_Call struct {
	*mock.Call
}

// SuiGetMoveFunctionArgTypes is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.GetMoveFunctionArgTypesRequest
func (_e *ISuiAPI_Expecter) SuiGetMoveFunctionArgTypes(ctx interface{}, req interface{}) *ISuiAPI_SuiGetMoveFunctionArgTypes_Call {
	return &ISuiAPI_SuiGetMoveFunctionArgTypes_Call{Call: _e.mock.On("SuiGetMoveFunctionArgTypes", ctx, req)}
}

func (_c *ISuiAPI_SuiGetMoveFunctionArgTypes_Call) Run(run func(ctx context.Context, req models.GetMoveFunctionArgTypesRequest)) *ISuiAPI_SuiGetMoveFunctionArgTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.GetMoveFunctionArgTypesRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetMoveFunctionArgTypes_Call) Return(_a0 models.GetMoveFunctionArgTypesResponse, _a1 error) *ISuiAPI_SuiGetMoveFunctionArgTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetMoveFunctionArgTypes_Call) RunAndReturn(run func(context.Context, models.GetMoveFunctionArgTypesRequest) (models.GetMoveFunctionArgTypesResponse, error)) *ISuiAPI_SuiGetMoveFunctionArgTypes_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetNormalizedMoveFunction provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetNormalizedMoveFunction(ctx context.Context, req models.GetNormalizedMoveFunctionRequest) (models.GetNormalizedMoveFunctionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetNormalizedMoveFunction")
	}

	var r0 models.GetNormalizedMoveFunctionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveFunctionRequest) (models.GetNormalizedMoveFunctionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveFunctionRequest) models.GetNormalizedMoveFunctionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.GetNormalizedMoveFunctionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetNormalizedMoveFunctionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetNormalizedMoveFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetNormalizedMoveFunction'
type ISuiAPI_SuiGetNormalizedMoveFunction_Call struct {
	*mock.Call
}

// SuiGetNormalizedMoveFunction is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.GetNormalizedMoveFunctionRequest
func (_e *ISuiAPI_Expecter) SuiGetNormalizedMoveFunction(ctx interface{}, req interface{}) *ISuiAPI_SuiGetNormalizedMoveFunction_Call {
	return &ISuiAPI_SuiGetNormalizedMoveFunction_Call{Call: _e.mock.On("SuiGetNormalizedMoveFunction", ctx, req)}
}

func (_c *ISuiAPI_SuiGetNormalizedMoveFunction_Call) Run(run func(ctx context.Context, req models.GetNormalizedMoveFunctionRequest)) *ISuiAPI_SuiGetNormalizedMoveFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.GetNormalizedMoveFunctionRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetNormalizedMoveFunction_Call) Return(_a0 models.GetNormalizedMoveFunctionResponse, _a1 error) *ISuiAPI_SuiGetNormalizedMoveFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetNormalizedMoveFunction_Call) RunAndReturn(run func(context.Context, models.GetNormalizedMoveFunctionRequest) (models.GetNormalizedMoveFunctionResponse, error)) *ISuiAPI_SuiGetNormalizedMoveFunction_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetNormalizedMoveModule provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetNormalizedMoveModule(ctx context.Context, req models.GetNormalizedMoveModuleRequest) (models.GetNormalizedMoveModuleResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetNormalizedMoveModule")
	}

	var r0 models.GetNormalizedMoveModuleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveModuleRequest) (models.GetNormalizedMoveModuleResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveModuleRequest) models.GetNormalizedMoveModuleResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.GetNormalizedMoveModuleResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetNormalizedMoveModuleRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetNormalizedMoveModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetNormalizedMoveModule'
type ISuiAPI_SuiGetNormalizedMoveModule_Call struct {
	*mock.Call
}

// SuiGetNormalizedMoveModule is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.GetNormalizedMoveModuleRequest
func (_e *ISuiAPI_Expecter) SuiGetNormalizedMoveModule(ctx interface{}, req interface{}) *ISuiAPI_SuiGetNormalizedMoveModule_Call {
	return &ISuiAPI_SuiGetNormalizedMoveModule_Call{Call: _e.mock.On("SuiGetNormalizedMoveModule", ctx, req)}
}

func (_c *ISuiAPI_SuiGetNormalizedMoveModule_Call) Run(run func(ctx context.Context, req models.GetNormalizedMoveModuleRequest)) *ISuiAPI_SuiGetNormalizedMoveModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.GetNormalizedMoveModuleRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetNormalizedMoveModule_Call) Return(_a0 models.GetNormalizedMoveModuleResponse, _a1 error) *ISuiAPI_SuiGetNormalizedMoveModule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetNormalizedMoveModule_Call) RunAndReturn(run func(context.Context, models.GetNormalizedMoveModuleRequest) (models.GetNormalizedMoveModuleResponse, error)) *ISuiAPI_SuiGetNormalizedMoveModule_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetNormalizedMoveModulesByPackage provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetNormalizedMoveModulesByPackage(ctx context.Context, req models.GetNormalizedMoveModulesByPackageRequest) (models.GetNormalizedMoveModulesByPackageResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetNormalizedMoveModulesByPackage")
	}

	var r0 models.GetNormalizedMoveModulesByPackageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveModulesByPackageRequest) (models.GetNormalizedMoveModulesByPackageResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveModulesByPackageRequest) models.GetNormalizedMoveModulesByPackageResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.GetNormalizedMoveModulesByPackageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetNormalizedMoveModulesByPackageRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetNormalizedMoveModulesByPackage'
type ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call struct {
	*mock.Call
}

// SuiGetNormalizedMoveModulesByPackage is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.GetNormalizedMoveModulesByPackageRequest
func (_e *ISuiAPI_Expecter) SuiGetNormalizedMoveModulesByPackage(ctx interface{}, req interface{}) *ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call {
	return &ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call{Call: _e.mock.On("SuiGetNormalizedMoveModulesByPackage", ctx, req)}
}

func (_c *ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call) Run(run func(ctx context.Context, req models.GetNormalizedMoveModulesByPackageRequest)) *ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.GetNormalizedMoveModulesByPackageRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call) Return(_a0 models.GetNormalizedMoveModulesByPackageResponse, _a1 error) *ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call) RunAndReturn(run func(context.Context, models.GetNormalizedMoveModulesByPackageRequest) (models.GetNormalizedMoveModulesByPackageResponse, error)) *ISuiAPI_SuiGetNormalizedMoveModulesByPackage_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetNormalizedMoveStruct provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetNormalizedMoveStruct(ctx context.Context, req models.GetNormalizedMoveStructRequest) (models.GetNormalizedMoveStructResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetNormalizedMoveStruct")
	}

	var r0 models.GetNormalizedMoveStructResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveStructRequest) (models.GetNormalizedMoveStructResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetNormalizedMoveStructRequest) models.GetNormalizedMoveStructResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.GetNormalizedMoveStructResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetNormalizedMoveStructRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetNormalizedMoveStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetNormalizedMoveStruct'
type ISuiAPI_SuiGetNormalizedMoveStruct_Call struct {
	*mock.Call
}

// SuiGetNormalizedMoveStruct is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.GetNormalizedMoveStructRequest
func (_e *ISuiAPI_Expecter) SuiGetNormalizedMoveStruct(ctx interface{}, req interface{}) *ISuiAPI_SuiGetNormalizedMoveStruct_Call {
	return &ISuiAPI_SuiGetNormalizedMoveStruct_Call{Call: _e.mock.On("SuiGetNormalizedMoveStruct", ctx, req)}
}

func (_c *ISuiAPI_SuiGetNormalizedMoveStruct_Call) Run(run func(ctx context.Context, req models.GetNormalizedMoveStructRequest)) *ISuiAPI_SuiGetNormalizedMoveStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.GetNormalizedMoveStructRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetNormalizedMoveStruct_Call) Return(_a0 models.GetNormalizedMoveStructResponse, _a1 error) *ISuiAPI_SuiGetNormalizedMoveStruct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetNormalizedMoveStruct_Call) RunAndReturn(run func(context.Context, models.GetNormalizedMoveStructRequest) (models.GetNormalizedMoveStructResponse, error)) *ISuiAPI_SuiGetNormalizedMoveStruct_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetObject provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetObject(ctx context.Context, req models.SuiGetObjectRequest) (models.SuiObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetObject")
	}

	var r0 models.SuiObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetObjectRequest) (models.SuiObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetObjectRequest) models.SuiObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiObjectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetObjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetObject'
type ISuiAPI_SuiGetObject_Call struct {
	*mock.Call
}

// SuiGetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiGetObjectRequest
func (_e *ISuiAPI_Expecter) SuiGetObject(ctx interface{}, req interface{}) *ISuiAPI_SuiGetObject_Call {
	return &ISuiAPI_SuiGetObject_Call{Call: _e.mock.On("SuiGetObject", ctx, req)}
}

func (_c *ISuiAPI_SuiGetObject_Call) Run(run func(ctx context.Context, req models.SuiGetObjectRequest)) *ISuiAPI_SuiGetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiGetObjectRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetObject_Call) Return(_a0 models.SuiObjectResponse, _a1 error) *ISuiAPI_SuiGetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetObject_Call) RunAndReturn(run func(context.Context, models.SuiGetObjectRequest) (models.SuiObjectResponse, error)) *ISuiAPI_SuiGetObject_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetProtocolConfig provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetProtocolConfig(ctx context.Context, req models.SuiGetProtocolConfigRequest) (models.ProtocolConfigResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetProtocolConfig")
	}

	var r0 models.ProtocolConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetProtocolConfigRequest) (models.ProtocolConfigResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetProtocolConfigRequest) models.ProtocolConfigResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.ProtocolConfigResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetProtocolConfigRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetProtocolConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetProtocolConfig'
type ISuiAPI_SuiGetProtocolConfig_Call struct {
	*mock.Call
}

// SuiGetProtocolConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiGetProtocolConfigRequest
func (_e *ISuiAPI_Expecter) SuiGetProtocolConfig(ctx interface{}, req interface{}) *ISuiAPI_SuiGetProtocolConfig_Call {
	return &ISuiAPI_SuiGetProtocolConfig_Call{Call: _e.mock.On("SuiGetProtocolConfig", ctx, req)}
}

func (_c *ISuiAPI_SuiGetProtocolConfig_Call) Run(run func(ctx context.Context, req models.SuiGetProtocolConfigRequest)) *ISuiAPI_SuiGetProtocolConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiGetProtocolConfigRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetProtocolConfig_Call) Return(_a0 models.ProtocolConfigResponse, _a1 error) *ISuiAPI_SuiGetProtocolConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetProtocolConfig_Call) RunAndReturn(run func(context.Context, models.SuiGetProtocolConfigRequest) (models.ProtocolConfigResponse, error)) *ISuiAPI_SuiGetProtocolConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetTotalTransactionBlocks provides a mock function with given fields: ctx
func (_m *ISuiAPI) SuiGetTotalTransactionBlocks(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetTotalTransactionBlocks")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetTotalTransactionBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetTotalTransactionBlocks'
type ISuiAPI_SuiGetTotalTransactionBlocks_Call struct {
	*mock.Call
}

// SuiGetTotalTransactionBlocks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISuiAPI_Expecter) SuiGetTotalTransactionBlocks(ctx interface{}) *ISuiAPI_SuiGetTotalTransactionBlocks_Call {
	return &ISuiAPI_SuiGetTotalTransactionBlocks_Call{Call: _e.mock.On("SuiGetTotalTransactionBlocks", ctx)}
}

func (_c *ISuiAPI_SuiGetTotalTransactionBlocks_Call) Run(run func(ctx context.Context)) *ISuiAPI_SuiGetTotalTransactionBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetTotalTransactionBlocks_Call) Return(_a0 uint64, _a1 error) *ISuiAPI_SuiGetTotalTransactionBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetTotalTransactionBlocks_Call) RunAndReturn(run func(context.Context) (uint64, error)) *ISuiAPI_SuiGetTotalTransactionBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// SuiGetTransactionBlock provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiGetTransactionBlock(ctx context.Context, req models.SuiGetTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiGetTransactionBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiGetTransactionBlock'
type ISuiAPI_SuiGetTransactionBlock_Call struct {
	*mock.Call
}

// SuiGetTransactionBlock is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiGetTransactionBlockRequest
func (_e *ISuiAPI_Expecter) SuiGetTransactionBlock(ctx interface{}, req interface{}) *ISuiAPI_SuiGetTransactionBlock_Call {
	return &ISuiAPI_SuiGetTransactionBlock_Call{Call: _e.mock.On("SuiGetTransactionBlock", ctx, req)}
}

func (_c *ISuiAPI_SuiGetTransactionBlock_Call) Run(run func(ctx context.Context, req models.SuiGetTransactionBlockRequest)) *ISuiAPI_SuiGetTransactionBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiGetTransactionBlockRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiGetTransactionBlock_Call) Return(_a0 models.SuiTransactionBlockResponse, _a1 error) *ISuiAPI_SuiGetTransactionBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiGetTransactionBlock_Call) RunAndReturn(run func(context.Context, models.SuiGetTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)) *ISuiAPI_SuiGetTransactionBlock_Call {
	_c.Call.Return(run)
	return _c
}

// SuiMultiGetObjects provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiMultiGetObjects(ctx context.Context, req models.SuiMultiGetObjectsRequest) ([]*models.SuiObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiMultiGetObjects")
	}

	var r0 []*models.SuiObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetObjectsRequest) ([]*models.SuiObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetObjectsRequest) []*models.SuiObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SuiObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiMultiGetObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiMultiGetObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiMultiGetObjects'
type ISuiAPI_SuiMultiGetObjects_Call struct {
	*mock.Call
}

// SuiMultiGetObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiMultiGetObjectsRequest
func (_e *ISuiAPI_Expecter) SuiMultiGetObjects(ctx interface{}, req interface{}) *ISuiAPI_SuiMultiGetObjects_Call {
	return &ISuiAPI_SuiMultiGetObjects_Call{Call: _e.mock.On("SuiMultiGetObjects", ctx, req)}
}

func (_c *ISuiAPI_SuiMultiGetObjects_Call) Run(run func(ctx context.Context, req models.SuiMultiGetObjectsRequest)) *ISuiAPI_SuiMultiGetObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiMultiGetObjectsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiMultiGetObjects_Call) Return(_a0 []*models.SuiObjectResponse, _a1 error) *ISuiAPI_SuiMultiGetObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiMultiGetObjects_Call) RunAndReturn(run func(context.Context, models.SuiMultiGetObjectsRequest) ([]*models.SuiObjectResponse, error)) *ISuiAPI_SuiMultiGetObjects_Call {
	_c.Call.Return(run)
	return _c
}

// SuiMultiGetTransactionBlocks provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiMultiGetTransactionBlocks(ctx context.Context, req models.SuiMultiGetTransactionBlocksRequest) (models.SuiMultiGetTransactionBlocksResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiMultiGetTransactionBlocks")
	}

	var r0 models.SuiMultiGetTransactionBlocksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetTransactionBlocksRequest) (models.SuiMultiGetTransactionBlocksResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetTransactionBlocksRequest) models.SuiMultiGetTransactionBlocksResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.SuiMultiGetTransactionBlocksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiMultiGetTransactionBlocksRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiMultiGetTransactionBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiMultiGetTransactionBlocks'
type ISuiAPI_SuiMultiGetTransactionBlocks_Call struct {
	*mock.Call
}

// SuiMultiGetTransactionBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiMultiGetTransactionBlocksRequest
func (_e *ISuiAPI_Expecter) SuiMultiGetTransactionBlocks(ctx interface{}, req interface{}) *ISuiAPI_SuiMultiGetTransactionBlocks_Call {
	return &ISuiAPI_SuiMultiGetTransactionBlocks_Call{Call: _e.mock.On("SuiMultiGetTransactionBlocks", ctx, req)}
}

func (_c *ISuiAPI_SuiMultiGetTransactionBlocks_Call) Run(run func(ctx context.Context, req models.SuiMultiGetTransactionBlocksRequest)) *ISuiAPI_SuiMultiGetTransactionBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiMultiGetTransactionBlocksRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiMultiGetTransactionBlocks_Call) Return(_a0 models.SuiMultiGetTransactionBlocksResponse, _a1 error) *ISuiAPI_SuiMultiGetTransactionBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiMultiGetTransactionBlocks_Call) RunAndReturn(run func(context.Context, models.SuiMultiGetTransactionBlocksRequest) (models.SuiMultiGetTransactionBlocksResponse, error)) *ISuiAPI_SuiMultiGetTransactionBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// SuiTryGetPastObject provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiTryGetPastObject(ctx context.Context, req models.SuiTryGetPastObjectRequest) (models.PastObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiTryGetPastObject")
	}

	var r0 models.PastObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiTryGetPastObjectRequest) (models.PastObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiTryGetPastObjectRequest) models.PastObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PastObjectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiTryGetPastObjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiTryGetPastObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiTryGetPastObject'
type ISuiAPI_SuiTryGetPastObject_Call struct {
	*mock.Call
}

// SuiTryGetPastObject is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiTryGetPastObjectRequest
func (_e *ISuiAPI_Expecter) SuiTryGetPastObject(ctx interface{}, req interface{}) *ISuiAPI_SuiTryGetPastObject_Call {
	return &ISuiAPI_SuiTryGetPastObject_Call{Call: _e.mock.On("SuiTryGetPastObject", ctx, req)}
}

func (_c *ISuiAPI_SuiTryGetPastObject_Call) Run(run func(ctx context.Context, req models.SuiTryGetPastObjectRequest)) *ISuiAPI_SuiTryGetPastObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiTryGetPastObjectRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiTryGetPastObject_Call) Return(_a0 models.PastObjectResponse, _a1 error) *ISuiAPI_SuiTryGetPastObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiTryGetPastObject_Call) RunAndReturn(run func(context.Context, models.SuiTryGetPastObjectRequest) (models.PastObjectResponse, error)) *ISuiAPI_SuiTryGetPastObject_Call {
	_c.Call.Return(run)
	return _c
}

// SuiTryMultiGetPastObjects provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiTryMultiGetPastObjects(ctx context.Context, req models.SuiTryMultiGetPastObjectsRequest) ([]*models.PastObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiTryMultiGetPastObjects")
	}

	var r0 []*models.PastObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiTryMultiGetPastObjectsRequest) ([]*models.PastObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiTryMultiGetPastObjectsRequest) []*models.PastObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PastObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiTryMultiGetPastObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiTryMultiGetPastObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiTryMultiGetPastObjects'
type ISuiAPI_SuiTryMultiGetPastObjects_Call struct {
	*mock.Call
}

// SuiTryMultiGetPastObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiTryMultiGetPastObjectsRequest
func (_e *ISuiAPI_Expecter) SuiTryMultiGetPastObjects(ctx interface{}, req interface{}) *ISuiAPI_SuiTryMultiGetPastObjects_Call {
	return &ISuiAPI_SuiTryMultiGetPastObjects_Call{Call: _e.mock.On("SuiTryMultiGetPastObjects", ctx, req)}
}

func (_c *ISuiAPI_SuiTryMultiGetPastObjects_Call) Run(run func(ctx context.Context, req models.SuiTryMultiGetPastObjectsRequest)) *ISuiAPI_SuiTryMultiGetPastObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiTryMultiGetPastObjectsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiTryMultiGetPastObjects_Call) Return(_a0 []*models.PastObjectResponse, _a1 error) *ISuiAPI_SuiTryMultiGetPastObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiTryMultiGetPastObjects_Call) RunAndReturn(run func(context.Context, models.SuiTryMultiGetPastObjectsRequest) ([]*models.PastObjectResponse, error)) *ISuiAPI_SuiTryMultiGetPastObjects_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetAllBalance provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetAllBalance(ctx context.Context, req models.SuiXGetAllBalanceRequest) (models.CoinAllBalanceResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetAllBalance")
	}

	var r0 models.CoinAllBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetAllBalanceRequest) (models.CoinAllBalanceResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetAllBalanceRequest) models.CoinAllBalanceResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.CoinAllBalanceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetAllBalanceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetAllBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetAllBalance'
type ISuiAPI_SuiXGetAllBalance_Call struct {
	*mock.Call
}

// SuiXGetAllBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetAllBalanceRequest
func (_e *ISuiAPI_Expecter) SuiXGetAllBalance(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetAllBalance_Call {
	return &ISuiAPI_SuiXGetAllBalance_Call{Call: _e.mock.On("SuiXGetAllBalance", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetAllBalance_Call) Run(run func(ctx context.Context, req models.SuiXGetAllBalanceRequest)) *ISuiAPI_SuiXGetAllBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetAllBalanceRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetAllBalance_Call) Return(_a0 models.CoinAllBalanceResponse, _a1 error) *ISuiAPI_SuiXGetAllBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetAllBalance_Call) RunAndReturn(run func(context.Context, models.SuiXGetAllBalanceRequest) (models.CoinAllBalanceResponse, error)) *ISuiAPI_SuiXGetAllBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetAllCoins provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetAllCoins(ctx context.Context, req models.SuiXGetAllCoinsRequest) (models.PaginatedCoinsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetAllCoins")
	}

	var r0 models.PaginatedCoinsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetAllCoinsRequest) (models.PaginatedCoinsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetAllCoinsRequest) models.PaginatedCoinsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedCoinsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetAllCoinsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetAllCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetAllCoins'
type ISuiAPI_SuiXGetAllCoins_Call struct {
	*mock.Call
}

// SuiXGetAllCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetAllCoinsRequest
func (_e *ISuiAPI_Expecter) SuiXGetAllCoins(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetAllCoins_Call {
	return &ISuiAPI_SuiXGetAllCoins_Call{Call: _e.mock.On("SuiXGetAllCoins", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetAllCoins_Call) Run(run func(ctx context.Context, req models.SuiXGetAllCoinsRequest)) *ISuiAPI_SuiXGetAllCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetAllCoinsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetAllCoins_Call) Return(_a0 models.PaginatedCoinsResponse, _a1 error) *ISuiAPI_SuiXGetAllCoins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetAllCoins_Call) RunAndReturn(run func(context.Context, models.SuiXGetAllCoinsRequest) (models.PaginatedCoinsResponse, error)) *ISuiAPI_SuiXGetAllCoins_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetBalance provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetBalance(ctx context.Context, req models.SuiXGetBalanceRequest) (models.CoinBalanceResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetBalance")
	}

	var r0 models.CoinBalanceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetBalanceRequest) (models.CoinBalanceResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetBalanceRequest) models.CoinBalanceResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.CoinBalanceResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetBalanceRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetBalance'
type ISuiAPI_SuiXGetBalance_Call struct {
	*mock.Call
}

// SuiXGetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetBalanceRequest
func (_e *ISuiAPI_Expecter) SuiXGetBalance(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetBalance_Call {
	return &ISuiAPI_SuiXGetBalance_Call{Call: _e.mock.On("SuiXGetBalance", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetBalance_Call) Run(run func(ctx context.Context, req models.SuiXGetBalanceRequest)) *ISuiAPI_SuiXGetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetBalanceRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetBalance_Call) Return(_a0 models.CoinBalanceResponse, _a1 error) *ISuiAPI_SuiXGetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetBalance_Call) RunAndReturn(run func(context.Context, models.SuiXGetBalanceRequest) (models.CoinBalanceResponse, error)) *ISuiAPI_SuiXGetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetCoinMetadata provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetCoinMetadata(ctx context.Context, req models.SuiXGetCoinMetadataRequest) (models.CoinMetadataResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetCoinMetadata")
	}

	var r0 models.CoinMetadataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCoinMetadataRequest) (models.CoinMetadataResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCoinMetadataRequest) models.CoinMetadataResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.CoinMetadataResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetCoinMetadataRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetCoinMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetCoinMetadata'
type ISuiAPI_SuiXGetCoinMetadata_Call struct {
	*mock.Call
}

// SuiXGetCoinMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetCoinMetadataRequest
func (_e *ISuiAPI_Expecter) SuiXGetCoinMetadata(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetCoinMetadata_Call {
	return &ISuiAPI_SuiXGetCoinMetadata_Call{Call: _e.mock.On("SuiXGetCoinMetadata", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetCoinMetadata_Call) Run(run func(ctx context.Context, req models.SuiXGetCoinMetadataRequest)) *ISuiAPI_SuiXGetCoinMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetCoinMetadataRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetCoinMetadata_Call) Return(_a0 models.CoinMetadataResponse, _a1 error) *ISuiAPI_SuiXGetCoinMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetCoinMetadata_Call) RunAndReturn(run func(context.Context, models.SuiXGetCoinMetadataRequest) (models.CoinMetadataResponse, error)) *ISuiAPI_SuiXGetCoinMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetCoins provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetCoins(ctx context.Context, req models.SuiXGetCoinsRequest) (models.PaginatedCoinsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetCoins")
	}

	var r0 models.PaginatedCoinsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCoinsRequest) (models.PaginatedCoinsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCoinsRequest) models.PaginatedCoinsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedCoinsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetCoinsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetCoins'
type ISuiAPI_SuiXGetCoins_Call struct {
	*mock.Call
}

// SuiXGetCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetCoinsRequest
func (_e *ISuiAPI_Expecter) SuiXGetCoins(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetCoins_Call {
	return &ISuiAPI_SuiXGetCoins_Call{Call: _e.mock.On("SuiXGetCoins", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetCoins_Call) Run(run func(ctx context.Context, req models.SuiXGetCoinsRequest)) *ISuiAPI_SuiXGetCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetCoinsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetCoins_Call) Return(_a0 models.PaginatedCoinsResponse, _a1 error) *ISuiAPI_SuiXGetCoins_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetCoins_Call) RunAndReturn(run func(context.Context, models.SuiXGetCoinsRequest) (models.PaginatedCoinsResponse, error)) *ISuiAPI_SuiXGetCoins_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetCommitteeInfo provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetCommitteeInfo(ctx context.Context, req models.SuiXGetCommitteeInfoRequest) (models.SuiXGetCommitteeInfoResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetCommitteeInfo")
	}

	var r0 models.SuiXGetCommitteeInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCommitteeInfoRequest) (models.SuiXGetCommitteeInfoResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetCommitteeInfoRequest) models.SuiXGetCommitteeInfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiXGetCommitteeInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetCommitteeInfoRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetCommitteeInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetCommitteeInfo'
type ISuiAPI_SuiXGetCommitteeInfo_Call struct {
	*mock.Call
}

// SuiXGetCommitteeInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetCommitteeInfoRequest
func (_e *ISuiAPI_Expecter) SuiXGetCommitteeInfo(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetCommitteeInfo_Call {
	return &ISuiAPI_SuiXGetCommitteeInfo_Call{Call: _e.mock.On("SuiXGetCommitteeInfo", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetCommitteeInfo_Call) Run(run func(ctx context.Context, req models.SuiXGetCommitteeInfoRequest)) *ISuiAPI_SuiXGetCommitteeInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetCommitteeInfoRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetCommitteeInfo_Call) Return(_a0 models.SuiXGetCommitteeInfoResponse, _a1 error) *ISuiAPI_SuiXGetCommitteeInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetCommitteeInfo_Call) RunAndReturn(run func(context.Context, models.SuiXGetCommitteeInfoRequest) (models.SuiXGetCommitteeInfoResponse, error)) *ISuiAPI_SuiXGetCommitteeInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetCurrentEpoch provides a mock function with given fields: ctx
func (_m *ISuiAPI) SuiXGetCurrentEpoch(ctx context.Context) (models.EpochInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetCurrentEpoch")
	}

	var r0 models.EpochInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.EpochInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.EpochInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.EpochInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetCurrentEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetCurrentEpoch'
type ISuiAPI_SuiXGetCurrentEpoch_Call struct {
	*mock.Call
}

// SuiXGetCurrentEpoch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISuiAPI_Expecter) SuiXGetCurrentEpoch(ctx interface{}) *ISuiAPI_SuiXGetCurrentEpoch_Call {
	return &ISuiAPI_SuiXGetCurrentEpoch_Call{Call: _e.mock.On("SuiXGetCurrentEpoch", ctx)}
}

func (_c *ISuiAPI_SuiXGetCurrentEpoch_Call) Run(run func(ctx context.Context)) *ISuiAPI_SuiXGetCurrentEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetCurrentEpoch_Call) Return(_a0 models.EpochInfo, _a1 error) *ISuiAPI_SuiXGetCurrentEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetCurrentEpoch_Call) RunAndReturn(run func(context.Context) (models.EpochInfo, error)) *ISuiAPI_SuiXGetCurrentEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetDynamicField provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetDynamicField(ctx context.Context, req models.SuiXGetDynamicFieldRequest) (models.PaginatedDynamicFieldInfoResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetDynamicField")
	}

	var r0 models.PaginatedDynamicFieldInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetDynamicFieldRequest) (models.PaginatedDynamicFieldInfoResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetDynamicFieldRequest) models.PaginatedDynamicFieldInfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedDynamicFieldInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetDynamicFieldRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetDynamicField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetDynamicField'
type ISuiAPI_SuiXGetDynamicField_Call struct {
	*mock.Call
}

// SuiXGetDynamicField is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetDynamicFieldRequest
func (_e *ISuiAPI_Expecter) SuiXGetDynamicField(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetDynamicField_Call {
	return &ISuiAPI_SuiXGetDynamicField_Call{Call: _e.mock.On("SuiXGetDynamicField", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetDynamicField_Call) Run(run func(ctx context.Context, req models.SuiXGetDynamicFieldRequest)) *ISuiAPI_SuiXGetDynamicField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetDynamicFieldRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetDynamicField_Call) Return(_a0 models.PaginatedDynamicFieldInfoResponse, _a1 error) *ISuiAPI_SuiXGetDynamicField_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetDynamicField_Call) RunAndReturn(run func(context.Context, models.SuiXGetDynamicFieldRequest) (models.PaginatedDynamicFieldInfoResponse, error)) *ISuiAPI_SuiXGetDynamicField_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetDynamicFieldObject provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetDynamicFieldObject(ctx context.Context, req models.SuiXGetDynamicFieldObjectRequest) (models.SuiObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetDynamicFieldObject")
	}

	var r0 models.SuiObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetDynamicFieldObjectRequest) (models.SuiObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetDynamicFieldObjectRequest) models.SuiObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiObjectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetDynamicFieldObjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetDynamicFieldObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetDynamicFieldObject'
type ISuiAPI_SuiXGetDynamicFieldObject_Call struct {
	*mock.Call
}

// SuiXGetDynamicFieldObject is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetDynamicFieldObjectRequest
func (_e *ISuiAPI_Expecter) SuiXGetDynamicFieldObject(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetDynamicFieldObject_Call {
	return &ISuiAPI_SuiXGetDynamicFieldObject_Call{Call: _e.mock.On("SuiXGetDynamicFieldObject", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetDynamicFieldObject_Call) Run(run func(ctx context.Context, req models.SuiXGetDynamicFieldObjectRequest)) *ISuiAPI_SuiXGetDynamicFieldObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetDynamicFieldObjectRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetDynamicFieldObject_Call) Return(_a0 models.SuiObjectResponse, _a1 error) *ISuiAPI_SuiXGetDynamicFieldObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetDynamicFieldObject_Call) RunAndReturn(run func(context.Context, models.SuiXGetDynamicFieldObjectRequest) (models.SuiObjectResponse, error)) *ISuiAPI_SuiXGetDynamicFieldObject_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetEpochs provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetEpochs(ctx context.Context, req models.SuiXGetEpochsRequest) (models.PaginatedEpochInfoResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetEpochs")
	}

	var r0 models.PaginatedEpochInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetEpochsRequest) (models.PaginatedEpochInfoResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetEpochsRequest) models.PaginatedEpochInfoResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedEpochInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetEpochsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetEpochs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetEpochs'
type ISuiAPI_SuiXGetEpochs_Call struct {
	*mock.Call
}

// SuiXGetEpochs is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetEpochsRequest
func (_e *ISuiAPI_Expecter) SuiXGetEpochs(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetEpochs_Call {
	return &ISuiAPI_SuiXGetEpochs_Call{Call: _e.mock.On("SuiXGetEpochs", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetEpochs_Call) Run(run func(ctx context.Context, req models.SuiXGetEpochsRequest)) *ISuiAPI_SuiXGetEpochs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetEpochsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetEpochs_Call) Return(_a0 models.PaginatedEpochInfoResponse, _a1 error) *ISuiAPI_SuiXGetEpochs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetEpochs_Call) RunAndReturn(run func(context.Context, models.SuiXGetEpochsRequest) (models.PaginatedEpochInfoResponse, error)) *ISuiAPI_SuiXGetEpochs_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetLatestSuiSystemState provides a mock function with given fields: ctx
func (_m *ISuiAPI) SuiXGetLatestSuiSystemState(ctx context.Context) (models.SuiSystemStateSummary, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetLatestSuiSystemState")
	}

	var r0 models.SuiSystemStateSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.SuiSystemStateSummary, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.SuiSystemStateSummary); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.SuiSystemStateSummary)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetLatestSuiSystemState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetLatestSuiSystemState'
type ISuiAPI_SuiXGetLatestSuiSystemState_Call struct {
	*mock.Call
}

// SuiXGetLatestSuiSystemState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISuiAPI_Expecter) SuiXGetLatestSuiSystemState(ctx interface{}) *ISuiAPI_SuiXGetLatestSuiSystemState_Call {
	return &ISuiAPI_SuiXGetLatestSuiSystemState_Call{Call: _e.mock.On("SuiXGetLatestSuiSystemState", ctx)}
}

func (_c *ISuiAPI_SuiXGetLatestSuiSystemState_Call) Run(run func(ctx context.Context)) *ISuiAPI_SuiXGetLatestSuiSystemState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetLatestSuiSystemState_Call) Return(_a0 models.SuiSystemStateSummary, _a1 error) *ISuiAPI_SuiXGetLatestSuiSystemState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetLatestSuiSystemState_Call) RunAndReturn(run func(context.Context) (models.SuiSystemStateSummary, error)) *ISuiAPI_SuiXGetLatestSuiSystemState_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetOwnedObjects provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetOwnedObjects(ctx context.Context, req models.SuiXGetOwnedObjectsRequest) (models.PaginatedObjectsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetOwnedObjects")
	}

	var r0 models.PaginatedObjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetOwnedObjectsRequest) (models.PaginatedObjectsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetOwnedObjectsRequest) models.PaginatedObjectsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedObjectsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetOwnedObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetOwnedObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetOwnedObjects'
type ISuiAPI_SuiXGetOwnedObjects_Call struct {
	*mock.Call
}

// SuiXGetOwnedObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetOwnedObjectsRequest
func (_e *ISuiAPI_Expecter) SuiXGetOwnedObjects(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetOwnedObjects_Call {
	return &ISuiAPI_SuiXGetOwnedObjects_Call{Call: _e.mock.On("SuiXGetOwnedObjects", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetOwnedObjects_Call) Run(run func(ctx context.Context, req models.SuiXGetOwnedObjectsRequest)) *ISuiAPI_SuiXGetOwnedObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetOwnedObjectsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetOwnedObjects_Call) Return(_a0 models.PaginatedObjectsResponse, _a1 error) *ISuiAPI_SuiXGetOwnedObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetOwnedObjects_Call) RunAndReturn(run func(context.Context, models.SuiXGetOwnedObjectsRequest) (models.PaginatedObjectsResponse, error)) *ISuiAPI_SuiXGetOwnedObjects_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetReferenceGasPrice provides a mock function with given fields: ctx
func (_m *ISuiAPI) SuiXGetReferenceGasPrice(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetReferenceGasPrice")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetReferenceGasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetReferenceGasPrice'
type ISuiAPI_SuiXGetReferenceGasPrice_Call struct {
	*mock.Call
}

// SuiXGetReferenceGasPrice is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISuiAPI_Expecter) SuiXGetReferenceGasPrice(ctx interface{}) *ISuiAPI_SuiXGetReferenceGasPrice_Call {
	return &ISuiAPI_SuiXGetReferenceGasPrice_Call{Call: _e.mock.On("SuiXGetReferenceGasPrice", ctx)}
}

func (_c *ISuiAPI_SuiXGetReferenceGasPrice_Call) Run(run func(ctx context.Context)) *ISuiAPI_SuiXGetReferenceGasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetReferenceGasPrice_Call) Return(_a0 uint64, _a1 error) *ISuiAPI_SuiXGetReferenceGasPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetReferenceGasPrice_Call) RunAndReturn(run func(context.Context) (uint64, error)) *ISuiAPI_SuiXGetReferenceGasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetStakes provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetStakes(ctx context.Context, req models.SuiXGetStakesRequest) ([]*models.DelegatedStakesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetStakes")
	}

	var r0 []*models.DelegatedStakesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetStakesRequest) ([]*models.DelegatedStakesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetStakesRequest) []*models.DelegatedStakesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DelegatedStakesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetStakesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetStakes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetStakes'
type ISuiAPI_SuiXGetStakes_Call struct {
	*mock.Call
}

// SuiXGetStakes is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetStakesRequest
func (_e *ISuiAPI_Expecter) SuiXGetStakes(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetStakes_Call {
	return &ISuiAPI_SuiXGetStakes_Call{Call: _e.mock.On("SuiXGetStakes", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetStakes_Call) Run(run func(ctx context.Context, req models.SuiXGetStakesRequest)) *ISuiAPI_SuiXGetStakes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetStakesRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetStakes_Call) Return(_a0 []*models.DelegatedStakesResponse, _a1 error) *ISuiAPI_SuiXGetStakes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetStakes_Call) RunAndReturn(run func(context.Context, models.SuiXGetStakesRequest) ([]*models.DelegatedStakesResponse, error)) *ISuiAPI_SuiXGetStakes_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetStakesByIds provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetStakesByIds(ctx context.Context, req models.SuiXGetStakesByIdsRequest) ([]*models.DelegatedStakesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetStakesByIds")
	}

	var r0 []*models.DelegatedStakesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetStakesByIdsRequest) ([]*models.DelegatedStakesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetStakesByIdsRequest) []*models.DelegatedStakesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DelegatedStakesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetStakesByIdsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetStakesByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetStakesByIds'
type ISuiAPI_SuiXGetStakesByIds_Call struct {
	*mock.Call
}

// SuiXGetStakesByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetStakesByIdsRequest
func (_e *ISuiAPI_Expecter) SuiXGetStakesByIds(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetStakesByIds_Call {
	return &ISuiAPI_SuiXGetStakesByIds_Call{Call: _e.mock.On("SuiXGetStakesByIds", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetStakesByIds_Call) Run(run func(ctx context.Context, req models.SuiXGetStakesByIdsRequest)) *ISuiAPI_SuiXGetStakesByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetStakesByIdsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetStakesByIds_Call) Return(_a0 []*models.DelegatedStakesResponse, _a1 error) *ISuiAPI_SuiXGetStakesByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetStakesByIds_Call) RunAndReturn(run func(context.Context, models.SuiXGetStakesByIdsRequest) ([]*models.DelegatedStakesResponse, error)) *ISuiAPI_SuiXGetStakesByIds_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetTotalSupply provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXGetTotalSupply(ctx context.Context, req models.SuiXGetTotalSupplyRequest) (models.TotalSupplyResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetTotalSupply")
	}

	var r0 models.TotalSupplyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetTotalSupplyRequest) (models.TotalSupplyResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXGetTotalSupplyRequest) models.TotalSupplyResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TotalSupplyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXGetTotalSupplyRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetTotalSupply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetTotalSupply'
type ISuiAPI_SuiXGetTotalSupply_Call struct {
	*mock.Call
}

// SuiXGetTotalSupply is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXGetTotalSupplyRequest
func (_e *ISuiAPI_Expecter) SuiXGetTotalSupply(ctx interface{}, req interface{}) *ISuiAPI_SuiXGetTotalSupply_Call {
	return &ISuiAPI_SuiXGetTotalSupply_Call{Call: _e.mock.On("SuiXGetTotalSupply", ctx, req)}
}

func (_c *ISuiAPI_SuiXGetTotalSupply_Call) Run(run func(ctx context.Context, req models.SuiXGetTotalSupplyRequest)) *ISuiAPI_SuiXGetTotalSupply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXGetTotalSupplyRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetTotalSupply_Call) Return(_a0 models.TotalSupplyResponse, _a1 error) *ISuiAPI_SuiXGetTotalSupply_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetTotalSupply_Call) RunAndReturn(run func(context.Context, models.SuiXGetTotalSupplyRequest) (models.TotalSupplyResponse, error)) *ISuiAPI_SuiXGetTotalSupply_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXGetValidatorsApy provides a mock function with given fields: ctx
func (_m *ISuiAPI) SuiXGetValidatorsApy(ctx context.Context) (models.ValidatorsApy, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetValidatorsApy")
	}

	var r0 models.ValidatorsApy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.ValidatorsApy, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.ValidatorsApy); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.ValidatorsApy)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXGetValidatorsApy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXGetValidatorsApy'
type ISuiAPI_SuiXGetValidatorsApy_Call struct {
	*mock.Call
}

// SuiXGetValidatorsApy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISuiAPI_Expecter) SuiXGetValidatorsApy(ctx interface{}) *ISuiAPI_SuiXGetValidatorsApy_Call {
	return &ISuiAPI_SuiXGetValidatorsApy_Call{Call: _e.mock.On("SuiXGetValidatorsApy", ctx)}
}

func (_c *ISuiAPI_SuiXGetValidatorsApy_Call) Run(run func(ctx context.Context)) *ISuiAPI_SuiXGetValidatorsApy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISuiAPI_SuiXGetValidatorsApy_Call) Return(_a0 models.ValidatorsApy, _a1 error) *ISuiAPI_SuiXGetValidatorsApy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXGetValidatorsApy_Call) RunAndReturn(run func(context.Context) (models.ValidatorsApy, error)) *ISuiAPI_SuiXGetValidatorsApy_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXQueryEvents provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXQueryEvents(ctx context.Context, req models.SuiXQueryEventsRequest) (models.PaginatedEventsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXQueryEvents")
	}

	var r0 models.PaginatedEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryEventsRequest) (models.PaginatedEventsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryEventsRequest) models.PaginatedEventsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedEventsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXQueryEventsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXQueryEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXQueryEvents'
type ISuiAPI_SuiXQueryEvents_Call struct {
	*mock.Call
}

// SuiXQueryEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXQueryEventsRequest
func (_e *ISuiAPI_Expecter) SuiXQueryEvents(ctx interface{}, req interface{}) *ISuiAPI_SuiXQueryEvents_Call {
	return &ISuiAPI_SuiXQueryEvents_Call{Call: _e.mock.On("SuiXQueryEvents", ctx, req)}
}

func (_c *ISuiAPI_SuiXQueryEvents_Call) Run(run func(ctx context.Context, req models.SuiXQueryEventsRequest)) *ISuiAPI_SuiXQueryEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXQueryEventsRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXQueryEvents_Call) Return(_a0 models.PaginatedEventsResponse, _a1 error) *ISuiAPI_SuiXQueryEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXQueryEvents_Call) RunAndReturn(run func(context.Context, models.SuiXQueryEventsRequest) (models.PaginatedEventsResponse, error)) *ISuiAPI_SuiXQueryEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXQueryTransactionBlocks provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXQueryTransactionBlocks(ctx context.Context, req models.SuiXQueryTransactionBlocksRequest) (models.SuiXQueryTransactionBlocksResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXQueryTransactionBlocks")
	}

	var r0 models.SuiXQueryTransactionBlocksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryTransactionBlocksRequest) (models.SuiXQueryTransactionBlocksResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryTransactionBlocksRequest) models.SuiXQueryTransactionBlocksResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiXQueryTransactionBlocksResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXQueryTransactionBlocksRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXQueryTransactionBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXQueryTransactionBlocks'
type ISuiAPI_SuiXQueryTransactionBlocks_Call struct {
	*mock.Call
}

// SuiXQueryTransactionBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXQueryTransactionBlocksRequest
func (_e *ISuiAPI_Expecter) SuiXQueryTransactionBlocks(ctx interface{}, req interface{}) *ISuiAPI_SuiXQueryTransactionBlocks_Call {
	return &ISuiAPI_SuiXQueryTransactionBlocks_Call{Call: _e.mock.On("SuiXQueryTransactionBlocks", ctx, req)}
}

func (_c *ISuiAPI_SuiXQueryTransactionBlocks_Call) Run(run func(ctx context.Context, req models.SuiXQueryTransactionBlocksRequest)) *ISuiAPI_SuiXQueryTransactionBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXQueryTransactionBlocksRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXQueryTransactionBlocks_Call) Return(_a0 models.SuiXQueryTransactionBlocksResponse, _a1 error) *ISuiAPI_SuiXQueryTransactionBlocks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXQueryTransactionBlocks_Call) RunAndReturn(run func(context.Context, models.SuiXQueryTransactionBlocksRequest) (models.SuiXQueryTransactionBlocksResponse, error)) *ISuiAPI_SuiXQueryTransactionBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXResolveNameServiceAddress provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXResolveNameServiceAddress(ctx context.Context, req models.SuiXResolveNameServiceAddressRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXResolveNameServiceAddress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXResolveNameServiceAddressRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXResolveNameServiceAddressRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXResolveNameServiceAddressRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXResolveNameServiceAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXResolveNameServiceAddress'
type ISuiAPI_SuiXResolveNameServiceAddress_Call struct {
	*mock.Call
}

// SuiXResolveNameServiceAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXResolveNameServiceAddressRequest
func (_e *ISuiAPI_Expecter) SuiXResolveNameServiceAddress(ctx interface{}, req interface{}) *ISuiAPI_SuiXResolveNameServiceAddress_Call {
	return &ISuiAPI_SuiXResolveNameServiceAddress_Call{Call: _e.mock.On("SuiXResolveNameServiceAddress", ctx, req)}
}

func (_c *ISuiAPI_SuiXResolveNameServiceAddress_Call) Run(run func(ctx context.Context, req models.SuiXResolveNameServiceAddressRequest)) *ISuiAPI_SuiXResolveNameServiceAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXResolveNameServiceAddressRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXResolveNameServiceAddress_Call) Return(_a0 string, _a1 error) *ISuiAPI_SuiXResolveNameServiceAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXResolveNameServiceAddress_Call) RunAndReturn(run func(context.Context, models.SuiXResolveNameServiceAddressRequest) (string, error)) *ISuiAPI_SuiXResolveNameServiceAddress_Call {
	_c.Call.Return(run)
	return _c
}

// SuiXResolveNameServiceNames provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) SuiXResolveNameServiceNames(ctx context.Context, req models.SuiXResolveNameServiceNamesRequest) (models.SuiXResolveNameServiceNamesResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXResolveNameServiceNames")
	}

	var r0 models.SuiXResolveNameServiceNamesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXResolveNameServiceNamesRequest) (models.SuiXResolveNameServiceNamesResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXResolveNameServiceNamesRequest) models.SuiXResolveNameServiceNamesResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiXResolveNameServiceNamesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXResolveNameServiceNamesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_SuiXResolveNameServiceNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuiXResolveNameServiceNames'
type ISuiAPI_SuiXResolveNameServiceNames_Call struct {
	*mock.Call
}

// SuiXResolveNameServiceNames is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.SuiXResolveNameServiceNamesRequest
func (_e *ISuiAPI_Expecter) SuiXResolveNameServiceNames(ctx interface{}, req interface{}) *ISuiAPI_SuiXResolveNameServiceNames_Call {
	return &ISuiAPI_SuiXResolveNameServiceNames_Call{Call: _e.mock.On("SuiXResolveNameServiceNames", ctx, req)}
}

func (_c *ISuiAPI_SuiXResolveNameServiceNames_Call) Run(run func(ctx context.Context, req models.SuiXResolveNameServiceNamesRequest)) *ISuiAPI_SuiXResolveNameServiceNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.SuiXResolveNameServiceNamesRequest))
	})
	return _c
}

func (_c *ISuiAPI_SuiXResolveNameServiceNames_Call) Return(_a0 models.SuiXResolveNameServiceNamesResponse, _a1 error) *ISuiAPI_SuiXResolveNameServiceNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_SuiXResolveNameServiceNames_Call) RunAndReturn(run func(context.Context, models.SuiXResolveNameServiceNamesRequest) (models.SuiXResolveNameServiceNamesResponse, error)) *ISuiAPI_SuiXResolveNameServiceNames_Call {
	_c.Call.Return(run)
	return _c
}

// TransferObject provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) TransferObject(ctx context.Context, req models.TransferObjectRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TransferObject")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TransferObjectRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TransferObjectRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TransferObjectRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_TransferObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferObject'
type ISuiAPI_TransferObject_Call struct {
	*mock.Call
}

// TransferObject is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.TransferObjectRequest
func (_e *ISuiAPI_Expecter) TransferObject(ctx interface{}, req interface{}) *ISuiAPI_TransferObject_Call {
	return &ISuiAPI_TransferObject_Call{Call: _e.mock.On("TransferObject", ctx, req)}
}

func (_c *ISuiAPI_TransferObject_Call) Run(run func(ctx context.Context, req models.TransferObjectRequest)) *ISuiAPI_TransferObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.TransferObjectRequest))
	})
	return _c
}

func (_c *ISuiAPI_TransferObject_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_TransferObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_TransferObject_Call) RunAndReturn(run func(context.Context, models.TransferObjectRequest) (models.TxnMetaData, error)) *ISuiAPI_TransferObject_Call {
	_c.Call.Return(run)
	return _c
}

// TransferSui provides a mock function with given fields: ctx, req
func (_m *ISuiAPI) TransferSui(ctx context.Context, req models.TransferSuiRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TransferSui")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TransferSuiRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TransferSuiRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TransferSuiRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISuiAPI_TransferSui_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferSui'
type ISuiAPI_TransferSui_Call struct {
	*mock.Call
}

// TransferSui is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.TransferSuiRequest
func (_e *ISuiAPI_Expecter) TransferSui(ctx interface{}, req interface{}) *ISuiAPI_TransferSui_Call {
	return &ISuiAPI_TransferSui_Call{Call: _e.mock.On("TransferSui", ctx, req)}
}

func (_c *ISuiAPI_TransferSui_Call) Run(run func(ctx context.Context, req models.TransferSuiRequest)) *ISuiAPI_TransferSui_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.TransferSuiRequest))
	})
	return _c
}

func (_c *ISuiAPI_TransferSui_Call) Return(_a0 models.TxnMetaData, _a1 error) *ISuiAPI_TransferSui_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISuiAPI_TransferSui_Call) RunAndReturn(run func(context.Context, models.TransferSuiRequest) (models.TxnMetaData, error)) *ISuiAPI_TransferSui_Call {
	_c.Call.Return(run)
	return _c
}

// NewISuiAPI creates a new instance of ISuiAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISuiAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISuiAPI {
	mock := &ISuiAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
