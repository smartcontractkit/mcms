// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock_module_feequoter

import (
	big "math/big"

	bind "github.com/smartcontractkit/chainlink-sui/bindings/bind"
	mock "github.com/stretchr/testify/mock"

	module_fee_quoter "github.com/smartcontractkit/chainlink-sui/bindings/generated/ccip/ccip/fee_quoter"
)

// FeeQuoterEncoder is an autogenerated mock type for the FeeQuoterEncoder type
type FeeQuoterEncoder struct {
	mock.Mock
}

type FeeQuoterEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *FeeQuoterEncoder) EXPECT() *FeeQuoterEncoder_Expecter {
	return &FeeQuoterEncoder_Expecter{mock: &_m.Mock}
}

// ApplyDestChainConfigUpdates provides a mock function with given fields: ref, ownerCap, destChainSelector, isEnabled, maxNumberOfTokensPerMsg, maxDataBytes, maxPerMsgGasLimit, destGasOverhead, destGasPerPayloadByteBase, destGasPerPayloadByteHigh, destGasPerPayloadByteThreshold, destDataAvailabilityOverheadGas, destGasPerDataAvailabilityByte, destDataAvailabilityMultiplierBps, chainFamilySelector, enforceOutOfOrder, defaultTokenFeeUsdCents, defaultTokenDestGasOverhead, defaultTxGasLimit, gasMultiplierWeiPerEth, gasPriceStalenessThreshold, networkFeeUsdCents
func (_m *FeeQuoterEncoder) ApplyDestChainConfigUpdates(ref bind.Object, ownerCap bind.Object, destChainSelector uint64, isEnabled bool, maxNumberOfTokensPerMsg uint16, maxDataBytes uint32, maxPerMsgGasLimit uint32, destGasOverhead uint32, destGasPerPayloadByteBase byte, destGasPerPayloadByteHigh byte, destGasPerPayloadByteThreshold uint16, destDataAvailabilityOverheadGas uint32, destGasPerDataAvailabilityByte uint16, destDataAvailabilityMultiplierBps uint16, chainFamilySelector []byte, enforceOutOfOrder bool, defaultTokenFeeUsdCents uint16, defaultTokenDestGasOverhead uint32, defaultTxGasLimit uint32, gasMultiplierWeiPerEth uint64, gasPriceStalenessThreshold uint32, networkFeeUsdCents uint32) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, ownerCap, destChainSelector, isEnabled, maxNumberOfTokensPerMsg, maxDataBytes, maxPerMsgGasLimit, destGasOverhead, destGasPerPayloadByteBase, destGasPerPayloadByteHigh, destGasPerPayloadByteThreshold, destDataAvailabilityOverheadGas, destGasPerDataAvailabilityByte, destDataAvailabilityMultiplierBps, chainFamilySelector, enforceOutOfOrder, defaultTokenFeeUsdCents, defaultTokenDestGasOverhead, defaultTxGasLimit, gasMultiplierWeiPerEth, gasPriceStalenessThreshold, networkFeeUsdCents)

	if len(ret) == 0 {
		panic("no return value specified for ApplyDestChainConfigUpdates")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, uint64, bool, uint16, uint32, uint32, uint32, byte, byte, uint16, uint32, uint16, uint16, []byte, bool, uint16, uint32, uint32, uint64, uint32, uint32) (*bind.EncodedCall, error)); ok {
		return rf(ref, ownerCap, destChainSelector, isEnabled, maxNumberOfTokensPerMsg, maxDataBytes, maxPerMsgGasLimit, destGasOverhead, destGasPerPayloadByteBase, destGasPerPayloadByteHigh, destGasPerPayloadByteThreshold, destDataAvailabilityOverheadGas, destGasPerDataAvailabilityByte, destDataAvailabilityMultiplierBps, chainFamilySelector, enforceOutOfOrder, defaultTokenFeeUsdCents, defaultTokenDestGasOverhead, defaultTxGasLimit, gasMultiplierWeiPerEth, gasPriceStalenessThreshold, networkFeeUsdCents)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, uint64, bool, uint16, uint32, uint32, uint32, byte, byte, uint16, uint32, uint16, uint16, []byte, bool, uint16, uint32, uint32, uint64, uint32, uint32) *bind.EncodedCall); ok {
		r0 = rf(ref, ownerCap, destChainSelector, isEnabled, maxNumberOfTokensPerMsg, maxDataBytes, maxPerMsgGasLimit, destGasOverhead, destGasPerPayloadByteBase, destGasPerPayloadByteHigh, destGasPerPayloadByteThreshold, destDataAvailabilityOverheadGas, destGasPerDataAvailabilityByte, destDataAvailabilityMultiplierBps, chainFamilySelector, enforceOutOfOrder, defaultTokenFeeUsdCents, defaultTokenDestGasOverhead, defaultTxGasLimit, gasMultiplierWeiPerEth, gasPriceStalenessThreshold, networkFeeUsdCents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, uint64, bool, uint16, uint32, uint32, uint32, byte, byte, uint16, uint32, uint16, uint16, []byte, bool, uint16, uint32, uint32, uint64, uint32, uint32) error); ok {
		r1 = rf(ref, ownerCap, destChainSelector, isEnabled, maxNumberOfTokensPerMsg, maxDataBytes, maxPerMsgGasLimit, destGasOverhead, destGasPerPayloadByteBase, destGasPerPayloadByteHigh, destGasPerPayloadByteThreshold, destDataAvailabilityOverheadGas, destGasPerDataAvailabilityByte, destDataAvailabilityMultiplierBps, chainFamilySelector, enforceOutOfOrder, defaultTokenFeeUsdCents, defaultTokenDestGasOverhead, defaultTxGasLimit, gasMultiplierWeiPerEth, gasPriceStalenessThreshold, networkFeeUsdCents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyDestChainConfigUpdates'
type FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call struct {
	*mock.Call
}

// ApplyDestChainConfigUpdates is a helper method to define mock.On call
//   - ref bind.Object
//   - ownerCap bind.Object
//   - destChainSelector uint64
//   - isEnabled bool
//   - maxNumberOfTokensPerMsg uint16
//   - maxDataBytes uint32
//   - maxPerMsgGasLimit uint32
//   - destGasOverhead uint32
//   - destGasPerPayloadByteBase byte
//   - destGasPerPayloadByteHigh byte
//   - destGasPerPayloadByteThreshold uint16
//   - destDataAvailabilityOverheadGas uint32
//   - destGasPerDataAvailabilityByte uint16
//   - destDataAvailabilityMultiplierBps uint16
//   - chainFamilySelector []byte
//   - enforceOutOfOrder bool
//   - defaultTokenFeeUsdCents uint16
//   - defaultTokenDestGasOverhead uint32
//   - defaultTxGasLimit uint32
//   - gasMultiplierWeiPerEth uint64
//   - gasPriceStalenessThreshold uint32
//   - networkFeeUsdCents uint32
func (_e *FeeQuoterEncoder_Expecter) ApplyDestChainConfigUpdates(ref interface{}, ownerCap interface{}, destChainSelector interface{}, isEnabled interface{}, maxNumberOfTokensPerMsg interface{}, maxDataBytes interface{}, maxPerMsgGasLimit interface{}, destGasOverhead interface{}, destGasPerPayloadByteBase interface{}, destGasPerPayloadByteHigh interface{}, destGasPerPayloadByteThreshold interface{}, destDataAvailabilityOverheadGas interface{}, destGasPerDataAvailabilityByte interface{}, destDataAvailabilityMultiplierBps interface{}, chainFamilySelector interface{}, enforceOutOfOrder interface{}, defaultTokenFeeUsdCents interface{}, defaultTokenDestGasOverhead interface{}, defaultTxGasLimit interface{}, gasMultiplierWeiPerEth interface{}, gasPriceStalenessThreshold interface{}, networkFeeUsdCents interface{}) *FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call {
	return &FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call{Call: _e.mock.On("ApplyDestChainConfigUpdates", ref, ownerCap, destChainSelector, isEnabled, maxNumberOfTokensPerMsg, maxDataBytes, maxPerMsgGasLimit, destGasOverhead, destGasPerPayloadByteBase, destGasPerPayloadByteHigh, destGasPerPayloadByteThreshold, destDataAvailabilityOverheadGas, destGasPerDataAvailabilityByte, destDataAvailabilityMultiplierBps, chainFamilySelector, enforceOutOfOrder, defaultTokenFeeUsdCents, defaultTokenDestGasOverhead, defaultTxGasLimit, gasMultiplierWeiPerEth, gasPriceStalenessThreshold, networkFeeUsdCents)}
}

func (_c *FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call) Run(run func(ref bind.Object, ownerCap bind.Object, destChainSelector uint64, isEnabled bool, maxNumberOfTokensPerMsg uint16, maxDataBytes uint32, maxPerMsgGasLimit uint32, destGasOverhead uint32, destGasPerPayloadByteBase byte, destGasPerPayloadByteHigh byte, destGasPerPayloadByteThreshold uint16, destDataAvailabilityOverheadGas uint32, destGasPerDataAvailabilityByte uint16, destDataAvailabilityMultiplierBps uint16, chainFamilySelector []byte, enforceOutOfOrder bool, defaultTokenFeeUsdCents uint16, defaultTokenDestGasOverhead uint32, defaultTxGasLimit uint32, gasMultiplierWeiPerEth uint64, gasPriceStalenessThreshold uint32, networkFeeUsdCents uint32)) *FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(uint64), args[3].(bool), args[4].(uint16), args[5].(uint32), args[6].(uint32), args[7].(uint32), args[8].(byte), args[9].(byte), args[10].(uint16), args[11].(uint32), args[12].(uint16), args[13].(uint16), args[14].([]byte), args[15].(bool), args[16].(uint16), args[17].(uint32), args[18].(uint32), args[19].(uint64), args[20].(uint32), args[21].(uint32))
	})
	return _c
}

func (_c *FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call) RunAndReturn(run func(bind.Object, bind.Object, uint64, bool, uint16, uint32, uint32, uint32, byte, byte, uint16, uint32, uint16, uint16, []byte, bool, uint16, uint32, uint32, uint64, uint32, uint32) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ApplyDestChainConfigUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyDestChainConfigUpdatesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) ApplyDestChainConfigUpdatesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyDestChainConfigUpdatesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyDestChainConfigUpdatesWithArgs'
type FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call struct {
	*mock.Call
}

// ApplyDestChainConfigUpdatesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) ApplyDestChainConfigUpdatesWithArgs(args ...interface{}) *FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call {
	return &FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call{Call: _e.mock.On("ApplyDestChainConfigUpdatesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ApplyDestChainConfigUpdatesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyFeeTokenUpdates provides a mock function with given fields: ref, ownerCap, feeTokensToRemove, feeTokensToAdd
func (_m *FeeQuoterEncoder) ApplyFeeTokenUpdates(ref bind.Object, ownerCap bind.Object, feeTokensToRemove []string, feeTokensToAdd []string) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, ownerCap, feeTokensToRemove, feeTokensToAdd)

	if len(ret) == 0 {
		panic("no return value specified for ApplyFeeTokenUpdates")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, []string, []string) (*bind.EncodedCall, error)); ok {
		return rf(ref, ownerCap, feeTokensToRemove, feeTokensToAdd)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, []string, []string) *bind.EncodedCall); ok {
		r0 = rf(ref, ownerCap, feeTokensToRemove, feeTokensToAdd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, []string, []string) error); ok {
		r1 = rf(ref, ownerCap, feeTokensToRemove, feeTokensToAdd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ApplyFeeTokenUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyFeeTokenUpdates'
type FeeQuoterEncoder_ApplyFeeTokenUpdates_Call struct {
	*mock.Call
}

// ApplyFeeTokenUpdates is a helper method to define mock.On call
//   - ref bind.Object
//   - ownerCap bind.Object
//   - feeTokensToRemove []string
//   - feeTokensToAdd []string
func (_e *FeeQuoterEncoder_Expecter) ApplyFeeTokenUpdates(ref interface{}, ownerCap interface{}, feeTokensToRemove interface{}, feeTokensToAdd interface{}) *FeeQuoterEncoder_ApplyFeeTokenUpdates_Call {
	return &FeeQuoterEncoder_ApplyFeeTokenUpdates_Call{Call: _e.mock.On("ApplyFeeTokenUpdates", ref, ownerCap, feeTokensToRemove, feeTokensToAdd)}
}

func (_c *FeeQuoterEncoder_ApplyFeeTokenUpdates_Call) Run(run func(ref bind.Object, ownerCap bind.Object, feeTokensToRemove []string, feeTokensToAdd []string)) *FeeQuoterEncoder_ApplyFeeTokenUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].([]string), args[3].([]string))
	})
	return _c
}

func (_c *FeeQuoterEncoder_ApplyFeeTokenUpdates_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ApplyFeeTokenUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ApplyFeeTokenUpdates_Call) RunAndReturn(run func(bind.Object, bind.Object, []string, []string) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ApplyFeeTokenUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyFeeTokenUpdatesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) ApplyFeeTokenUpdatesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyFeeTokenUpdatesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyFeeTokenUpdatesWithArgs'
type FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call struct {
	*mock.Call
}

// ApplyFeeTokenUpdatesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) ApplyFeeTokenUpdatesWithArgs(args ...interface{}) *FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call {
	return &FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call{Call: _e.mock.On("ApplyFeeTokenUpdatesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ApplyFeeTokenUpdatesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyPremiumMultiplierWeiPerEthUpdates provides a mock function with given fields: ref, ownerCap, tokens, premiumMultiplierWeiPerEth
func (_m *FeeQuoterEncoder) ApplyPremiumMultiplierWeiPerEthUpdates(ref bind.Object, ownerCap bind.Object, tokens []string, premiumMultiplierWeiPerEth []uint64) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, ownerCap, tokens, premiumMultiplierWeiPerEth)

	if len(ret) == 0 {
		panic("no return value specified for ApplyPremiumMultiplierWeiPerEthUpdates")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, []string, []uint64) (*bind.EncodedCall, error)); ok {
		return rf(ref, ownerCap, tokens, premiumMultiplierWeiPerEth)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, []string, []uint64) *bind.EncodedCall); ok {
		r0 = rf(ref, ownerCap, tokens, premiumMultiplierWeiPerEth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, []string, []uint64) error); ok {
		r1 = rf(ref, ownerCap, tokens, premiumMultiplierWeiPerEth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyPremiumMultiplierWeiPerEthUpdates'
type FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call struct {
	*mock.Call
}

// ApplyPremiumMultiplierWeiPerEthUpdates is a helper method to define mock.On call
//   - ref bind.Object
//   - ownerCap bind.Object
//   - tokens []string
//   - premiumMultiplierWeiPerEth []uint64
func (_e *FeeQuoterEncoder_Expecter) ApplyPremiumMultiplierWeiPerEthUpdates(ref interface{}, ownerCap interface{}, tokens interface{}, premiumMultiplierWeiPerEth interface{}) *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call {
	return &FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call{Call: _e.mock.On("ApplyPremiumMultiplierWeiPerEthUpdates", ref, ownerCap, tokens, premiumMultiplierWeiPerEth)}
}

func (_c *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call) Run(run func(ref bind.Object, ownerCap bind.Object, tokens []string, premiumMultiplierWeiPerEth []uint64)) *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].([]string), args[3].([]uint64))
	})
	return _c
}

func (_c *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call) RunAndReturn(run func(bind.Object, bind.Object, []string, []uint64) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs'
type FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call struct {
	*mock.Call
}

// ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs(args ...interface{}) *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call {
	return &FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call{Call: _e.mock.On("ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyTokenTransferFeeConfigUpdates provides a mock function with given fields: ref, ownerCap, destChainSelector, addTokens, addMinFeeUsdCents, addMaxFeeUsdCents, addDeciBps, addDestGasOverhead, addDestBytesOverhead, addIsEnabled, removeTokens
func (_m *FeeQuoterEncoder) ApplyTokenTransferFeeConfigUpdates(ref bind.Object, ownerCap bind.Object, destChainSelector uint64, addTokens []string, addMinFeeUsdCents []uint32, addMaxFeeUsdCents []uint32, addDeciBps []uint16, addDestGasOverhead []uint32, addDestBytesOverhead []uint32, addIsEnabled []bool, removeTokens []string) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, ownerCap, destChainSelector, addTokens, addMinFeeUsdCents, addMaxFeeUsdCents, addDeciBps, addDestGasOverhead, addDestBytesOverhead, addIsEnabled, removeTokens)

	if len(ret) == 0 {
		panic("no return value specified for ApplyTokenTransferFeeConfigUpdates")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, uint64, []string, []uint32, []uint32, []uint16, []uint32, []uint32, []bool, []string) (*bind.EncodedCall, error)); ok {
		return rf(ref, ownerCap, destChainSelector, addTokens, addMinFeeUsdCents, addMaxFeeUsdCents, addDeciBps, addDestGasOverhead, addDestBytesOverhead, addIsEnabled, removeTokens)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, uint64, []string, []uint32, []uint32, []uint16, []uint32, []uint32, []bool, []string) *bind.EncodedCall); ok {
		r0 = rf(ref, ownerCap, destChainSelector, addTokens, addMinFeeUsdCents, addMaxFeeUsdCents, addDeciBps, addDestGasOverhead, addDestBytesOverhead, addIsEnabled, removeTokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, uint64, []string, []uint32, []uint32, []uint16, []uint32, []uint32, []bool, []string) error); ok {
		r1 = rf(ref, ownerCap, destChainSelector, addTokens, addMinFeeUsdCents, addMaxFeeUsdCents, addDeciBps, addDestGasOverhead, addDestBytesOverhead, addIsEnabled, removeTokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyTokenTransferFeeConfigUpdates'
type FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call struct {
	*mock.Call
}

// ApplyTokenTransferFeeConfigUpdates is a helper method to define mock.On call
//   - ref bind.Object
//   - ownerCap bind.Object
//   - destChainSelector uint64
//   - addTokens []string
//   - addMinFeeUsdCents []uint32
//   - addMaxFeeUsdCents []uint32
//   - addDeciBps []uint16
//   - addDestGasOverhead []uint32
//   - addDestBytesOverhead []uint32
//   - addIsEnabled []bool
//   - removeTokens []string
func (_e *FeeQuoterEncoder_Expecter) ApplyTokenTransferFeeConfigUpdates(ref interface{}, ownerCap interface{}, destChainSelector interface{}, addTokens interface{}, addMinFeeUsdCents interface{}, addMaxFeeUsdCents interface{}, addDeciBps interface{}, addDestGasOverhead interface{}, addDestBytesOverhead interface{}, addIsEnabled interface{}, removeTokens interface{}) *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call {
	return &FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call{Call: _e.mock.On("ApplyTokenTransferFeeConfigUpdates", ref, ownerCap, destChainSelector, addTokens, addMinFeeUsdCents, addMaxFeeUsdCents, addDeciBps, addDestGasOverhead, addDestBytesOverhead, addIsEnabled, removeTokens)}
}

func (_c *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call) Run(run func(ref bind.Object, ownerCap bind.Object, destChainSelector uint64, addTokens []string, addMinFeeUsdCents []uint32, addMaxFeeUsdCents []uint32, addDeciBps []uint16, addDestGasOverhead []uint32, addDestBytesOverhead []uint32, addIsEnabled []bool, removeTokens []string)) *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(uint64), args[3].([]string), args[4].([]uint32), args[5].([]uint32), args[6].([]uint16), args[7].([]uint32), args[8].([]uint32), args[9].([]bool), args[10].([]string))
	})
	return _c
}

func (_c *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call) RunAndReturn(run func(bind.Object, bind.Object, uint64, []string, []uint32, []uint32, []uint16, []uint32, []uint32, []bool, []string) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// ApplyTokenTransferFeeConfigUpdatesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) ApplyTokenTransferFeeConfigUpdatesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyTokenTransferFeeConfigUpdatesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyTokenTransferFeeConfigUpdatesWithArgs'
type FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call struct {
	*mock.Call
}

// ApplyTokenTransferFeeConfigUpdatesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) ApplyTokenTransferFeeConfigUpdatesWithArgs(args ...interface{}) *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call {
	return &FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call{Call: _e.mock.On("ApplyTokenTransferFeeConfigUpdatesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ApplyTokenTransferFeeConfigUpdatesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertTokenAmount provides a mock function with given fields: ref, fromToken, fromTokenAmount, toToken
func (_m *FeeQuoterEncoder) ConvertTokenAmount(ref bind.Object, fromToken string, fromTokenAmount uint64, toToken string) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, fromToken, fromTokenAmount, toToken)

	if len(ret) == 0 {
		panic("no return value specified for ConvertTokenAmount")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, string, uint64, string) (*bind.EncodedCall, error)); ok {
		return rf(ref, fromToken, fromTokenAmount, toToken)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, string, uint64, string) *bind.EncodedCall); ok {
		r0 = rf(ref, fromToken, fromTokenAmount, toToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, string, uint64, string) error); ok {
		r1 = rf(ref, fromToken, fromTokenAmount, toToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ConvertTokenAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertTokenAmount'
type FeeQuoterEncoder_ConvertTokenAmount_Call struct {
	*mock.Call
}

// ConvertTokenAmount is a helper method to define mock.On call
//   - ref bind.Object
//   - fromToken string
//   - fromTokenAmount uint64
//   - toToken string
func (_e *FeeQuoterEncoder_Expecter) ConvertTokenAmount(ref interface{}, fromToken interface{}, fromTokenAmount interface{}, toToken interface{}) *FeeQuoterEncoder_ConvertTokenAmount_Call {
	return &FeeQuoterEncoder_ConvertTokenAmount_Call{Call: _e.mock.On("ConvertTokenAmount", ref, fromToken, fromTokenAmount, toToken)}
}

func (_c *FeeQuoterEncoder_ConvertTokenAmount_Call) Run(run func(ref bind.Object, fromToken string, fromTokenAmount uint64, toToken string)) *FeeQuoterEncoder_ConvertTokenAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(string), args[2].(uint64), args[3].(string))
	})
	return _c
}

func (_c *FeeQuoterEncoder_ConvertTokenAmount_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ConvertTokenAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ConvertTokenAmount_Call) RunAndReturn(run func(bind.Object, string, uint64, string) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ConvertTokenAmount_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertTokenAmountWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) ConvertTokenAmountWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConvertTokenAmountWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertTokenAmountWithArgs'
type FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call struct {
	*mock.Call
}

// ConvertTokenAmountWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) ConvertTokenAmountWithArgs(args ...interface{}) *FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call {
	return &FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call{Call: _e.mock.On("ConvertTokenAmountWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ConvertTokenAmountWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyFeeQuoterCap provides a mock function with given fields: ref, ownerCap, cap
func (_m *FeeQuoterEncoder) DestroyFeeQuoterCap(ref bind.Object, ownerCap bind.Object, cap bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, ownerCap, cap)

	if len(ret) == 0 {
		panic("no return value specified for DestroyFeeQuoterCap")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref, ownerCap, cap)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref, ownerCap, cap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, bind.Object) error); ok {
		r1 = rf(ref, ownerCap, cap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_DestroyFeeQuoterCap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyFeeQuoterCap'
type FeeQuoterEncoder_DestroyFeeQuoterCap_Call struct {
	*mock.Call
}

// DestroyFeeQuoterCap is a helper method to define mock.On call
//   - ref bind.Object
//   - ownerCap bind.Object
//   - cap bind.Object
func (_e *FeeQuoterEncoder_Expecter) DestroyFeeQuoterCap(ref interface{}, ownerCap interface{}, cap interface{}) *FeeQuoterEncoder_DestroyFeeQuoterCap_Call {
	return &FeeQuoterEncoder_DestroyFeeQuoterCap_Call{Call: _e.mock.On("DestroyFeeQuoterCap", ref, ownerCap, cap)}
}

func (_c *FeeQuoterEncoder_DestroyFeeQuoterCap_Call) Run(run func(ref bind.Object, ownerCap bind.Object, cap bind.Object)) *FeeQuoterEncoder_DestroyFeeQuoterCap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_DestroyFeeQuoterCap_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_DestroyFeeQuoterCap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_DestroyFeeQuoterCap_Call) RunAndReturn(run func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_DestroyFeeQuoterCap_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyFeeQuoterCapWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) DestroyFeeQuoterCapWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DestroyFeeQuoterCapWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyFeeQuoterCapWithArgs'
type FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call struct {
	*mock.Call
}

// DestroyFeeQuoterCapWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) DestroyFeeQuoterCapWithArgs(args ...interface{}) *FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call {
	return &FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call{Call: _e.mock.On("DestroyFeeQuoterCapWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_DestroyFeeQuoterCapWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestChainConfig provides a mock function with given fields: ref, destChainSelector
func (_m *FeeQuoterEncoder) GetDestChainConfig(ref bind.Object, destChainSelector uint64) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, destChainSelector)

	if len(ret) == 0 {
		panic("no return value specified for GetDestChainConfig")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, uint64) (*bind.EncodedCall, error)); ok {
		return rf(ref, destChainSelector)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, uint64) *bind.EncodedCall); ok {
		r0 = rf(ref, destChainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, uint64) error); ok {
		r1 = rf(ref, destChainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetDestChainConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestChainConfig'
type FeeQuoterEncoder_GetDestChainConfig_Call struct {
	*mock.Call
}

// GetDestChainConfig is a helper method to define mock.On call
//   - ref bind.Object
//   - destChainSelector uint64
func (_e *FeeQuoterEncoder_Expecter) GetDestChainConfig(ref interface{}, destChainSelector interface{}) *FeeQuoterEncoder_GetDestChainConfig_Call {
	return &FeeQuoterEncoder_GetDestChainConfig_Call{Call: _e.mock.On("GetDestChainConfig", ref, destChainSelector)}
}

func (_c *FeeQuoterEncoder_GetDestChainConfig_Call) Run(run func(ref bind.Object, destChainSelector uint64)) *FeeQuoterEncoder_GetDestChainConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(uint64))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainConfig_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetDestChainConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainConfig_Call) RunAndReturn(run func(bind.Object, uint64) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetDestChainConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestChainConfigFields provides a mock function with given fields: destChainConfig
func (_m *FeeQuoterEncoder) GetDestChainConfigFields(destChainConfig module_fee_quoter.DestChainConfig) (*bind.EncodedCall, error) {
	ret := _m.Called(destChainConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetDestChainConfigFields")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(module_fee_quoter.DestChainConfig) (*bind.EncodedCall, error)); ok {
		return rf(destChainConfig)
	}
	if rf, ok := ret.Get(0).(func(module_fee_quoter.DestChainConfig) *bind.EncodedCall); ok {
		r0 = rf(destChainConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(module_fee_quoter.DestChainConfig) error); ok {
		r1 = rf(destChainConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetDestChainConfigFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestChainConfigFields'
type FeeQuoterEncoder_GetDestChainConfigFields_Call struct {
	*mock.Call
}

// GetDestChainConfigFields is a helper method to define mock.On call
//   - destChainConfig module_fee_quoter.DestChainConfig
func (_e *FeeQuoterEncoder_Expecter) GetDestChainConfigFields(destChainConfig interface{}) *FeeQuoterEncoder_GetDestChainConfigFields_Call {
	return &FeeQuoterEncoder_GetDestChainConfigFields_Call{Call: _e.mock.On("GetDestChainConfigFields", destChainConfig)}
}

func (_c *FeeQuoterEncoder_GetDestChainConfigFields_Call) Run(run func(destChainConfig module_fee_quoter.DestChainConfig)) *FeeQuoterEncoder_GetDestChainConfigFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(module_fee_quoter.DestChainConfig))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainConfigFields_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetDestChainConfigFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainConfigFields_Call) RunAndReturn(run func(module_fee_quoter.DestChainConfig) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetDestChainConfigFields_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestChainConfigFieldsWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetDestChainConfigFieldsWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDestChainConfigFieldsWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestChainConfigFieldsWithArgs'
type FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call struct {
	*mock.Call
}

// GetDestChainConfigFieldsWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetDestChainConfigFieldsWithArgs(args ...interface{}) *FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call {
	return &FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call{Call: _e.mock.On("GetDestChainConfigFieldsWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetDestChainConfigFieldsWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestChainConfigWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetDestChainConfigWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDestChainConfigWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetDestChainConfigWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestChainConfigWithArgs'
type FeeQuoterEncoder_GetDestChainConfigWithArgs_Call struct {
	*mock.Call
}

// GetDestChainConfigWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetDestChainConfigWithArgs(args ...interface{}) *FeeQuoterEncoder_GetDestChainConfigWithArgs_Call {
	return &FeeQuoterEncoder_GetDestChainConfigWithArgs_Call{Call: _e.mock.On("GetDestChainConfigWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetDestChainConfigWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetDestChainConfigWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainConfigWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetDestChainConfigWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainConfigWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetDestChainConfigWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestChainGasPrice provides a mock function with given fields: ref, destChainSelector
func (_m *FeeQuoterEncoder) GetDestChainGasPrice(ref bind.Object, destChainSelector uint64) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, destChainSelector)

	if len(ret) == 0 {
		panic("no return value specified for GetDestChainGasPrice")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, uint64) (*bind.EncodedCall, error)); ok {
		return rf(ref, destChainSelector)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, uint64) *bind.EncodedCall); ok {
		r0 = rf(ref, destChainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, uint64) error); ok {
		r1 = rf(ref, destChainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetDestChainGasPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestChainGasPrice'
type FeeQuoterEncoder_GetDestChainGasPrice_Call struct {
	*mock.Call
}

// GetDestChainGasPrice is a helper method to define mock.On call
//   - ref bind.Object
//   - destChainSelector uint64
func (_e *FeeQuoterEncoder_Expecter) GetDestChainGasPrice(ref interface{}, destChainSelector interface{}) *FeeQuoterEncoder_GetDestChainGasPrice_Call {
	return &FeeQuoterEncoder_GetDestChainGasPrice_Call{Call: _e.mock.On("GetDestChainGasPrice", ref, destChainSelector)}
}

func (_c *FeeQuoterEncoder_GetDestChainGasPrice_Call) Run(run func(ref bind.Object, destChainSelector uint64)) *FeeQuoterEncoder_GetDestChainGasPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(uint64))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainGasPrice_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetDestChainGasPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainGasPrice_Call) RunAndReturn(run func(bind.Object, uint64) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetDestChainGasPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetDestChainGasPriceWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetDestChainGasPriceWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDestChainGasPriceWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDestChainGasPriceWithArgs'
type FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call struct {
	*mock.Call
}

// GetDestChainGasPriceWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetDestChainGasPriceWithArgs(args ...interface{}) *FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call {
	return &FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call{Call: _e.mock.On("GetDestChainGasPriceWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetDestChainGasPriceWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeeTokens provides a mock function with given fields: ref
func (_m *FeeQuoterEncoder) GetFeeTokens(ref bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for GetFeeTokens")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetFeeTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeTokens'
type FeeQuoterEncoder_GetFeeTokens_Call struct {
	*mock.Call
}

// GetFeeTokens is a helper method to define mock.On call
//   - ref bind.Object
func (_e *FeeQuoterEncoder_Expecter) GetFeeTokens(ref interface{}) *FeeQuoterEncoder_GetFeeTokens_Call {
	return &FeeQuoterEncoder_GetFeeTokens_Call{Call: _e.mock.On("GetFeeTokens", ref)}
}

func (_c *FeeQuoterEncoder_GetFeeTokens_Call) Run(run func(ref bind.Object)) *FeeQuoterEncoder_GetFeeTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetFeeTokens_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetFeeTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetFeeTokens_Call) RunAndReturn(run func(bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetFeeTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeeTokensWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetFeeTokensWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFeeTokensWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetFeeTokensWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeTokensWithArgs'
type FeeQuoterEncoder_GetFeeTokensWithArgs_Call struct {
	*mock.Call
}

// GetFeeTokensWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetFeeTokensWithArgs(args ...interface{}) *FeeQuoterEncoder_GetFeeTokensWithArgs_Call {
	return &FeeQuoterEncoder_GetFeeTokensWithArgs_Call{Call: _e.mock.On("GetFeeTokensWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetFeeTokensWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetFeeTokensWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetFeeTokensWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetFeeTokensWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetFeeTokensWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetFeeTokensWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetPremiumMultiplierWeiPerEth provides a mock function with given fields: ref, token
func (_m *FeeQuoterEncoder) GetPremiumMultiplierWeiPerEth(ref bind.Object, token string) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, token)

	if len(ret) == 0 {
		panic("no return value specified for GetPremiumMultiplierWeiPerEth")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, string) (*bind.EncodedCall, error)); ok {
		return rf(ref, token)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, string) *bind.EncodedCall); ok {
		r0 = rf(ref, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, string) error); ok {
		r1 = rf(ref, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPremiumMultiplierWeiPerEth'
type FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call struct {
	*mock.Call
}

// GetPremiumMultiplierWeiPerEth is a helper method to define mock.On call
//   - ref bind.Object
//   - token string
func (_e *FeeQuoterEncoder_Expecter) GetPremiumMultiplierWeiPerEth(ref interface{}, token interface{}) *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call {
	return &FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call{Call: _e.mock.On("GetPremiumMultiplierWeiPerEth", ref, token)}
}

func (_c *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call) Run(run func(ref bind.Object, token string)) *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(string))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call) RunAndReturn(run func(bind.Object, string) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEth_Call {
	_c.Call.Return(run)
	return _c
}

// GetPremiumMultiplierWeiPerEthWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetPremiumMultiplierWeiPerEthWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPremiumMultiplierWeiPerEthWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPremiumMultiplierWeiPerEthWithArgs'
type FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call struct {
	*mock.Call
}

// GetPremiumMultiplierWeiPerEthWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetPremiumMultiplierWeiPerEthWithArgs(args ...interface{}) *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call {
	return &FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call{Call: _e.mock.On("GetPremiumMultiplierWeiPerEthWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetPremiumMultiplierWeiPerEthWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetStaticConfig provides a mock function with given fields: ref
func (_m *FeeQuoterEncoder) GetStaticConfig(ref bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref)

	if len(ret) == 0 {
		panic("no return value specified for GetStaticConfig")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetStaticConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStaticConfig'
type FeeQuoterEncoder_GetStaticConfig_Call struct {
	*mock.Call
}

// GetStaticConfig is a helper method to define mock.On call
//   - ref bind.Object
func (_e *FeeQuoterEncoder_Expecter) GetStaticConfig(ref interface{}) *FeeQuoterEncoder_GetStaticConfig_Call {
	return &FeeQuoterEncoder_GetStaticConfig_Call{Call: _e.mock.On("GetStaticConfig", ref)}
}

func (_c *FeeQuoterEncoder_GetStaticConfig_Call) Run(run func(ref bind.Object)) *FeeQuoterEncoder_GetStaticConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetStaticConfig_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetStaticConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetStaticConfig_Call) RunAndReturn(run func(bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetStaticConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetStaticConfigWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetStaticConfigWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStaticConfigWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetStaticConfigWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStaticConfigWithArgs'
type FeeQuoterEncoder_GetStaticConfigWithArgs_Call struct {
	*mock.Call
}

// GetStaticConfigWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetStaticConfigWithArgs(args ...interface{}) *FeeQuoterEncoder_GetStaticConfigWithArgs_Call {
	return &FeeQuoterEncoder_GetStaticConfigWithArgs_Call{Call: _e.mock.On("GetStaticConfigWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetStaticConfigWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetStaticConfigWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetStaticConfigWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetStaticConfigWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetStaticConfigWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetStaticConfigWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTimestampedPriceFields provides a mock function with given fields: tp
func (_m *FeeQuoterEncoder) GetTimestampedPriceFields(tp module_fee_quoter.TimestampedPrice) (*bind.EncodedCall, error) {
	ret := _m.Called(tp)

	if len(ret) == 0 {
		panic("no return value specified for GetTimestampedPriceFields")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(module_fee_quoter.TimestampedPrice) (*bind.EncodedCall, error)); ok {
		return rf(tp)
	}
	if rf, ok := ret.Get(0).(func(module_fee_quoter.TimestampedPrice) *bind.EncodedCall); ok {
		r0 = rf(tp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(module_fee_quoter.TimestampedPrice) error); ok {
		r1 = rf(tp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTimestampedPriceFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimestampedPriceFields'
type FeeQuoterEncoder_GetTimestampedPriceFields_Call struct {
	*mock.Call
}

// GetTimestampedPriceFields is a helper method to define mock.On call
//   - tp module_fee_quoter.TimestampedPrice
func (_e *FeeQuoterEncoder_Expecter) GetTimestampedPriceFields(tp interface{}) *FeeQuoterEncoder_GetTimestampedPriceFields_Call {
	return &FeeQuoterEncoder_GetTimestampedPriceFields_Call{Call: _e.mock.On("GetTimestampedPriceFields", tp)}
}

func (_c *FeeQuoterEncoder_GetTimestampedPriceFields_Call) Run(run func(tp module_fee_quoter.TimestampedPrice)) *FeeQuoterEncoder_GetTimestampedPriceFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(module_fee_quoter.TimestampedPrice))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTimestampedPriceFields_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTimestampedPriceFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTimestampedPriceFields_Call) RunAndReturn(run func(module_fee_quoter.TimestampedPrice) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTimestampedPriceFields_Call {
	_c.Call.Return(run)
	return _c
}

// GetTimestampedPriceFieldsWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetTimestampedPriceFieldsWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTimestampedPriceFieldsWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimestampedPriceFieldsWithArgs'
type FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call struct {
	*mock.Call
}

// GetTimestampedPriceFieldsWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetTimestampedPriceFieldsWithArgs(args ...interface{}) *FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call {
	return &FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call{Call: _e.mock.On("GetTimestampedPriceFieldsWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTimestampedPriceFieldsWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenAndGasPrices provides a mock function with given fields: ref, clock, token, destChainSelector
func (_m *FeeQuoterEncoder) GetTokenAndGasPrices(ref bind.Object, clock bind.Object, token string, destChainSelector uint64) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, clock, token, destChainSelector)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenAndGasPrices")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, string, uint64) (*bind.EncodedCall, error)); ok {
		return rf(ref, clock, token, destChainSelector)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, string, uint64) *bind.EncodedCall); ok {
		r0 = rf(ref, clock, token, destChainSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, string, uint64) error); ok {
		r1 = rf(ref, clock, token, destChainSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenAndGasPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenAndGasPrices'
type FeeQuoterEncoder_GetTokenAndGasPrices_Call struct {
	*mock.Call
}

// GetTokenAndGasPrices is a helper method to define mock.On call
//   - ref bind.Object
//   - clock bind.Object
//   - token string
//   - destChainSelector uint64
func (_e *FeeQuoterEncoder_Expecter) GetTokenAndGasPrices(ref interface{}, clock interface{}, token interface{}, destChainSelector interface{}) *FeeQuoterEncoder_GetTokenAndGasPrices_Call {
	return &FeeQuoterEncoder_GetTokenAndGasPrices_Call{Call: _e.mock.On("GetTokenAndGasPrices", ref, clock, token, destChainSelector)}
}

func (_c *FeeQuoterEncoder_GetTokenAndGasPrices_Call) Run(run func(ref bind.Object, clock bind.Object, token string, destChainSelector uint64)) *FeeQuoterEncoder_GetTokenAndGasPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(string), args[3].(uint64))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenAndGasPrices_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenAndGasPrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenAndGasPrices_Call) RunAndReturn(run func(bind.Object, bind.Object, string, uint64) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenAndGasPrices_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenAndGasPricesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetTokenAndGasPricesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenAndGasPricesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenAndGasPricesWithArgs'
type FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call struct {
	*mock.Call
}

// GetTokenAndGasPricesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetTokenAndGasPricesWithArgs(args ...interface{}) *FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call {
	return &FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call{Call: _e.mock.On("GetTokenAndGasPricesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenAndGasPricesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenPrice provides a mock function with given fields: ref, token
func (_m *FeeQuoterEncoder) GetTokenPrice(ref bind.Object, token string) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, token)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenPrice")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, string) (*bind.EncodedCall, error)); ok {
		return rf(ref, token)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, string) *bind.EncodedCall); ok {
		r0 = rf(ref, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, string) error); ok {
		r1 = rf(ref, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenPrice'
type FeeQuoterEncoder_GetTokenPrice_Call struct {
	*mock.Call
}

// GetTokenPrice is a helper method to define mock.On call
//   - ref bind.Object
//   - token string
func (_e *FeeQuoterEncoder_Expecter) GetTokenPrice(ref interface{}, token interface{}) *FeeQuoterEncoder_GetTokenPrice_Call {
	return &FeeQuoterEncoder_GetTokenPrice_Call{Call: _e.mock.On("GetTokenPrice", ref, token)}
}

func (_c *FeeQuoterEncoder_GetTokenPrice_Call) Run(run func(ref bind.Object, token string)) *FeeQuoterEncoder_GetTokenPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(string))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenPrice_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenPrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenPrice_Call) RunAndReturn(run func(bind.Object, string) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenPriceWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetTokenPriceWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenPriceWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenPriceWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenPriceWithArgs'
type FeeQuoterEncoder_GetTokenPriceWithArgs_Call struct {
	*mock.Call
}

// GetTokenPriceWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetTokenPriceWithArgs(args ...interface{}) *FeeQuoterEncoder_GetTokenPriceWithArgs_Call {
	return &FeeQuoterEncoder_GetTokenPriceWithArgs_Call{Call: _e.mock.On("GetTokenPriceWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetTokenPriceWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetTokenPriceWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenPriceWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenPriceWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenPriceWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenPriceWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenPrices provides a mock function with given fields: ref, tokens
func (_m *FeeQuoterEncoder) GetTokenPrices(ref bind.Object, tokens []string) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, tokens)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenPrices")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, []string) (*bind.EncodedCall, error)); ok {
		return rf(ref, tokens)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, []string) *bind.EncodedCall); ok {
		r0 = rf(ref, tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, []string) error); ok {
		r1 = rf(ref, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenPrices'
type FeeQuoterEncoder_GetTokenPrices_Call struct {
	*mock.Call
}

// GetTokenPrices is a helper method to define mock.On call
//   - ref bind.Object
//   - tokens []string
func (_e *FeeQuoterEncoder_Expecter) GetTokenPrices(ref interface{}, tokens interface{}) *FeeQuoterEncoder_GetTokenPrices_Call {
	return &FeeQuoterEncoder_GetTokenPrices_Call{Call: _e.mock.On("GetTokenPrices", ref, tokens)}
}

func (_c *FeeQuoterEncoder_GetTokenPrices_Call) Run(run func(ref bind.Object, tokens []string)) *FeeQuoterEncoder_GetTokenPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].([]string))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenPrices_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenPrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenPrices_Call) RunAndReturn(run func(bind.Object, []string) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenPrices_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenPricesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetTokenPricesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenPricesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenPricesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenPricesWithArgs'
type FeeQuoterEncoder_GetTokenPricesWithArgs_Call struct {
	*mock.Call
}

// GetTokenPricesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetTokenPricesWithArgs(args ...interface{}) *FeeQuoterEncoder_GetTokenPricesWithArgs_Call {
	return &FeeQuoterEncoder_GetTokenPricesWithArgs_Call{Call: _e.mock.On("GetTokenPricesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetTokenPricesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetTokenPricesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenPricesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenPricesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenPricesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenPricesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenReceiver provides a mock function with given fields: ref, destChainSelector, extraArgs, messageReceiver
func (_m *FeeQuoterEncoder) GetTokenReceiver(ref bind.Object, destChainSelector uint64, extraArgs []byte, messageReceiver []byte) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, destChainSelector, extraArgs, messageReceiver)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenReceiver")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, uint64, []byte, []byte) (*bind.EncodedCall, error)); ok {
		return rf(ref, destChainSelector, extraArgs, messageReceiver)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, uint64, []byte, []byte) *bind.EncodedCall); ok {
		r0 = rf(ref, destChainSelector, extraArgs, messageReceiver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, uint64, []byte, []byte) error); ok {
		r1 = rf(ref, destChainSelector, extraArgs, messageReceiver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenReceiver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenReceiver'
type FeeQuoterEncoder_GetTokenReceiver_Call struct {
	*mock.Call
}

// GetTokenReceiver is a helper method to define mock.On call
//   - ref bind.Object
//   - destChainSelector uint64
//   - extraArgs []byte
//   - messageReceiver []byte
func (_e *FeeQuoterEncoder_Expecter) GetTokenReceiver(ref interface{}, destChainSelector interface{}, extraArgs interface{}, messageReceiver interface{}) *FeeQuoterEncoder_GetTokenReceiver_Call {
	return &FeeQuoterEncoder_GetTokenReceiver_Call{Call: _e.mock.On("GetTokenReceiver", ref, destChainSelector, extraArgs, messageReceiver)}
}

func (_c *FeeQuoterEncoder_GetTokenReceiver_Call) Run(run func(ref bind.Object, destChainSelector uint64, extraArgs []byte, messageReceiver []byte)) *FeeQuoterEncoder_GetTokenReceiver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(uint64), args[2].([]byte), args[3].([]byte))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenReceiver_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenReceiver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenReceiver_Call) RunAndReturn(run func(bind.Object, uint64, []byte, []byte) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenReceiver_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenReceiverWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetTokenReceiverWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenReceiverWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenReceiverWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenReceiverWithArgs'
type FeeQuoterEncoder_GetTokenReceiverWithArgs_Call struct {
	*mock.Call
}

// GetTokenReceiverWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetTokenReceiverWithArgs(args ...interface{}) *FeeQuoterEncoder_GetTokenReceiverWithArgs_Call {
	return &FeeQuoterEncoder_GetTokenReceiverWithArgs_Call{Call: _e.mock.On("GetTokenReceiverWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetTokenReceiverWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetTokenReceiverWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenReceiverWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenReceiverWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenReceiverWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenReceiverWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenTransferFeeConfig provides a mock function with given fields: ref, destChainSelector, token
func (_m *FeeQuoterEncoder) GetTokenTransferFeeConfig(ref bind.Object, destChainSelector uint64, token string) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, destChainSelector, token)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenTransferFeeConfig")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, uint64, string) (*bind.EncodedCall, error)); ok {
		return rf(ref, destChainSelector, token)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, uint64, string) *bind.EncodedCall); ok {
		r0 = rf(ref, destChainSelector, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, uint64, string) error); ok {
		r1 = rf(ref, destChainSelector, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenTransferFeeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenTransferFeeConfig'
type FeeQuoterEncoder_GetTokenTransferFeeConfig_Call struct {
	*mock.Call
}

// GetTokenTransferFeeConfig is a helper method to define mock.On call
//   - ref bind.Object
//   - destChainSelector uint64
//   - token string
func (_e *FeeQuoterEncoder_Expecter) GetTokenTransferFeeConfig(ref interface{}, destChainSelector interface{}, token interface{}) *FeeQuoterEncoder_GetTokenTransferFeeConfig_Call {
	return &FeeQuoterEncoder_GetTokenTransferFeeConfig_Call{Call: _e.mock.On("GetTokenTransferFeeConfig", ref, destChainSelector, token)}
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfig_Call) Run(run func(ref bind.Object, destChainSelector uint64, token string)) *FeeQuoterEncoder_GetTokenTransferFeeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(uint64), args[2].(string))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfig_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenTransferFeeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfig_Call) RunAndReturn(run func(bind.Object, uint64, string) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenTransferFeeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenTransferFeeConfigFields provides a mock function with given fields: cfg
func (_m *FeeQuoterEncoder) GetTokenTransferFeeConfigFields(cfg module_fee_quoter.TokenTransferFeeConfig) (*bind.EncodedCall, error) {
	ret := _m.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenTransferFeeConfigFields")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(module_fee_quoter.TokenTransferFeeConfig) (*bind.EncodedCall, error)); ok {
		return rf(cfg)
	}
	if rf, ok := ret.Get(0).(func(module_fee_quoter.TokenTransferFeeConfig) *bind.EncodedCall); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(module_fee_quoter.TokenTransferFeeConfig) error); ok {
		r1 = rf(cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenTransferFeeConfigFields'
type FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call struct {
	*mock.Call
}

// GetTokenTransferFeeConfigFields is a helper method to define mock.On call
//   - cfg module_fee_quoter.TokenTransferFeeConfig
func (_e *FeeQuoterEncoder_Expecter) GetTokenTransferFeeConfigFields(cfg interface{}) *FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call {
	return &FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call{Call: _e.mock.On("GetTokenTransferFeeConfigFields", cfg)}
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call) Run(run func(cfg module_fee_quoter.TokenTransferFeeConfig)) *FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(module_fee_quoter.TokenTransferFeeConfig))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call) RunAndReturn(run func(module_fee_quoter.TokenTransferFeeConfig) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenTransferFeeConfigFields_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenTransferFeeConfigFieldsWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetTokenTransferFeeConfigFieldsWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenTransferFeeConfigFieldsWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenTransferFeeConfigFieldsWithArgs'
type FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call struct {
	*mock.Call
}

// GetTokenTransferFeeConfigFieldsWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetTokenTransferFeeConfigFieldsWithArgs(args ...interface{}) *FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call {
	return &FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call{Call: _e.mock.On("GetTokenTransferFeeConfigFieldsWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenTransferFeeConfigFieldsWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenTransferFeeConfigWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetTokenTransferFeeConfigWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenTransferFeeConfigWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenTransferFeeConfigWithArgs'
type FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call struct {
	*mock.Call
}

// GetTokenTransferFeeConfigWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetTokenTransferFeeConfigWithArgs(args ...interface{}) *FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call {
	return &FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call{Call: _e.mock.On("GetTokenTransferFeeConfigWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetTokenTransferFeeConfigWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidatedFee provides a mock function with given fields: ref, clock, destChainSelector, receiver, data, localTokenAddresses, localTokenAmounts, feeToken, extraArgs
func (_m *FeeQuoterEncoder) GetValidatedFee(ref bind.Object, clock bind.Object, destChainSelector uint64, receiver []byte, data []byte, localTokenAddresses []string, localTokenAmounts []uint64, feeToken string, extraArgs []byte) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, clock, destChainSelector, receiver, data, localTokenAddresses, localTokenAmounts, feeToken, extraArgs)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatedFee")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, uint64, []byte, []byte, []string, []uint64, string, []byte) (*bind.EncodedCall, error)); ok {
		return rf(ref, clock, destChainSelector, receiver, data, localTokenAddresses, localTokenAmounts, feeToken, extraArgs)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, uint64, []byte, []byte, []string, []uint64, string, []byte) *bind.EncodedCall); ok {
		r0 = rf(ref, clock, destChainSelector, receiver, data, localTokenAddresses, localTokenAmounts, feeToken, extraArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, uint64, []byte, []byte, []string, []uint64, string, []byte) error); ok {
		r1 = rf(ref, clock, destChainSelector, receiver, data, localTokenAddresses, localTokenAmounts, feeToken, extraArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetValidatedFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatedFee'
type FeeQuoterEncoder_GetValidatedFee_Call struct {
	*mock.Call
}

// GetValidatedFee is a helper method to define mock.On call
//   - ref bind.Object
//   - clock bind.Object
//   - destChainSelector uint64
//   - receiver []byte
//   - data []byte
//   - localTokenAddresses []string
//   - localTokenAmounts []uint64
//   - feeToken string
//   - extraArgs []byte
func (_e *FeeQuoterEncoder_Expecter) GetValidatedFee(ref interface{}, clock interface{}, destChainSelector interface{}, receiver interface{}, data interface{}, localTokenAddresses interface{}, localTokenAmounts interface{}, feeToken interface{}, extraArgs interface{}) *FeeQuoterEncoder_GetValidatedFee_Call {
	return &FeeQuoterEncoder_GetValidatedFee_Call{Call: _e.mock.On("GetValidatedFee", ref, clock, destChainSelector, receiver, data, localTokenAddresses, localTokenAmounts, feeToken, extraArgs)}
}

func (_c *FeeQuoterEncoder_GetValidatedFee_Call) Run(run func(ref bind.Object, clock bind.Object, destChainSelector uint64, receiver []byte, data []byte, localTokenAddresses []string, localTokenAmounts []uint64, feeToken string, extraArgs []byte)) *FeeQuoterEncoder_GetValidatedFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(uint64), args[3].([]byte), args[4].([]byte), args[5].([]string), args[6].([]uint64), args[7].(string), args[8].([]byte))
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetValidatedFee_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetValidatedFee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetValidatedFee_Call) RunAndReturn(run func(bind.Object, bind.Object, uint64, []byte, []byte, []string, []uint64, string, []byte) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetValidatedFee_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidatedFeeWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) GetValidatedFeeWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatedFeeWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_GetValidatedFeeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatedFeeWithArgs'
type FeeQuoterEncoder_GetValidatedFeeWithArgs_Call struct {
	*mock.Call
}

// GetValidatedFeeWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) GetValidatedFeeWithArgs(args ...interface{}) *FeeQuoterEncoder_GetValidatedFeeWithArgs_Call {
	return &FeeQuoterEncoder_GetValidatedFeeWithArgs_Call{Call: _e.mock.On("GetValidatedFeeWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_GetValidatedFeeWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_GetValidatedFeeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_GetValidatedFeeWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_GetValidatedFeeWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_GetValidatedFeeWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_GetValidatedFeeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: ref, ownerCap, maxFeeJuelsPerMsg, linkToken, tokenPriceStalenessThreshold, feeTokens
func (_m *FeeQuoterEncoder) Initialize(ref bind.Object, ownerCap bind.Object, maxFeeJuelsPerMsg *big.Int, linkToken string, tokenPriceStalenessThreshold uint64, feeTokens []string) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, ownerCap, maxFeeJuelsPerMsg, linkToken, tokenPriceStalenessThreshold, feeTokens)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, *big.Int, string, uint64, []string) (*bind.EncodedCall, error)); ok {
		return rf(ref, ownerCap, maxFeeJuelsPerMsg, linkToken, tokenPriceStalenessThreshold, feeTokens)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, *big.Int, string, uint64, []string) *bind.EncodedCall); ok {
		r0 = rf(ref, ownerCap, maxFeeJuelsPerMsg, linkToken, tokenPriceStalenessThreshold, feeTokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, *big.Int, string, uint64, []string) error); ok {
		r1 = rf(ref, ownerCap, maxFeeJuelsPerMsg, linkToken, tokenPriceStalenessThreshold, feeTokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type FeeQuoterEncoder_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ref bind.Object
//   - ownerCap bind.Object
//   - maxFeeJuelsPerMsg *big.Int
//   - linkToken string
//   - tokenPriceStalenessThreshold uint64
//   - feeTokens []string
func (_e *FeeQuoterEncoder_Expecter) Initialize(ref interface{}, ownerCap interface{}, maxFeeJuelsPerMsg interface{}, linkToken interface{}, tokenPriceStalenessThreshold interface{}, feeTokens interface{}) *FeeQuoterEncoder_Initialize_Call {
	return &FeeQuoterEncoder_Initialize_Call{Call: _e.mock.On("Initialize", ref, ownerCap, maxFeeJuelsPerMsg, linkToken, tokenPriceStalenessThreshold, feeTokens)}
}

func (_c *FeeQuoterEncoder_Initialize_Call) Run(run func(ref bind.Object, ownerCap bind.Object, maxFeeJuelsPerMsg *big.Int, linkToken string, tokenPriceStalenessThreshold uint64, feeTokens []string)) *FeeQuoterEncoder_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(*big.Int), args[3].(string), args[4].(uint64), args[5].([]string))
	})
	return _c
}

func (_c *FeeQuoterEncoder_Initialize_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_Initialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_Initialize_Call) RunAndReturn(run func(bind.Object, bind.Object, *big.Int, string, uint64, []string) (*bind.EncodedCall, error)) *FeeQuoterEncoder_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) InitializeWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitializeWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_InitializeWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeWithArgs'
type FeeQuoterEncoder_InitializeWithArgs_Call struct {
	*mock.Call
}

// InitializeWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) InitializeWithArgs(args ...interface{}) *FeeQuoterEncoder_InitializeWithArgs_Call {
	return &FeeQuoterEncoder_InitializeWithArgs_Call{Call: _e.mock.On("InitializeWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_InitializeWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_InitializeWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_InitializeWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_InitializeWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_InitializeWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_InitializeWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// McmsApplyDestChainConfigUpdates provides a mock function with given fields: ref, registry, params
func (_m *FeeQuoterEncoder) McmsApplyDestChainConfigUpdates(ref bind.Object, registry bind.Object, params bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, registry, params)

	if len(ret) == 0 {
		panic("no return value specified for McmsApplyDestChainConfigUpdates")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref, registry, params)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref, registry, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, bind.Object) error); ok {
		r1 = rf(ref, registry, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsApplyDestChainConfigUpdates'
type FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call struct {
	*mock.Call
}

// McmsApplyDestChainConfigUpdates is a helper method to define mock.On call
//   - ref bind.Object
//   - registry bind.Object
//   - params bind.Object
func (_e *FeeQuoterEncoder_Expecter) McmsApplyDestChainConfigUpdates(ref interface{}, registry interface{}, params interface{}) *FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call {
	return &FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call{Call: _e.mock.On("McmsApplyDestChainConfigUpdates", ref, registry, params)}
}

func (_c *FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call) Run(run func(ref bind.Object, registry bind.Object, params bind.Object)) *FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call) RunAndReturn(run func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsApplyDestChainConfigUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// McmsApplyDestChainConfigUpdatesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) McmsApplyDestChainConfigUpdatesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for McmsApplyDestChainConfigUpdatesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsApplyDestChainConfigUpdatesWithArgs'
type FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call struct {
	*mock.Call
}

// McmsApplyDestChainConfigUpdatesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) McmsApplyDestChainConfigUpdatesWithArgs(args ...interface{}) *FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call {
	return &FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call{Call: _e.mock.On("McmsApplyDestChainConfigUpdatesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsApplyDestChainConfigUpdatesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// McmsApplyFeeTokenUpdates provides a mock function with given fields: ref, registry, params
func (_m *FeeQuoterEncoder) McmsApplyFeeTokenUpdates(ref bind.Object, registry bind.Object, params bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, registry, params)

	if len(ret) == 0 {
		panic("no return value specified for McmsApplyFeeTokenUpdates")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref, registry, params)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref, registry, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, bind.Object) error); ok {
		r1 = rf(ref, registry, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsApplyFeeTokenUpdates'
type FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call struct {
	*mock.Call
}

// McmsApplyFeeTokenUpdates is a helper method to define mock.On call
//   - ref bind.Object
//   - registry bind.Object
//   - params bind.Object
func (_e *FeeQuoterEncoder_Expecter) McmsApplyFeeTokenUpdates(ref interface{}, registry interface{}, params interface{}) *FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call {
	return &FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call{Call: _e.mock.On("McmsApplyFeeTokenUpdates", ref, registry, params)}
}

func (_c *FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call) Run(run func(ref bind.Object, registry bind.Object, params bind.Object)) *FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call) RunAndReturn(run func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsApplyFeeTokenUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// McmsApplyFeeTokenUpdatesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) McmsApplyFeeTokenUpdatesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for McmsApplyFeeTokenUpdatesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsApplyFeeTokenUpdatesWithArgs'
type FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call struct {
	*mock.Call
}

// McmsApplyFeeTokenUpdatesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) McmsApplyFeeTokenUpdatesWithArgs(args ...interface{}) *FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call {
	return &FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call{Call: _e.mock.On("McmsApplyFeeTokenUpdatesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsApplyFeeTokenUpdatesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// McmsApplyPremiumMultiplierWeiPerEthUpdates provides a mock function with given fields: ref, registry, params
func (_m *FeeQuoterEncoder) McmsApplyPremiumMultiplierWeiPerEthUpdates(ref bind.Object, registry bind.Object, params bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, registry, params)

	if len(ret) == 0 {
		panic("no return value specified for McmsApplyPremiumMultiplierWeiPerEthUpdates")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref, registry, params)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref, registry, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, bind.Object) error); ok {
		r1 = rf(ref, registry, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsApplyPremiumMultiplierWeiPerEthUpdates'
type FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call struct {
	*mock.Call
}

// McmsApplyPremiumMultiplierWeiPerEthUpdates is a helper method to define mock.On call
//   - ref bind.Object
//   - registry bind.Object
//   - params bind.Object
func (_e *FeeQuoterEncoder_Expecter) McmsApplyPremiumMultiplierWeiPerEthUpdates(ref interface{}, registry interface{}, params interface{}) *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call {
	return &FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call{Call: _e.mock.On("McmsApplyPremiumMultiplierWeiPerEthUpdates", ref, registry, params)}
}

func (_c *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call) Run(run func(ref bind.Object, registry bind.Object, params bind.Object)) *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call) RunAndReturn(run func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs'
type FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call struct {
	*mock.Call
}

// McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs(args ...interface{}) *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call {
	return &FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call{Call: _e.mock.On("McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsApplyPremiumMultiplierWeiPerEthUpdatesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// McmsApplyTokenTransferFeeConfigUpdates provides a mock function with given fields: ref, registry, params
func (_m *FeeQuoterEncoder) McmsApplyTokenTransferFeeConfigUpdates(ref bind.Object, registry bind.Object, params bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, registry, params)

	if len(ret) == 0 {
		panic("no return value specified for McmsApplyTokenTransferFeeConfigUpdates")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref, registry, params)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref, registry, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, bind.Object) error); ok {
		r1 = rf(ref, registry, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsApplyTokenTransferFeeConfigUpdates'
type FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call struct {
	*mock.Call
}

// McmsApplyTokenTransferFeeConfigUpdates is a helper method to define mock.On call
//   - ref bind.Object
//   - registry bind.Object
//   - params bind.Object
func (_e *FeeQuoterEncoder_Expecter) McmsApplyTokenTransferFeeConfigUpdates(ref interface{}, registry interface{}, params interface{}) *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call {
	return &FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call{Call: _e.mock.On("McmsApplyTokenTransferFeeConfigUpdates", ref, registry, params)}
}

func (_c *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call) Run(run func(ref bind.Object, registry bind.Object, params bind.Object)) *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call) RunAndReturn(run func(bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdates_Call {
	_c.Call.Return(run)
	return _c
}

// McmsApplyTokenTransferFeeConfigUpdatesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) McmsApplyTokenTransferFeeConfigUpdatesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for McmsApplyTokenTransferFeeConfigUpdatesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsApplyTokenTransferFeeConfigUpdatesWithArgs'
type FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call struct {
	*mock.Call
}

// McmsApplyTokenTransferFeeConfigUpdatesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) McmsApplyTokenTransferFeeConfigUpdatesWithArgs(args ...interface{}) *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call {
	return &FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call{Call: _e.mock.On("McmsApplyTokenTransferFeeConfigUpdatesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsApplyTokenTransferFeeConfigUpdatesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// McmsUpdatePricesWithOwnerCap provides a mock function with given fields: ref, registry, clock, params
func (_m *FeeQuoterEncoder) McmsUpdatePricesWithOwnerCap(ref bind.Object, registry bind.Object, clock bind.Object, params bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, registry, clock, params)

	if len(ret) == 0 {
		panic("no return value specified for McmsUpdatePricesWithOwnerCap")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref, registry, clock, params)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object, bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref, registry, clock, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, bind.Object, bind.Object) error); ok {
		r1 = rf(ref, registry, clock, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsUpdatePricesWithOwnerCap'
type FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call struct {
	*mock.Call
}

// McmsUpdatePricesWithOwnerCap is a helper method to define mock.On call
//   - ref bind.Object
//   - registry bind.Object
//   - clock bind.Object
//   - params bind.Object
func (_e *FeeQuoterEncoder_Expecter) McmsUpdatePricesWithOwnerCap(ref interface{}, registry interface{}, clock interface{}, params interface{}) *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call {
	return &FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call{Call: _e.mock.On("McmsUpdatePricesWithOwnerCap", ref, registry, clock, params)}
}

func (_c *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call) Run(run func(ref bind.Object, registry bind.Object, clock bind.Object, params bind.Object)) *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(bind.Object), args[3].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call) RunAndReturn(run func(bind.Object, bind.Object, bind.Object, bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCap_Call {
	_c.Call.Return(run)
	return _c
}

// McmsUpdatePricesWithOwnerCapWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) McmsUpdatePricesWithOwnerCapWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for McmsUpdatePricesWithOwnerCapWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'McmsUpdatePricesWithOwnerCapWithArgs'
type FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call struct {
	*mock.Call
}

// McmsUpdatePricesWithOwnerCapWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) McmsUpdatePricesWithOwnerCapWithArgs(args ...interface{}) *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call {
	return &FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call{Call: _e.mock.On("McmsUpdatePricesWithOwnerCapWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_McmsUpdatePricesWithOwnerCapWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeeQuoterCap provides a mock function with given fields: ref, ownerCap
func (_m *FeeQuoterEncoder) NewFeeQuoterCap(ref bind.Object, ownerCap bind.Object) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, ownerCap)

	if len(ret) == 0 {
		panic("no return value specified for NewFeeQuoterCap")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object) (*bind.EncodedCall, error)); ok {
		return rf(ref, ownerCap)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object) *bind.EncodedCall); ok {
		r0 = rf(ref, ownerCap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object) error); ok {
		r1 = rf(ref, ownerCap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_NewFeeQuoterCap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFeeQuoterCap'
type FeeQuoterEncoder_NewFeeQuoterCap_Call struct {
	*mock.Call
}

// NewFeeQuoterCap is a helper method to define mock.On call
//   - ref bind.Object
//   - ownerCap bind.Object
func (_e *FeeQuoterEncoder_Expecter) NewFeeQuoterCap(ref interface{}, ownerCap interface{}) *FeeQuoterEncoder_NewFeeQuoterCap_Call {
	return &FeeQuoterEncoder_NewFeeQuoterCap_Call{Call: _e.mock.On("NewFeeQuoterCap", ref, ownerCap)}
}

func (_c *FeeQuoterEncoder_NewFeeQuoterCap_Call) Run(run func(ref bind.Object, ownerCap bind.Object)) *FeeQuoterEncoder_NewFeeQuoterCap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object))
	})
	return _c
}

func (_c *FeeQuoterEncoder_NewFeeQuoterCap_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_NewFeeQuoterCap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_NewFeeQuoterCap_Call) RunAndReturn(run func(bind.Object, bind.Object) (*bind.EncodedCall, error)) *FeeQuoterEncoder_NewFeeQuoterCap_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeeQuoterCapWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) NewFeeQuoterCapWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NewFeeQuoterCapWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFeeQuoterCapWithArgs'
type FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call struct {
	*mock.Call
}

// NewFeeQuoterCapWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) NewFeeQuoterCapWithArgs(args ...interface{}) *FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call {
	return &FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call{Call: _e.mock.On("NewFeeQuoterCapWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_NewFeeQuoterCapWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMessageArgs provides a mock function with given fields: ref, destChainSelector, feeToken, feeTokenAmount, extraArgs, localTokenAddresses, destTokenAddresses, destPoolDatas
func (_m *FeeQuoterEncoder) ProcessMessageArgs(ref bind.Object, destChainSelector uint64, feeToken string, feeTokenAmount uint64, extraArgs []byte, localTokenAddresses []string, destTokenAddresses [][]byte, destPoolDatas [][]byte) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, destChainSelector, feeToken, feeTokenAmount, extraArgs, localTokenAddresses, destTokenAddresses, destPoolDatas)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMessageArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, uint64, string, uint64, []byte, []string, [][]byte, [][]byte) (*bind.EncodedCall, error)); ok {
		return rf(ref, destChainSelector, feeToken, feeTokenAmount, extraArgs, localTokenAddresses, destTokenAddresses, destPoolDatas)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, uint64, string, uint64, []byte, []string, [][]byte, [][]byte) *bind.EncodedCall); ok {
		r0 = rf(ref, destChainSelector, feeToken, feeTokenAmount, extraArgs, localTokenAddresses, destTokenAddresses, destPoolDatas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, uint64, string, uint64, []byte, []string, [][]byte, [][]byte) error); ok {
		r1 = rf(ref, destChainSelector, feeToken, feeTokenAmount, extraArgs, localTokenAddresses, destTokenAddresses, destPoolDatas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ProcessMessageArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMessageArgs'
type FeeQuoterEncoder_ProcessMessageArgs_Call struct {
	*mock.Call
}

// ProcessMessageArgs is a helper method to define mock.On call
//   - ref bind.Object
//   - destChainSelector uint64
//   - feeToken string
//   - feeTokenAmount uint64
//   - extraArgs []byte
//   - localTokenAddresses []string
//   - destTokenAddresses [][]byte
//   - destPoolDatas [][]byte
func (_e *FeeQuoterEncoder_Expecter) ProcessMessageArgs(ref interface{}, destChainSelector interface{}, feeToken interface{}, feeTokenAmount interface{}, extraArgs interface{}, localTokenAddresses interface{}, destTokenAddresses interface{}, destPoolDatas interface{}) *FeeQuoterEncoder_ProcessMessageArgs_Call {
	return &FeeQuoterEncoder_ProcessMessageArgs_Call{Call: _e.mock.On("ProcessMessageArgs", ref, destChainSelector, feeToken, feeTokenAmount, extraArgs, localTokenAddresses, destTokenAddresses, destPoolDatas)}
}

func (_c *FeeQuoterEncoder_ProcessMessageArgs_Call) Run(run func(ref bind.Object, destChainSelector uint64, feeToken string, feeTokenAmount uint64, extraArgs []byte, localTokenAddresses []string, destTokenAddresses [][]byte, destPoolDatas [][]byte)) *FeeQuoterEncoder_ProcessMessageArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(uint64), args[2].(string), args[3].(uint64), args[4].([]byte), args[5].([]string), args[6].([][]byte), args[7].([][]byte))
	})
	return _c
}

func (_c *FeeQuoterEncoder_ProcessMessageArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ProcessMessageArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ProcessMessageArgs_Call) RunAndReturn(run func(bind.Object, uint64, string, uint64, []byte, []string, [][]byte, [][]byte) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ProcessMessageArgs_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessMessageArgsWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) ProcessMessageArgsWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProcessMessageArgsWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessMessageArgsWithArgs'
type FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call struct {
	*mock.Call
}

// ProcessMessageArgsWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) ProcessMessageArgsWithArgs(args ...interface{}) *FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call {
	return &FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call{Call: _e.mock.On("ProcessMessageArgsWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_ProcessMessageArgsWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// TypeAndVersion provides a mock function with no fields
func (_m *FeeQuoterEncoder) TypeAndVersion() (*bind.EncodedCall, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TypeAndVersion")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func() (*bind.EncodedCall, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *bind.EncodedCall); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_TypeAndVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeAndVersion'
type FeeQuoterEncoder_TypeAndVersion_Call struct {
	*mock.Call
}

// TypeAndVersion is a helper method to define mock.On call
func (_e *FeeQuoterEncoder_Expecter) TypeAndVersion() *FeeQuoterEncoder_TypeAndVersion_Call {
	return &FeeQuoterEncoder_TypeAndVersion_Call{Call: _e.mock.On("TypeAndVersion")}
}

func (_c *FeeQuoterEncoder_TypeAndVersion_Call) Run(run func()) *FeeQuoterEncoder_TypeAndVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FeeQuoterEncoder_TypeAndVersion_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_TypeAndVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_TypeAndVersion_Call) RunAndReturn(run func() (*bind.EncodedCall, error)) *FeeQuoterEncoder_TypeAndVersion_Call {
	_c.Call.Return(run)
	return _c
}

// TypeAndVersionWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) TypeAndVersionWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TypeAndVersionWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_TypeAndVersionWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeAndVersionWithArgs'
type FeeQuoterEncoder_TypeAndVersionWithArgs_Call struct {
	*mock.Call
}

// TypeAndVersionWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) TypeAndVersionWithArgs(args ...interface{}) *FeeQuoterEncoder_TypeAndVersionWithArgs_Call {
	return &FeeQuoterEncoder_TypeAndVersionWithArgs_Call{Call: _e.mock.On("TypeAndVersionWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_TypeAndVersionWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_TypeAndVersionWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_TypeAndVersionWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_TypeAndVersionWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_TypeAndVersionWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_TypeAndVersionWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePrices provides a mock function with given fields: ref, param, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas
func (_m *FeeQuoterEncoder) UpdatePrices(ref bind.Object, param bind.Object, clock bind.Object, sourceTokens []string, sourceUsdPerToken []*big.Int, gasDestChainSelectors []uint64, gasUsdPerUnitGas []*big.Int) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, param, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrices")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object, []string, []*big.Int, []uint64, []*big.Int) (*bind.EncodedCall, error)); ok {
		return rf(ref, param, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object, []string, []*big.Int, []uint64, []*big.Int) *bind.EncodedCall); ok {
		r0 = rf(ref, param, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, bind.Object, []string, []*big.Int, []uint64, []*big.Int) error); ok {
		r1 = rf(ref, param, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_UpdatePrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePrices'
type FeeQuoterEncoder_UpdatePrices_Call struct {
	*mock.Call
}

// UpdatePrices is a helper method to define mock.On call
//   - ref bind.Object
//   - param bind.Object
//   - clock bind.Object
//   - sourceTokens []string
//   - sourceUsdPerToken []*big.Int
//   - gasDestChainSelectors []uint64
//   - gasUsdPerUnitGas []*big.Int
func (_e *FeeQuoterEncoder_Expecter) UpdatePrices(ref interface{}, param interface{}, clock interface{}, sourceTokens interface{}, sourceUsdPerToken interface{}, gasDestChainSelectors interface{}, gasUsdPerUnitGas interface{}) *FeeQuoterEncoder_UpdatePrices_Call {
	return &FeeQuoterEncoder_UpdatePrices_Call{Call: _e.mock.On("UpdatePrices", ref, param, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)}
}

func (_c *FeeQuoterEncoder_UpdatePrices_Call) Run(run func(ref bind.Object, param bind.Object, clock bind.Object, sourceTokens []string, sourceUsdPerToken []*big.Int, gasDestChainSelectors []uint64, gasUsdPerUnitGas []*big.Int)) *FeeQuoterEncoder_UpdatePrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(bind.Object), args[3].([]string), args[4].([]*big.Int), args[5].([]uint64), args[6].([]*big.Int))
	})
	return _c
}

func (_c *FeeQuoterEncoder_UpdatePrices_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_UpdatePrices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_UpdatePrices_Call) RunAndReturn(run func(bind.Object, bind.Object, bind.Object, []string, []*big.Int, []uint64, []*big.Int) (*bind.EncodedCall, error)) *FeeQuoterEncoder_UpdatePrices_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePricesWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) UpdatePricesWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePricesWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_UpdatePricesWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePricesWithArgs'
type FeeQuoterEncoder_UpdatePricesWithArgs_Call struct {
	*mock.Call
}

// UpdatePricesWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) UpdatePricesWithArgs(args ...interface{}) *FeeQuoterEncoder_UpdatePricesWithArgs_Call {
	return &FeeQuoterEncoder_UpdatePricesWithArgs_Call{Call: _e.mock.On("UpdatePricesWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_UpdatePricesWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_UpdatePricesWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_UpdatePricesWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_UpdatePricesWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_UpdatePricesWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_UpdatePricesWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePricesWithOwnerCap provides a mock function with given fields: ref, ownerCap, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas
func (_m *FeeQuoterEncoder) UpdatePricesWithOwnerCap(ref bind.Object, ownerCap bind.Object, clock bind.Object, sourceTokens []string, sourceUsdPerToken []*big.Int, gasDestChainSelectors []uint64, gasUsdPerUnitGas []*big.Int) (*bind.EncodedCall, error) {
	ret := _m.Called(ref, ownerCap, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePricesWithOwnerCap")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object, []string, []*big.Int, []uint64, []*big.Int) (*bind.EncodedCall, error)); ok {
		return rf(ref, ownerCap, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)
	}
	if rf, ok := ret.Get(0).(func(bind.Object, bind.Object, bind.Object, []string, []*big.Int, []uint64, []*big.Int) *bind.EncodedCall); ok {
		r0 = rf(ref, ownerCap, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(bind.Object, bind.Object, bind.Object, []string, []*big.Int, []uint64, []*big.Int) error); ok {
		r1 = rf(ref, ownerCap, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePricesWithOwnerCap'
type FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call struct {
	*mock.Call
}

// UpdatePricesWithOwnerCap is a helper method to define mock.On call
//   - ref bind.Object
//   - ownerCap bind.Object
//   - clock bind.Object
//   - sourceTokens []string
//   - sourceUsdPerToken []*big.Int
//   - gasDestChainSelectors []uint64
//   - gasUsdPerUnitGas []*big.Int
func (_e *FeeQuoterEncoder_Expecter) UpdatePricesWithOwnerCap(ref interface{}, ownerCap interface{}, clock interface{}, sourceTokens interface{}, sourceUsdPerToken interface{}, gasDestChainSelectors interface{}, gasUsdPerUnitGas interface{}) *FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call {
	return &FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call{Call: _e.mock.On("UpdatePricesWithOwnerCap", ref, ownerCap, clock, sourceTokens, sourceUsdPerToken, gasDestChainSelectors, gasUsdPerUnitGas)}
}

func (_c *FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call) Run(run func(ref bind.Object, ownerCap bind.Object, clock bind.Object, sourceTokens []string, sourceUsdPerToken []*big.Int, gasDestChainSelectors []uint64, gasUsdPerUnitGas []*big.Int)) *FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bind.Object), args[1].(bind.Object), args[2].(bind.Object), args[3].([]string), args[4].([]*big.Int), args[5].([]uint64), args[6].([]*big.Int))
	})
	return _c
}

func (_c *FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call) RunAndReturn(run func(bind.Object, bind.Object, bind.Object, []string, []*big.Int, []uint64, []*big.Int) (*bind.EncodedCall, error)) *FeeQuoterEncoder_UpdatePricesWithOwnerCap_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePricesWithOwnerCapWithArgs provides a mock function with given fields: args
func (_m *FeeQuoterEncoder) UpdatePricesWithOwnerCapWithArgs(args ...interface{}) (*bind.EncodedCall, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePricesWithOwnerCapWithArgs")
	}

	var r0 *bind.EncodedCall
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) (*bind.EncodedCall, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) *bind.EncodedCall); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.EncodedCall)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePricesWithOwnerCapWithArgs'
type FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call struct {
	*mock.Call
}

// UpdatePricesWithOwnerCapWithArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *FeeQuoterEncoder_Expecter) UpdatePricesWithOwnerCapWithArgs(args ...interface{}) *FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call {
	return &FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call{Call: _e.mock.On("UpdatePricesWithOwnerCapWithArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call) Run(run func(args ...interface{})) *FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call) Return(_a0 *bind.EncodedCall, _a1 error) *FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call) RunAndReturn(run func(...interface{}) (*bind.EncodedCall, error)) *FeeQuoterEncoder_UpdatePricesWithOwnerCapWithArgs_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeeQuoterEncoder creates a new instance of FeeQuoterEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeeQuoterEncoder(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeeQuoterEncoder {
	mock := &FeeQuoterEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
