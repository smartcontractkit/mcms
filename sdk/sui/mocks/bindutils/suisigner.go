// Code generated by mockery v2.53.4. DO NOT EDIT.

package mockBindUtils

import mock "github.com/stretchr/testify/mock"

// SuiSigner is an autogenerated mock type for the SuiSigner type
type SuiSigner struct {
	mock.Mock
}

type SuiSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *SuiSigner) EXPECT() *SuiSigner_Expecter {
	return &SuiSigner_Expecter{mock: &_m.Mock}
}

// GetAddress provides a mock function with no fields
func (_m *SuiSigner) GetAddress() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiSigner_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type SuiSigner_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
func (_e *SuiSigner_Expecter) GetAddress() *SuiSigner_GetAddress_Call {
	return &SuiSigner_GetAddress_Call{Call: _e.mock.On("GetAddress")}
}

func (_c *SuiSigner_GetAddress_Call) Run(run func()) *SuiSigner_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SuiSigner_GetAddress_Call) Return(_a0 string, _a1 error) *SuiSigner_GetAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SuiSigner_GetAddress_Call) RunAndReturn(run func() (string, error)) *SuiSigner_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: message
func (_m *SuiSigner) Sign(message []byte) ([]string, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]string, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func([]byte) []string); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiSigner_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type SuiSigner_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - message []byte
func (_e *SuiSigner_Expecter) Sign(message interface{}) *SuiSigner_Sign_Call {
	return &SuiSigner_Sign_Call{Call: _e.mock.On("Sign", message)}
}

func (_c *SuiSigner_Sign_Call) Run(run func(message []byte)) *SuiSigner_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *SuiSigner_Sign_Call) Return(_a0 []string, _a1 error) *SuiSigner_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SuiSigner_Sign_Call) RunAndReturn(run func([]byte) ([]string, error)) *SuiSigner_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewSuiSigner creates a new instance of SuiSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSuiSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *SuiSigner {
	mock := &SuiSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
