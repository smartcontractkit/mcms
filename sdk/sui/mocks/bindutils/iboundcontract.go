// Code generated by mockery v2.53.5. DO NOT EDIT.

package mock_bindutils

import (
	context "context"

	bind "github.com/smartcontractkit/chainlink-sui/bindings/bind"

	mock "github.com/stretchr/testify/mock"

	models "github.com/block-vision/sui-go-sdk/models"

	transaction "github.com/block-vision/sui-go-sdk/transaction"
)

// IBoundContract is an autogenerated mock type for the IBoundContract type
type IBoundContract struct {
	mock.Mock
}

type IBoundContract_Expecter struct {
	mock *mock.Mock
}

func (_m *IBoundContract) EXPECT() *IBoundContract_Expecter {
	return &IBoundContract_Expecter{mock: &_m.Mock}
}

// AppendPTB provides a mock function with given fields: ctx, opts, ptb, encoded
func (_m *IBoundContract) AppendPTB(ctx context.Context, opts *bind.CallOpts, ptb *transaction.Transaction, encoded *bind.EncodedCall) (*transaction.Argument, error) {
	ret := _m.Called(ctx, opts, ptb, encoded)

	if len(ret) == 0 {
		panic("no return value specified for AppendPTB")
	}

	var r0 *transaction.Argument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bind.CallOpts, *transaction.Transaction, *bind.EncodedCall) (*transaction.Argument, error)); ok {
		return rf(ctx, opts, ptb, encoded)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bind.CallOpts, *transaction.Transaction, *bind.EncodedCall) *transaction.Argument); ok {
		r0 = rf(ctx, opts, ptb, encoded)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transaction.Argument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bind.CallOpts, *transaction.Transaction, *bind.EncodedCall) error); ok {
		r1 = rf(ctx, opts, ptb, encoded)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBoundContract_AppendPTB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendPTB'
type IBoundContract_AppendPTB_Call struct {
	*mock.Call
}

// AppendPTB is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *bind.CallOpts
//   - ptb *transaction.Transaction
//   - encoded *bind.EncodedCall
func (_e *IBoundContract_Expecter) AppendPTB(ctx interface{}, opts interface{}, ptb interface{}, encoded interface{}) *IBoundContract_AppendPTB_Call {
	return &IBoundContract_AppendPTB_Call{Call: _e.mock.On("AppendPTB", ctx, opts, ptb, encoded)}
}

func (_c *IBoundContract_AppendPTB_Call) Run(run func(ctx context.Context, opts *bind.CallOpts, ptb *transaction.Transaction, encoded *bind.EncodedCall)) *IBoundContract_AppendPTB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bind.CallOpts), args[2].(*transaction.Transaction), args[3].(*bind.EncodedCall))
	})
	return _c
}

func (_c *IBoundContract_AppendPTB_Call) Return(_a0 *transaction.Argument, _a1 error) *IBoundContract_AppendPTB_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBoundContract_AppendPTB_Call) RunAndReturn(run func(context.Context, *bind.CallOpts, *transaction.Transaction, *bind.EncodedCall) (*transaction.Argument, error)) *IBoundContract_AppendPTB_Call {
	_c.Call.Return(run)
	return _c
}

// Call provides a mock function with given fields: ctx, opts, encoded
func (_m *IBoundContract) Call(ctx context.Context, opts *bind.CallOpts, encoded *bind.EncodedCall) ([]interface{}, error) {
	ret := _m.Called(ctx, opts, encoded)

	if len(ret) == 0 {
		panic("no return value specified for Call")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bind.CallOpts, *bind.EncodedCall) ([]interface{}, error)); ok {
		return rf(ctx, opts, encoded)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bind.CallOpts, *bind.EncodedCall) []interface{}); ok {
		r0 = rf(ctx, opts, encoded)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bind.CallOpts, *bind.EncodedCall) error); ok {
		r1 = rf(ctx, opts, encoded)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBoundContract_Call_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Call'
type IBoundContract_Call_Call struct {
	*mock.Call
}

// Call is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *bind.CallOpts
//   - encoded *bind.EncodedCall
func (_e *IBoundContract_Expecter) Call(ctx interface{}, opts interface{}, encoded interface{}) *IBoundContract_Call_Call {
	return &IBoundContract_Call_Call{Call: _e.mock.On("Call", ctx, opts, encoded)}
}

func (_c *IBoundContract_Call_Call) Run(run func(ctx context.Context, opts *bind.CallOpts, encoded *bind.EncodedCall)) *IBoundContract_Call_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bind.CallOpts), args[2].(*bind.EncodedCall))
	})
	return _c
}

func (_c *IBoundContract_Call_Call) Return(_a0 []interface{}, _a1 error) *IBoundContract_Call_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBoundContract_Call_Call) RunAndReturn(run func(context.Context, *bind.CallOpts, *bind.EncodedCall) ([]interface{}, error)) *IBoundContract_Call_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTransaction provides a mock function with given fields: ctx, opts, encoded
func (_m *IBoundContract) ExecuteTransaction(ctx context.Context, opts *bind.CallOpts, encoded *bind.EncodedCall) (*models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, opts, encoded)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTransaction")
	}

	var r0 *models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bind.CallOpts, *bind.EncodedCall) (*models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, opts, encoded)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bind.CallOpts, *bind.EncodedCall) *models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, opts, encoded)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SuiTransactionBlockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bind.CallOpts, *bind.EncodedCall) error); ok {
		r1 = rf(ctx, opts, encoded)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBoundContract_ExecuteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTransaction'
type IBoundContract_ExecuteTransaction_Call struct {
	*mock.Call
}

// ExecuteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *bind.CallOpts
//   - encoded *bind.EncodedCall
func (_e *IBoundContract_Expecter) ExecuteTransaction(ctx interface{}, opts interface{}, encoded interface{}) *IBoundContract_ExecuteTransaction_Call {
	return &IBoundContract_ExecuteTransaction_Call{Call: _e.mock.On("ExecuteTransaction", ctx, opts, encoded)}
}

func (_c *IBoundContract_ExecuteTransaction_Call) Run(run func(ctx context.Context, opts *bind.CallOpts, encoded *bind.EncodedCall)) *IBoundContract_ExecuteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bind.CallOpts), args[2].(*bind.EncodedCall))
	})
	return _c
}

func (_c *IBoundContract_ExecuteTransaction_Call) Return(_a0 *models.SuiTransactionBlockResponse, _a1 error) *IBoundContract_ExecuteTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBoundContract_ExecuteTransaction_Call) RunAndReturn(run func(context.Context, *bind.CallOpts, *bind.EncodedCall) (*models.SuiTransactionBlockResponse, error)) *IBoundContract_ExecuteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetModuleName provides a mock function with no fields
func (_m *IBoundContract) GetModuleName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetModuleName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IBoundContract_GetModuleName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModuleName'
type IBoundContract_GetModuleName_Call struct {
	*mock.Call
}

// GetModuleName is a helper method to define mock.On call
func (_e *IBoundContract_Expecter) GetModuleName() *IBoundContract_GetModuleName_Call {
	return &IBoundContract_GetModuleName_Call{Call: _e.mock.On("GetModuleName")}
}

func (_c *IBoundContract_GetModuleName_Call) Run(run func()) *IBoundContract_GetModuleName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IBoundContract_GetModuleName_Call) Return(_a0 string) *IBoundContract_GetModuleName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBoundContract_GetModuleName_Call) RunAndReturn(run func() string) *IBoundContract_GetModuleName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPackageID provides a mock function with no fields
func (_m *IBoundContract) GetPackageID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPackageID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IBoundContract_GetPackageID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPackageID'
type IBoundContract_GetPackageID_Call struct {
	*mock.Call
}

// GetPackageID is a helper method to define mock.On call
func (_e *IBoundContract_Expecter) GetPackageID() *IBoundContract_GetPackageID_Call {
	return &IBoundContract_GetPackageID_Call{Call: _e.mock.On("GetPackageID")}
}

func (_c *IBoundContract_GetPackageID_Call) Run(run func()) *IBoundContract_GetPackageID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IBoundContract_GetPackageID_Call) Return(_a0 string) *IBoundContract_GetPackageID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBoundContract_GetPackageID_Call) RunAndReturn(run func() string) *IBoundContract_GetPackageID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPackageName provides a mock function with no fields
func (_m *IBoundContract) GetPackageName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPackageName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IBoundContract_GetPackageName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPackageName'
type IBoundContract_GetPackageName_Call struct {
	*mock.Call
}

// GetPackageName is a helper method to define mock.On call
func (_e *IBoundContract_Expecter) GetPackageName() *IBoundContract_GetPackageName_Call {
	return &IBoundContract_GetPackageName_Call{Call: _e.mock.On("GetPackageName")}
}

func (_c *IBoundContract_GetPackageName_Call) Run(run func()) *IBoundContract_GetPackageName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IBoundContract_GetPackageName_Call) Return(_a0 string) *IBoundContract_GetPackageName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBoundContract_GetPackageName_Call) RunAndReturn(run func() string) *IBoundContract_GetPackageName_Call {
	_c.Call.Return(run)
	return _c
}

// NewIBoundContract creates a new instance of IBoundContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBoundContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBoundContract {
	mock := &IBoundContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
