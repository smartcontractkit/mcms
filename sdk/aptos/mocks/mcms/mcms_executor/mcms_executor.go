// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock_module_mcms_executor

import (
	aptos "github.com/aptos-labs/aptos-go-sdk"
	api "github.com/aptos-labs/aptos-go-sdk/api"

	big "math/big"

	bind "github.com/smartcontractkit/chainlink-aptos/bindings/bind"

	mock "github.com/stretchr/testify/mock"

	module_mcms_executor "github.com/smartcontractkit/chainlink-aptos/bindings/mcms/mcms_executor"
)

// MCMSExecutorInterface is an autogenerated mock type for the MCMSExecutorInterface type
type MCMSExecutorInterface struct {
	mock.Mock
}

type MCMSExecutorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MCMSExecutorInterface) EXPECT() *MCMSExecutorInterface_Expecter {
	return &MCMSExecutorInterface_Expecter{mock: &_m.Mock}
}

// ClearStagedData provides a mock function with given fields: opts
func (_m *MCMSExecutorInterface) ClearStagedData(opts *bind.TransactOpts) (*api.PendingTransaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for ClearStagedData")
	}

	var r0 *api.PendingTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*api.PendingTransaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *api.PendingTransaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PendingTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMSExecutorInterface_ClearStagedData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearStagedData'
type MCMSExecutorInterface_ClearStagedData_Call struct {
	*mock.Call
}

// ClearStagedData is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *MCMSExecutorInterface_Expecter) ClearStagedData(opts interface{}) *MCMSExecutorInterface_ClearStagedData_Call {
	return &MCMSExecutorInterface_ClearStagedData_Call{Call: _e.mock.On("ClearStagedData", opts)}
}

func (_c *MCMSExecutorInterface_ClearStagedData_Call) Run(run func(opts *bind.TransactOpts)) *MCMSExecutorInterface_ClearStagedData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *MCMSExecutorInterface_ClearStagedData_Call) Return(_a0 *api.PendingTransaction, _a1 error) *MCMSExecutorInterface_ClearStagedData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMSExecutorInterface_ClearStagedData_Call) RunAndReturn(run func(*bind.TransactOpts) (*api.PendingTransaction, error)) *MCMSExecutorInterface_ClearStagedData_Call {
	_c.Call.Return(run)
	return _c
}

// Encoder provides a mock function with no fields
func (_m *MCMSExecutorInterface) Encoder() module_mcms_executor.MCMSExecutorEncoder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Encoder")
	}

	var r0 module_mcms_executor.MCMSExecutorEncoder
	if rf, ok := ret.Get(0).(func() module_mcms_executor.MCMSExecutorEncoder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module_mcms_executor.MCMSExecutorEncoder)
		}
	}

	return r0
}

// MCMSExecutorInterface_Encoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encoder'
type MCMSExecutorInterface_Encoder_Call struct {
	*mock.Call
}

// Encoder is a helper method to define mock.On call
func (_e *MCMSExecutorInterface_Expecter) Encoder() *MCMSExecutorInterface_Encoder_Call {
	return &MCMSExecutorInterface_Encoder_Call{Call: _e.mock.On("Encoder")}
}

func (_c *MCMSExecutorInterface_Encoder_Call) Run(run func()) *MCMSExecutorInterface_Encoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MCMSExecutorInterface_Encoder_Call) Return(_a0 module_mcms_executor.MCMSExecutorEncoder) *MCMSExecutorInterface_Encoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MCMSExecutorInterface_Encoder_Call) RunAndReturn(run func() module_mcms_executor.MCMSExecutorEncoder) *MCMSExecutorInterface_Encoder_Call {
	_c.Call.Return(run)
	return _c
}

// StageData provides a mock function with given fields: opts, dataChunk, partialProofs
func (_m *MCMSExecutorInterface) StageData(opts *bind.TransactOpts, dataChunk []byte, partialProofs [][]byte) (*api.PendingTransaction, error) {
	ret := _m.Called(opts, dataChunk, partialProofs)

	if len(ret) == 0 {
		panic("no return value specified for StageData")
	}

	var r0 *api.PendingTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []byte, [][]byte) (*api.PendingTransaction, error)); ok {
		return rf(opts, dataChunk, partialProofs)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []byte, [][]byte) *api.PendingTransaction); ok {
		r0 = rf(opts, dataChunk, partialProofs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PendingTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, []byte, [][]byte) error); ok {
		r1 = rf(opts, dataChunk, partialProofs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMSExecutorInterface_StageData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StageData'
type MCMSExecutorInterface_StageData_Call struct {
	*mock.Call
}

// StageData is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - dataChunk []byte
//   - partialProofs [][]byte
func (_e *MCMSExecutorInterface_Expecter) StageData(opts interface{}, dataChunk interface{}, partialProofs interface{}) *MCMSExecutorInterface_StageData_Call {
	return &MCMSExecutorInterface_StageData_Call{Call: _e.mock.On("StageData", opts, dataChunk, partialProofs)}
}

func (_c *MCMSExecutorInterface_StageData_Call) Run(run func(opts *bind.TransactOpts, dataChunk []byte, partialProofs [][]byte)) *MCMSExecutorInterface_StageData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].([]byte), args[2].([][]byte))
	})
	return _c
}

func (_c *MCMSExecutorInterface_StageData_Call) Return(_a0 *api.PendingTransaction, _a1 error) *MCMSExecutorInterface_StageData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMSExecutorInterface_StageData_Call) RunAndReturn(run func(*bind.TransactOpts, []byte, [][]byte) (*api.PendingTransaction, error)) *MCMSExecutorInterface_StageData_Call {
	_c.Call.Return(run)
	return _c
}

// StageDataAndExecute provides a mock function with given fields: opts, role, chainId, multisig, nonce, to, moduleName, function, dataChunk, partialProofs
func (_m *MCMSExecutorInterface) StageDataAndExecute(opts *bind.TransactOpts, role byte, chainId *big.Int, multisig aptos.AccountAddress, nonce uint64, to aptos.AccountAddress, moduleName string, function string, dataChunk []byte, partialProofs [][]byte) (*api.PendingTransaction, error) {
	ret := _m.Called(opts, role, chainId, multisig, nonce, to, moduleName, function, dataChunk, partialProofs)

	if len(ret) == 0 {
		panic("no return value specified for StageDataAndExecute")
	}

	var r0 *api.PendingTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, byte, *big.Int, aptos.AccountAddress, uint64, aptos.AccountAddress, string, string, []byte, [][]byte) (*api.PendingTransaction, error)); ok {
		return rf(opts, role, chainId, multisig, nonce, to, moduleName, function, dataChunk, partialProofs)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, byte, *big.Int, aptos.AccountAddress, uint64, aptos.AccountAddress, string, string, []byte, [][]byte) *api.PendingTransaction); ok {
		r0 = rf(opts, role, chainId, multisig, nonce, to, moduleName, function, dataChunk, partialProofs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PendingTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, byte, *big.Int, aptos.AccountAddress, uint64, aptos.AccountAddress, string, string, []byte, [][]byte) error); ok {
		r1 = rf(opts, role, chainId, multisig, nonce, to, moduleName, function, dataChunk, partialProofs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMSExecutorInterface_StageDataAndExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StageDataAndExecute'
type MCMSExecutorInterface_StageDataAndExecute_Call struct {
	*mock.Call
}

// StageDataAndExecute is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - role byte
//   - chainId *big.Int
//   - multisig aptos.AccountAddress
//   - nonce uint64
//   - to aptos.AccountAddress
//   - moduleName string
//   - function string
//   - dataChunk []byte
//   - partialProofs [][]byte
func (_e *MCMSExecutorInterface_Expecter) StageDataAndExecute(opts interface{}, role interface{}, chainId interface{}, multisig interface{}, nonce interface{}, to interface{}, moduleName interface{}, function interface{}, dataChunk interface{}, partialProofs interface{}) *MCMSExecutorInterface_StageDataAndExecute_Call {
	return &MCMSExecutorInterface_StageDataAndExecute_Call{Call: _e.mock.On("StageDataAndExecute", opts, role, chainId, multisig, nonce, to, moduleName, function, dataChunk, partialProofs)}
}

func (_c *MCMSExecutorInterface_StageDataAndExecute_Call) Run(run func(opts *bind.TransactOpts, role byte, chainId *big.Int, multisig aptos.AccountAddress, nonce uint64, to aptos.AccountAddress, moduleName string, function string, dataChunk []byte, partialProofs [][]byte)) *MCMSExecutorInterface_StageDataAndExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(byte), args[2].(*big.Int), args[3].(aptos.AccountAddress), args[4].(uint64), args[5].(aptos.AccountAddress), args[6].(string), args[7].(string), args[8].([]byte), args[9].([][]byte))
	})
	return _c
}

func (_c *MCMSExecutorInterface_StageDataAndExecute_Call) Return(_a0 *api.PendingTransaction, _a1 error) *MCMSExecutorInterface_StageDataAndExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMSExecutorInterface_StageDataAndExecute_Call) RunAndReturn(run func(*bind.TransactOpts, byte, *big.Int, aptos.AccountAddress, uint64, aptos.AccountAddress, string, string, []byte, [][]byte) (*api.PendingTransaction, error)) *MCMSExecutorInterface_StageDataAndExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMCMSExecutorInterface creates a new instance of MCMSExecutorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMCMSExecutorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MCMSExecutorInterface {
	mock := &MCMSExecutorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
