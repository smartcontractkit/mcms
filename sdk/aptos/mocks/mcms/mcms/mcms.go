// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_module_mcms

import (
	aptos "github.com/aptos-labs/aptos-go-sdk"
	api "github.com/aptos-labs/aptos-go-sdk/api"

	big "math/big"

	bind "github.com/smartcontractkit/chainlink-aptos/bindings/bind"

	mock "github.com/stretchr/testify/mock"

	module_mcms "github.com/smartcontractkit/chainlink-aptos/bindings/mcms/mcms"
)

// MCMS is an autogenerated mock type for the MCMS type
type MCMS struct {
	mock.Mock
}

type MCMS_Expecter struct {
	mock *mock.Mock
}

func (_m *MCMS) EXPECT() *MCMS_Expecter {
	return &MCMS_Expecter{mock: &_m.Mock}
}

// Encoder provides a mock function with no fields
func (_m *MCMS) Encoder() module_mcms.MCMSEncoder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Encoder")
	}

	var r0 module_mcms.MCMSEncoder
	if rf, ok := ret.Get(0).(func() module_mcms.MCMSEncoder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module_mcms.MCMSEncoder)
		}
	}

	return r0
}

// MCMS_Encoder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encoder'
type MCMS_Encoder_Call struct {
	*mock.Call
}

// Encoder is a helper method to define mock.On call
func (_e *MCMS_Expecter) Encoder() *MCMS_Encoder_Call {
	return &MCMS_Encoder_Call{Call: _e.mock.On("Encoder")}
}

func (_c *MCMS_Encoder_Call) Run(run func()) *MCMS_Encoder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MCMS_Encoder_Call) Return(_a0 module_mcms.MCMSEncoder) *MCMS_Encoder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MCMS_Encoder_Call) RunAndReturn(run func() module_mcms.MCMSEncoder) *MCMS_Encoder_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: opts, chainId, multisig, nonce, to, moduleName, function, data, proof
func (_m *MCMS) Execute(opts *bind.TransactOpts, chainId *big.Int, multisig aptos.AccountAddress, nonce uint64, to aptos.AccountAddress, moduleName string, function string, data []byte, proof [][]byte) (*api.PendingTransaction, error) {
	ret := _m.Called(opts, chainId, multisig, nonce, to, moduleName, function, data, proof)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *api.PendingTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, aptos.AccountAddress, uint64, aptos.AccountAddress, string, string, []byte, [][]byte) (*api.PendingTransaction, error)); ok {
		return rf(opts, chainId, multisig, nonce, to, moduleName, function, data, proof)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int, aptos.AccountAddress, uint64, aptos.AccountAddress, string, string, []byte, [][]byte) *api.PendingTransaction); ok {
		r0 = rf(opts, chainId, multisig, nonce, to, moduleName, function, data, proof)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PendingTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int, aptos.AccountAddress, uint64, aptos.AccountAddress, string, string, []byte, [][]byte) error); ok {
		r1 = rf(opts, chainId, multisig, nonce, to, moduleName, function, data, proof)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMS_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MCMS_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - chainId *big.Int
//   - multisig aptos.AccountAddress
//   - nonce uint64
//   - to aptos.AccountAddress
//   - moduleName string
//   - function string
//   - data []byte
//   - proof [][]byte
func (_e *MCMS_Expecter) Execute(opts interface{}, chainId interface{}, multisig interface{}, nonce interface{}, to interface{}, moduleName interface{}, function interface{}, data interface{}, proof interface{}) *MCMS_Execute_Call {
	return &MCMS_Execute_Call{Call: _e.mock.On("Execute", opts, chainId, multisig, nonce, to, moduleName, function, data, proof)}
}

func (_c *MCMS_Execute_Call) Run(run func(opts *bind.TransactOpts, chainId *big.Int, multisig aptos.AccountAddress, nonce uint64, to aptos.AccountAddress, moduleName string, function string, data []byte, proof [][]byte)) *MCMS_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(*big.Int), args[2].(aptos.AccountAddress), args[3].(uint64), args[4].(aptos.AccountAddress), args[5].(string), args[6].(string), args[7].([]byte), args[8].([][]byte))
	})
	return _c
}

func (_c *MCMS_Execute_Call) Return(_a0 *api.PendingTransaction, _a1 error) *MCMS_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMS_Execute_Call) RunAndReturn(run func(*bind.TransactOpts, *big.Int, aptos.AccountAddress, uint64, aptos.AccountAddress, string, string, []byte, [][]byte) (*api.PendingTransaction, error)) *MCMS_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields: opts
func (_m *MCMS) GetConfig(opts *bind.CallOpts) (module_mcms.Config, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 module_mcms.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (module_mcms.Config, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) module_mcms.Config); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(module_mcms.Config)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMS_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MCMS_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MCMS_Expecter) GetConfig(opts interface{}) *MCMS_GetConfig_Call {
	return &MCMS_GetConfig_Call{Call: _e.mock.On("GetConfig", opts)}
}

func (_c *MCMS_GetConfig_Call) Run(run func(opts *bind.CallOpts)) *MCMS_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MCMS_GetConfig_Call) Return(_a0 module_mcms.Config, _a1 error) *MCMS_GetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMS_GetConfig_Call) RunAndReturn(run func(*bind.CallOpts) (module_mcms.Config, error)) *MCMS_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpCount provides a mock function with given fields: opts
func (_m *MCMS) GetOpCount(opts *bind.CallOpts) (uint64, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetOpCount")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (uint64, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) uint64); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMS_GetOpCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpCount'
type MCMS_GetOpCount_Call struct {
	*mock.Call
}

// GetOpCount is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MCMS_Expecter) GetOpCount(opts interface{}) *MCMS_GetOpCount_Call {
	return &MCMS_GetOpCount_Call{Call: _e.mock.On("GetOpCount", opts)}
}

func (_c *MCMS_GetOpCount_Call) Run(run func(opts *bind.CallOpts)) *MCMS_GetOpCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MCMS_GetOpCount_Call) Return(_a0 uint64, _a1 error) *MCMS_GetOpCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMS_GetOpCount_Call) RunAndReturn(run func(*bind.CallOpts) (uint64, error)) *MCMS_GetOpCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoot provides a mock function with given fields: opts
func (_m *MCMS) GetRoot(opts *bind.CallOpts) ([]byte, uint64, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetRoot")
	}

	var r0 []byte
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]byte, uint64, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []byte); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) uint64); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(*bind.CallOpts) error); ok {
		r2 = rf(opts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MCMS_GetRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoot'
type MCMS_GetRoot_Call struct {
	*mock.Call
}

// GetRoot is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MCMS_Expecter) GetRoot(opts interface{}) *MCMS_GetRoot_Call {
	return &MCMS_GetRoot_Call{Call: _e.mock.On("GetRoot", opts)}
}

func (_c *MCMS_GetRoot_Call) Run(run func(opts *bind.CallOpts)) *MCMS_GetRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MCMS_GetRoot_Call) Return(_a0 []byte, _a1 uint64, _a2 error) *MCMS_GetRoot_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MCMS_GetRoot_Call) RunAndReturn(run func(*bind.CallOpts) ([]byte, uint64, error)) *MCMS_GetRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootMetadata provides a mock function with given fields: opts
func (_m *MCMS) GetRootMetadata(opts *bind.CallOpts) (module_mcms.RootMetadata, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetRootMetadata")
	}

	var r0 module_mcms.RootMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (module_mcms.RootMetadata, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) module_mcms.RootMetadata); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(module_mcms.RootMetadata)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMS_GetRootMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootMetadata'
type MCMS_GetRootMetadata_Call struct {
	*mock.Call
}

// GetRootMetadata is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MCMS_Expecter) GetRootMetadata(opts interface{}) *MCMS_GetRootMetadata_Call {
	return &MCMS_GetRootMetadata_Call{Call: _e.mock.On("GetRootMetadata", opts)}
}

func (_c *MCMS_GetRootMetadata_Call) Run(run func(opts *bind.CallOpts)) *MCMS_GetRootMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MCMS_GetRootMetadata_Call) Return(_a0 module_mcms.RootMetadata, _a1 error) *MCMS_GetRootMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMS_GetRootMetadata_Call) RunAndReturn(run func(*bind.CallOpts) (module_mcms.RootMetadata, error)) *MCMS_GetRootMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function with given fields: opts, signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot
func (_m *MCMS) SetConfig(opts *bind.TransactOpts, signerAddresses [][]byte, signerGroups []byte, groupQuorums []byte, groupParents []byte, clearRoot bool) (*api.PendingTransaction, error) {
	ret := _m.Called(opts, signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 *api.PendingTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [][]byte, []byte, []byte, []byte, bool) (*api.PendingTransaction, error)); ok {
		return rf(opts, signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [][]byte, []byte, []byte, []byte, bool) *api.PendingTransaction); ok {
		r0 = rf(opts, signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PendingTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [][]byte, []byte, []byte, []byte, bool) error); ok {
		r1 = rf(opts, signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMS_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type MCMS_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - signerAddresses [][]byte
//   - signerGroups []byte
//   - groupQuorums []byte
//   - groupParents []byte
//   - clearRoot bool
func (_e *MCMS_Expecter) SetConfig(opts interface{}, signerAddresses interface{}, signerGroups interface{}, groupQuorums interface{}, groupParents interface{}, clearRoot interface{}) *MCMS_SetConfig_Call {
	return &MCMS_SetConfig_Call{Call: _e.mock.On("SetConfig", opts, signerAddresses, signerGroups, groupQuorums, groupParents, clearRoot)}
}

func (_c *MCMS_SetConfig_Call) Run(run func(opts *bind.TransactOpts, signerAddresses [][]byte, signerGroups []byte, groupQuorums []byte, groupParents []byte, clearRoot bool)) *MCMS_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].([][]byte), args[2].([]byte), args[3].([]byte), args[4].([]byte), args[5].(bool))
	})
	return _c
}

func (_c *MCMS_SetConfig_Call) Return(_a0 *api.PendingTransaction, _a1 error) *MCMS_SetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMS_SetConfig_Call) RunAndReturn(run func(*bind.TransactOpts, [][]byte, []byte, []byte, []byte, bool) (*api.PendingTransaction, error)) *MCMS_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetRoot provides a mock function with given fields: opts, root, validUntil, chainId, multisig, preOpCount, postOpCount, overridePreviousRoot, metadataProof, signatures
func (_m *MCMS) SetRoot(opts *bind.TransactOpts, root []byte, validUntil uint64, chainId *big.Int, multisig aptos.AccountAddress, preOpCount uint64, postOpCount uint64, overridePreviousRoot bool, metadataProof [][]byte, signatures [][]byte) (*api.PendingTransaction, error) {
	ret := _m.Called(opts, root, validUntil, chainId, multisig, preOpCount, postOpCount, overridePreviousRoot, metadataProof, signatures)

	if len(ret) == 0 {
		panic("no return value specified for SetRoot")
	}

	var r0 *api.PendingTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []byte, uint64, *big.Int, aptos.AccountAddress, uint64, uint64, bool, [][]byte, [][]byte) (*api.PendingTransaction, error)); ok {
		return rf(opts, root, validUntil, chainId, multisig, preOpCount, postOpCount, overridePreviousRoot, metadataProof, signatures)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, []byte, uint64, *big.Int, aptos.AccountAddress, uint64, uint64, bool, [][]byte, [][]byte) *api.PendingTransaction); ok {
		r0 = rf(opts, root, validUntil, chainId, multisig, preOpCount, postOpCount, overridePreviousRoot, metadataProof, signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PendingTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, []byte, uint64, *big.Int, aptos.AccountAddress, uint64, uint64, bool, [][]byte, [][]byte) error); ok {
		r1 = rf(opts, root, validUntil, chainId, multisig, preOpCount, postOpCount, overridePreviousRoot, metadataProof, signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MCMS_SetRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRoot'
type MCMS_SetRoot_Call struct {
	*mock.Call
}

// SetRoot is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - root []byte
//   - validUntil uint64
//   - chainId *big.Int
//   - multisig aptos.AccountAddress
//   - preOpCount uint64
//   - postOpCount uint64
//   - overridePreviousRoot bool
//   - metadataProof [][]byte
//   - signatures [][]byte
func (_e *MCMS_Expecter) SetRoot(opts interface{}, root interface{}, validUntil interface{}, chainId interface{}, multisig interface{}, preOpCount interface{}, postOpCount interface{}, overridePreviousRoot interface{}, metadataProof interface{}, signatures interface{}) *MCMS_SetRoot_Call {
	return &MCMS_SetRoot_Call{Call: _e.mock.On("SetRoot", opts, root, validUntil, chainId, multisig, preOpCount, postOpCount, overridePreviousRoot, metadataProof, signatures)}
}

func (_c *MCMS_SetRoot_Call) Run(run func(opts *bind.TransactOpts, root []byte, validUntil uint64, chainId *big.Int, multisig aptos.AccountAddress, preOpCount uint64, postOpCount uint64, overridePreviousRoot bool, metadataProof [][]byte, signatures [][]byte)) *MCMS_SetRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].([]byte), args[2].(uint64), args[3].(*big.Int), args[4].(aptos.AccountAddress), args[5].(uint64), args[6].(uint64), args[7].(bool), args[8].([][]byte), args[9].([][]byte))
	})
	return _c
}

func (_c *MCMS_SetRoot_Call) Return(_a0 *api.PendingTransaction, _a1 error) *MCMS_SetRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MCMS_SetRoot_Call) RunAndReturn(run func(*bind.TransactOpts, []byte, uint64, *big.Int, aptos.AccountAddress, uint64, uint64, bool, [][]byte, [][]byte) (*api.PendingTransaction, error)) *MCMS_SetRoot_Call {
	_c.Call.Return(run)
	return _c
}

// NewMCMS creates a new instance of MCMS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMCMS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MCMS {
	mock := &MCMS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
