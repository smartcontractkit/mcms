// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock_mcms

import (
	aptos "github.com/aptos-labs/aptos-go-sdk"

	mock "github.com/stretchr/testify/mock"

	module_mcms "github.com/smartcontractkit/chainlink-aptos/bindings/mcms/mcms"

	module_mcms_account "github.com/smartcontractkit/chainlink-aptos/bindings/mcms/mcms_account"

	module_mcms_deployer "github.com/smartcontractkit/chainlink-aptos/bindings/mcms/mcms_deployer"

	module_mcms_executor "github.com/smartcontractkit/chainlink-aptos/bindings/mcms/mcms_executor"

	module_mcms_registry "github.com/smartcontractkit/chainlink-aptos/bindings/mcms/mcms_registry"
)

// MCMS is an autogenerated mock type for the MCMS type
type MCMS struct {
	mock.Mock
}

type MCMS_Expecter struct {
	mock *mock.Mock
}

func (_m *MCMS) EXPECT() *MCMS_Expecter {
	return &MCMS_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with no fields
func (_m *MCMS) Address() aptos.AccountAddress {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 aptos.AccountAddress
	if rf, ok := ret.Get(0).(func() aptos.AccountAddress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(aptos.AccountAddress)
		}
	}

	return r0
}

// MCMS_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type MCMS_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *MCMS_Expecter) Address() *MCMS_Address_Call {
	return &MCMS_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *MCMS_Address_Call) Run(run func()) *MCMS_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MCMS_Address_Call) Return(_a0 aptos.AccountAddress) *MCMS_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MCMS_Address_Call) RunAndReturn(run func() aptos.AccountAddress) *MCMS_Address_Call {
	_c.Call.Return(run)
	return _c
}

// MCMS provides a mock function with no fields
func (_m *MCMS) MCMS() module_mcms.MCMSInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MCMS")
	}

	var r0 module_mcms.MCMSInterface
	if rf, ok := ret.Get(0).(func() module_mcms.MCMSInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module_mcms.MCMSInterface)
		}
	}

	return r0
}

// MCMS_MCMS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MCMS'
type MCMS_MCMS_Call struct {
	*mock.Call
}

// MCMS is a helper method to define mock.On call
func (_e *MCMS_Expecter) MCMS() *MCMS_MCMS_Call {
	return &MCMS_MCMS_Call{Call: _e.mock.On("MCMS")}
}

func (_c *MCMS_MCMS_Call) Run(run func()) *MCMS_MCMS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MCMS_MCMS_Call) Return(_a0 module_mcms.MCMSInterface) *MCMS_MCMS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MCMS_MCMS_Call) RunAndReturn(run func() module_mcms.MCMSInterface) *MCMS_MCMS_Call {
	_c.Call.Return(run)
	return _c
}

// MCMSAccount provides a mock function with no fields
func (_m *MCMS) MCMSAccount() module_mcms_account.MCMSAccountInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MCMSAccount")
	}

	var r0 module_mcms_account.MCMSAccountInterface
	if rf, ok := ret.Get(0).(func() module_mcms_account.MCMSAccountInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module_mcms_account.MCMSAccountInterface)
		}
	}

	return r0
}

// MCMS_MCMSAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MCMSAccount'
type MCMS_MCMSAccount_Call struct {
	*mock.Call
}

// MCMSAccount is a helper method to define mock.On call
func (_e *MCMS_Expecter) MCMSAccount() *MCMS_MCMSAccount_Call {
	return &MCMS_MCMSAccount_Call{Call: _e.mock.On("MCMSAccount")}
}

func (_c *MCMS_MCMSAccount_Call) Run(run func()) *MCMS_MCMSAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MCMS_MCMSAccount_Call) Return(_a0 module_mcms_account.MCMSAccountInterface) *MCMS_MCMSAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MCMS_MCMSAccount_Call) RunAndReturn(run func() module_mcms_account.MCMSAccountInterface) *MCMS_MCMSAccount_Call {
	_c.Call.Return(run)
	return _c
}

// MCMSDeployer provides a mock function with no fields
func (_m *MCMS) MCMSDeployer() module_mcms_deployer.MCMSDeployerInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MCMSDeployer")
	}

	var r0 module_mcms_deployer.MCMSDeployerInterface
	if rf, ok := ret.Get(0).(func() module_mcms_deployer.MCMSDeployerInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module_mcms_deployer.MCMSDeployerInterface)
		}
	}

	return r0
}

// MCMS_MCMSDeployer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MCMSDeployer'
type MCMS_MCMSDeployer_Call struct {
	*mock.Call
}

// MCMSDeployer is a helper method to define mock.On call
func (_e *MCMS_Expecter) MCMSDeployer() *MCMS_MCMSDeployer_Call {
	return &MCMS_MCMSDeployer_Call{Call: _e.mock.On("MCMSDeployer")}
}

func (_c *MCMS_MCMSDeployer_Call) Run(run func()) *MCMS_MCMSDeployer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MCMS_MCMSDeployer_Call) Return(_a0 module_mcms_deployer.MCMSDeployerInterface) *MCMS_MCMSDeployer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MCMS_MCMSDeployer_Call) RunAndReturn(run func() module_mcms_deployer.MCMSDeployerInterface) *MCMS_MCMSDeployer_Call {
	_c.Call.Return(run)
	return _c
}

// MCMSExecutor provides a mock function with no fields
func (_m *MCMS) MCMSExecutor() module_mcms_executor.MCMSExecutorInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MCMSExecutor")
	}

	var r0 module_mcms_executor.MCMSExecutorInterface
	if rf, ok := ret.Get(0).(func() module_mcms_executor.MCMSExecutorInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module_mcms_executor.MCMSExecutorInterface)
		}
	}

	return r0
}

// MCMS_MCMSExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MCMSExecutor'
type MCMS_MCMSExecutor_Call struct {
	*mock.Call
}

// MCMSExecutor is a helper method to define mock.On call
func (_e *MCMS_Expecter) MCMSExecutor() *MCMS_MCMSExecutor_Call {
	return &MCMS_MCMSExecutor_Call{Call: _e.mock.On("MCMSExecutor")}
}

func (_c *MCMS_MCMSExecutor_Call) Run(run func()) *MCMS_MCMSExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MCMS_MCMSExecutor_Call) Return(_a0 module_mcms_executor.MCMSExecutorInterface) *MCMS_MCMSExecutor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MCMS_MCMSExecutor_Call) RunAndReturn(run func() module_mcms_executor.MCMSExecutorInterface) *MCMS_MCMSExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// MCMSRegistry provides a mock function with no fields
func (_m *MCMS) MCMSRegistry() module_mcms_registry.MCMSRegistryInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MCMSRegistry")
	}

	var r0 module_mcms_registry.MCMSRegistryInterface
	if rf, ok := ret.Get(0).(func() module_mcms_registry.MCMSRegistryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(module_mcms_registry.MCMSRegistryInterface)
		}
	}

	return r0
}

// MCMS_MCMSRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MCMSRegistry'
type MCMS_MCMSRegistry_Call struct {
	*mock.Call
}

// MCMSRegistry is a helper method to define mock.On call
func (_e *MCMS_Expecter) MCMSRegistry() *MCMS_MCMSRegistry_Call {
	return &MCMS_MCMSRegistry_Call{Call: _e.mock.On("MCMSRegistry")}
}

func (_c *MCMS_MCMSRegistry_Call) Run(run func()) *MCMS_MCMSRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MCMS_MCMSRegistry_Call) Return(_a0 module_mcms_registry.MCMSRegistryInterface) *MCMS_MCMSRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MCMS_MCMSRegistry_Call) RunAndReturn(run func() module_mcms_registry.MCMSRegistryInterface) *MCMS_MCMSRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMCMS creates a new instance of MCMS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMCMS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MCMS {
	mock := &MCMS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
