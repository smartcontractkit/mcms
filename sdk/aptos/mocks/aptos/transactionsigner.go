// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock_aptossdk

import (
	aptos "github.com/aptos-labs/aptos-go-sdk"
	crypto "github.com/aptos-labs/aptos-go-sdk/crypto"

	mock "github.com/stretchr/testify/mock"
)

// TransactionSigner is an autogenerated mock type for the TransactionSigner type
type TransactionSigner struct {
	mock.Mock
}

type TransactionSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionSigner) EXPECT() *TransactionSigner_Expecter {
	return &TransactionSigner_Expecter{mock: &_m.Mock}
}

// AccountAddress provides a mock function with no fields
func (_m *TransactionSigner) AccountAddress() aptos.AccountAddress {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AccountAddress")
	}

	var r0 aptos.AccountAddress
	if rf, ok := ret.Get(0).(func() aptos.AccountAddress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(aptos.AccountAddress)
		}
	}

	return r0
}

// TransactionSigner_AccountAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountAddress'
type TransactionSigner_AccountAddress_Call struct {
	*mock.Call
}

// AccountAddress is a helper method to define mock.On call
func (_e *TransactionSigner_Expecter) AccountAddress() *TransactionSigner_AccountAddress_Call {
	return &TransactionSigner_AccountAddress_Call{Call: _e.mock.On("AccountAddress")}
}

func (_c *TransactionSigner_AccountAddress_Call) Run(run func()) *TransactionSigner_AccountAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactionSigner_AccountAddress_Call) Return(_a0 aptos.AccountAddress) *TransactionSigner_AccountAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionSigner_AccountAddress_Call) RunAndReturn(run func() aptos.AccountAddress) *TransactionSigner_AccountAddress_Call {
	_c.Call.Return(run)
	return _c
}

// AuthKey provides a mock function with no fields
func (_m *TransactionSigner) AuthKey() *crypto.AuthenticationKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthKey")
	}

	var r0 *crypto.AuthenticationKey
	if rf, ok := ret.Get(0).(func() *crypto.AuthenticationKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.AuthenticationKey)
		}
	}

	return r0
}

// TransactionSigner_AuthKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthKey'
type TransactionSigner_AuthKey_Call struct {
	*mock.Call
}

// AuthKey is a helper method to define mock.On call
func (_e *TransactionSigner_Expecter) AuthKey() *TransactionSigner_AuthKey_Call {
	return &TransactionSigner_AuthKey_Call{Call: _e.mock.On("AuthKey")}
}

func (_c *TransactionSigner_AuthKey_Call) Run(run func()) *TransactionSigner_AuthKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactionSigner_AuthKey_Call) Return(_a0 *crypto.AuthenticationKey) *TransactionSigner_AuthKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionSigner_AuthKey_Call) RunAndReturn(run func() *crypto.AuthenticationKey) *TransactionSigner_AuthKey_Call {
	_c.Call.Return(run)
	return _c
}

// PubKey provides a mock function with no fields
func (_m *TransactionSigner) PubKey() crypto.PublicKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PubKey")
	}

	var r0 crypto.PublicKey
	if rf, ok := ret.Get(0).(func() crypto.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.PublicKey)
		}
	}

	return r0
}

// TransactionSigner_PubKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PubKey'
type TransactionSigner_PubKey_Call struct {
	*mock.Call
}

// PubKey is a helper method to define mock.On call
func (_e *TransactionSigner_Expecter) PubKey() *TransactionSigner_PubKey_Call {
	return &TransactionSigner_PubKey_Call{Call: _e.mock.On("PubKey")}
}

func (_c *TransactionSigner_PubKey_Call) Run(run func()) *TransactionSigner_PubKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactionSigner_PubKey_Call) Return(_a0 crypto.PublicKey) *TransactionSigner_PubKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionSigner_PubKey_Call) RunAndReturn(run func() crypto.PublicKey) *TransactionSigner_PubKey_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: msg
func (_m *TransactionSigner) Sign(msg []byte) (*crypto.AccountAuthenticator, error) {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *crypto.AccountAuthenticator
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*crypto.AccountAuthenticator, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func([]byte) *crypto.AccountAuthenticator); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.AccountAuthenticator)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionSigner_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type TransactionSigner_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - msg []byte
func (_e *TransactionSigner_Expecter) Sign(msg interface{}) *TransactionSigner_Sign_Call {
	return &TransactionSigner_Sign_Call{Call: _e.mock.On("Sign", msg)}
}

func (_c *TransactionSigner_Sign_Call) Run(run func(msg []byte)) *TransactionSigner_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *TransactionSigner_Sign_Call) Return(authenticator *crypto.AccountAuthenticator, err error) *TransactionSigner_Sign_Call {
	_c.Call.Return(authenticator, err)
	return _c
}

func (_c *TransactionSigner_Sign_Call) RunAndReturn(run func([]byte) (*crypto.AccountAuthenticator, error)) *TransactionSigner_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// SignMessage provides a mock function with given fields: msg
func (_m *TransactionSigner) SignMessage(msg []byte) (crypto.Signature, error) {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SignMessage")
	}

	var r0 crypto.Signature
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (crypto.Signature, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func([]byte) crypto.Signature); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(crypto.Signature)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionSigner_SignMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignMessage'
type TransactionSigner_SignMessage_Call struct {
	*mock.Call
}

// SignMessage is a helper method to define mock.On call
//   - msg []byte
func (_e *TransactionSigner_Expecter) SignMessage(msg interface{}) *TransactionSigner_SignMessage_Call {
	return &TransactionSigner_SignMessage_Call{Call: _e.mock.On("SignMessage", msg)}
}

func (_c *TransactionSigner_SignMessage_Call) Run(run func(msg []byte)) *TransactionSigner_SignMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *TransactionSigner_SignMessage_Call) Return(signature crypto.Signature, err error) *TransactionSigner_SignMessage_Call {
	_c.Call.Return(signature, err)
	return _c
}

func (_c *TransactionSigner_SignMessage_Call) RunAndReturn(run func([]byte) (crypto.Signature, error)) *TransactionSigner_SignMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SimulationAuthenticator provides a mock function with no fields
func (_m *TransactionSigner) SimulationAuthenticator() *crypto.AccountAuthenticator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SimulationAuthenticator")
	}

	var r0 *crypto.AccountAuthenticator
	if rf, ok := ret.Get(0).(func() *crypto.AccountAuthenticator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crypto.AccountAuthenticator)
		}
	}

	return r0
}

// TransactionSigner_SimulationAuthenticator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SimulationAuthenticator'
type TransactionSigner_SimulationAuthenticator_Call struct {
	*mock.Call
}

// SimulationAuthenticator is a helper method to define mock.On call
func (_e *TransactionSigner_Expecter) SimulationAuthenticator() *TransactionSigner_SimulationAuthenticator_Call {
	return &TransactionSigner_SimulationAuthenticator_Call{Call: _e.mock.On("SimulationAuthenticator")}
}

func (_c *TransactionSigner_SimulationAuthenticator_Call) Run(run func()) *TransactionSigner_SimulationAuthenticator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactionSigner_SimulationAuthenticator_Call) Return(_a0 *crypto.AccountAuthenticator) *TransactionSigner_SimulationAuthenticator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionSigner_SimulationAuthenticator_Call) RunAndReturn(run func() *crypto.AccountAuthenticator) *TransactionSigner_SimulationAuthenticator_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionSigner creates a new instance of TransactionSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionSigner {
	mock := &TransactionSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
