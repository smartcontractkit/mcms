// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/mcms/types"
)

// ConfigTransformer is an autogenerated mock type for the ConfigTransformer type
type ConfigTransformer[R any] struct {
	mock.Mock
}

type ConfigTransformer_Expecter[R any] struct {
	mock *mock.Mock
}

func (_m *ConfigTransformer[R]) EXPECT() *ConfigTransformer_Expecter[R] {
	return &ConfigTransformer_Expecter[R]{mock: &_m.Mock}
}

// ToChainConfig provides a mock function with given fields: contract, cfg
func (_m *ConfigTransformer[R]) ToChainConfig(contract string, cfg types.Config) (R, error) {
	ret := _m.Called(contract, cfg)

	if len(ret) == 0 {
		panic("no return value specified for ToChainConfig")
	}

	var r0 R
	var r1 error
	if rf, ok := ret.Get(0).(func(string, types.Config) (R, error)); ok {
		return rf(contract, cfg)
	}
	if rf, ok := ret.Get(0).(func(string, types.Config) R); ok {
		r0 = rf(contract, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(R)
		}
	}

	if rf, ok := ret.Get(1).(func(string, types.Config) error); ok {
		r1 = rf(contract, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigTransformer_ToChainConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToChainConfig'
type ConfigTransformer_ToChainConfig_Call[R any] struct {
	*mock.Call
}

// ToChainConfig is a helper method to define mock.On call
//   - contract string
//   - cfg types.Config
func (_e *ConfigTransformer_Expecter[R]) ToChainConfig(contract interface{}, cfg interface{}) *ConfigTransformer_ToChainConfig_Call[R] {
	return &ConfigTransformer_ToChainConfig_Call[R]{Call: _e.mock.On("ToChainConfig", contract, cfg)}
}

func (_c *ConfigTransformer_ToChainConfig_Call[R]) Run(run func(contract string, cfg types.Config)) *ConfigTransformer_ToChainConfig_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(types.Config))
	})
	return _c
}

func (_c *ConfigTransformer_ToChainConfig_Call[R]) Return(_a0 R, _a1 error) *ConfigTransformer_ToChainConfig_Call[R] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigTransformer_ToChainConfig_Call[R]) RunAndReturn(run func(string, types.Config) (R, error)) *ConfigTransformer_ToChainConfig_Call[R] {
	_c.Call.Return(run)
	return _c
}

// ToConfig provides a mock function with given fields: onchainConfig
func (_m *ConfigTransformer[R]) ToConfig(onchainConfig R) (*types.Config, error) {
	ret := _m.Called(onchainConfig)

	if len(ret) == 0 {
		panic("no return value specified for ToConfig")
	}

	var r0 *types.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(R) (*types.Config, error)); ok {
		return rf(onchainConfig)
	}
	if rf, ok := ret.Get(0).(func(R) *types.Config); ok {
		r0 = rf(onchainConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(R) error); ok {
		r1 = rf(onchainConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigTransformer_ToConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToConfig'
type ConfigTransformer_ToConfig_Call[R any] struct {
	*mock.Call
}

// ToConfig is a helper method to define mock.On call
//   - onchainConfig R
func (_e *ConfigTransformer_Expecter[R]) ToConfig(onchainConfig interface{}) *ConfigTransformer_ToConfig_Call[R] {
	return &ConfigTransformer_ToConfig_Call[R]{Call: _e.mock.On("ToConfig", onchainConfig)}
}

func (_c *ConfigTransformer_ToConfig_Call[R]) Run(run func(onchainConfig R)) *ConfigTransformer_ToConfig_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(R))
	})
	return _c
}

func (_c *ConfigTransformer_ToConfig_Call[R]) Return(_a0 *types.Config, _a1 error) *ConfigTransformer_ToConfig_Call[R] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ConfigTransformer_ToConfig_Call[R]) RunAndReturn(run func(R) (*types.Config, error)) *ConfigTransformer_ToConfig_Call[R] {
	_c.Call.Return(run)
	return _c
}

// NewConfigTransformer creates a new instance of ConfigTransformer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigTransformer[R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigTransformer[R] {
	mock := &ConfigTransformer[R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
