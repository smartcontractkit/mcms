// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/mcms/types"
)

// TimelockConverter is an autogenerated mock type for the TimelockConverter type
type TimelockConverter struct {
	mock.Mock
}

type TimelockConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *TimelockConverter) EXPECT() *TimelockConverter_Expecter {
	return &TimelockConverter_Expecter{mock: &_m.Mock}
}

// ConvertBatchToChainOperation provides a mock function with given fields: bop, timelockAddress, delay, action, predecessor
func (_m *TimelockConverter) ConvertBatchToChainOperation(bop types.BatchOperation, timelockAddress string, delay types.Duration, action types.TimelockAction, predecessor common.Hash) (types.Operation, common.Hash, error) {
	ret := _m.Called(bop, timelockAddress, delay, action, predecessor)

	if len(ret) == 0 {
		panic("no return value specified for ConvertBatchToChainOperation")
	}

	var r0 types.Operation
	var r1 common.Hash
	var r2 error
	if rf, ok := ret.Get(0).(func(types.BatchOperation, string, types.Duration, types.TimelockAction, common.Hash) (types.Operation, common.Hash, error)); ok {
		return rf(bop, timelockAddress, delay, action, predecessor)
	}
	if rf, ok := ret.Get(0).(func(types.BatchOperation, string, types.Duration, types.TimelockAction, common.Hash) types.Operation); ok {
		r0 = rf(bop, timelockAddress, delay, action, predecessor)
	} else {
		r0 = ret.Get(0).(types.Operation)
	}

	if rf, ok := ret.Get(1).(func(types.BatchOperation, string, types.Duration, types.TimelockAction, common.Hash) common.Hash); ok {
		r1 = rf(bop, timelockAddress, delay, action, predecessor)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.Hash)
		}
	}

	if rf, ok := ret.Get(2).(func(types.BatchOperation, string, types.Duration, types.TimelockAction, common.Hash) error); ok {
		r2 = rf(bop, timelockAddress, delay, action, predecessor)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TimelockConverter_ConvertBatchToChainOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertBatchToChainOperation'
type TimelockConverter_ConvertBatchToChainOperation_Call struct {
	*mock.Call
}

// ConvertBatchToChainOperation is a helper method to define mock.On call
//   - bop types.BatchOperation
//   - timelockAddress string
//   - delay types.Duration
//   - action types.TimelockAction
//   - predecessor common.Hash
func (_e *TimelockConverter_Expecter) ConvertBatchToChainOperation(bop interface{}, timelockAddress interface{}, delay interface{}, action interface{}, predecessor interface{}) *TimelockConverter_ConvertBatchToChainOperation_Call {
	return &TimelockConverter_ConvertBatchToChainOperation_Call{Call: _e.mock.On("ConvertBatchToChainOperation", bop, timelockAddress, delay, action, predecessor)}
}

func (_c *TimelockConverter_ConvertBatchToChainOperation_Call) Run(run func(bop types.BatchOperation, timelockAddress string, delay types.Duration, action types.TimelockAction, predecessor common.Hash)) *TimelockConverter_ConvertBatchToChainOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.BatchOperation), args[1].(string), args[2].(types.Duration), args[3].(types.TimelockAction), args[4].(common.Hash))
	})
	return _c
}

func (_c *TimelockConverter_ConvertBatchToChainOperation_Call) Return(_a0 types.Operation, _a1 common.Hash, _a2 error) *TimelockConverter_ConvertBatchToChainOperation_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TimelockConverter_ConvertBatchToChainOperation_Call) RunAndReturn(run func(types.BatchOperation, string, types.Duration, types.TimelockAction, common.Hash) (types.Operation, common.Hash, error)) *TimelockConverter_ConvertBatchToChainOperation_Call {
	_c.Call.Return(run)
	return _c
}

// NewTimelockConverter creates a new instance of TimelockConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimelockConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TimelockConverter {
	mock := &TimelockConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
