// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/mcms/types"
)

// Configurer is an autogenerated mock type for the Configurer type
type Configurer struct {
	mock.Mock
}

type Configurer_Expecter struct {
	mock *mock.Mock
}

func (_m *Configurer) EXPECT() *Configurer_Expecter {
	return &Configurer_Expecter{mock: &_m.Mock}
}

// SetConfig provides a mock function with given fields: ctx, mcmAddr, cfg, clearRoot
func (_m *Configurer) SetConfig(ctx context.Context, mcmAddr string, cfg *types.Config, clearRoot bool) (types.TransactionResult, error) {
	ret := _m.Called(ctx, mcmAddr, cfg, clearRoot)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 types.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.Config, bool) (types.TransactionResult, error)); ok {
		return rf(ctx, mcmAddr, cfg, clearRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.Config, bool) types.TransactionResult); ok {
		r0 = rf(ctx, mcmAddr, cfg, clearRoot)
	} else {
		r0 = ret.Get(0).(types.TransactionResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *types.Config, bool) error); ok {
		r1 = rf(ctx, mcmAddr, cfg, clearRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Configurer_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type Configurer_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - mcmAddr string
//   - cfg *types.Config
//   - clearRoot bool
func (_e *Configurer_Expecter) SetConfig(ctx interface{}, mcmAddr interface{}, cfg interface{}, clearRoot interface{}) *Configurer_SetConfig_Call {
	return &Configurer_SetConfig_Call{Call: _e.mock.On("SetConfig", ctx, mcmAddr, cfg, clearRoot)}
}

func (_c *Configurer_SetConfig_Call) Run(run func(ctx context.Context, mcmAddr string, cfg *types.Config, clearRoot bool)) *Configurer_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*types.Config), args[3].(bool))
	})
	return _c
}

func (_c *Configurer_SetConfig_Call) Return(_a0 types.TransactionResult, _a1 error) *Configurer_SetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Configurer_SetConfig_Call) RunAndReturn(run func(context.Context, string, *types.Config, bool) (types.TransactionResult, error)) *Configurer_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfigurer creates a new instance of Configurer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigurer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Configurer {
	mock := &Configurer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
