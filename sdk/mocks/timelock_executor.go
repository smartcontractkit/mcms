// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/mcms/types"
)

// TimelockExecutor is an autogenerated mock type for the TimelockExecutor type
type TimelockExecutor struct {
	mock.Mock
}

type TimelockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *TimelockExecutor) EXPECT() *TimelockExecutor_Expecter {
	return &TimelockExecutor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: bop, timelockAddress, predecessor, salt
func (_m *TimelockExecutor) Execute(bop types.BatchOperation, timelockAddress string, predecessor common.Hash, salt common.Hash) (string, error) {
	ret := _m.Called(bop, timelockAddress, predecessor, salt)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(types.BatchOperation, string, common.Hash, common.Hash) (string, error)); ok {
		return rf(bop, timelockAddress, predecessor, salt)
	}
	if rf, ok := ret.Get(0).(func(types.BatchOperation, string, common.Hash, common.Hash) string); ok {
		r0 = rf(bop, timelockAddress, predecessor, salt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(types.BatchOperation, string, common.Hash, common.Hash) error); ok {
		r1 = rf(bop, timelockAddress, predecessor, salt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type TimelockExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - bop types.BatchOperation
//   - timelockAddress string
//   - predecessor common.Hash
//   - salt common.Hash
func (_e *TimelockExecutor_Expecter) Execute(bop interface{}, timelockAddress interface{}, predecessor interface{}, salt interface{}) *TimelockExecutor_Execute_Call {
	return &TimelockExecutor_Execute_Call{Call: _e.mock.On("Execute", bop, timelockAddress, predecessor, salt)}
}

func (_c *TimelockExecutor_Execute_Call) Run(run func(bop types.BatchOperation, timelockAddress string, predecessor common.Hash, salt common.Hash)) *TimelockExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.BatchOperation), args[1].(string), args[2].(common.Hash), args[3].(common.Hash))
	})
	return _c
}

func (_c *TimelockExecutor_Execute_Call) Return(_a0 string, _a1 error) *TimelockExecutor_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_Execute_Call) RunAndReturn(run func(types.BatchOperation, string, common.Hash, common.Hash) (string, error)) *TimelockExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewTimelockExecutor creates a new instance of TimelockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimelockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *TimelockExecutor {
	mock := &TimelockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
