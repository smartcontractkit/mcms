// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/mcms/types"
)

// TimelockExecutor is an autogenerated mock type for the TimelockExecutor type
type TimelockExecutor[T any] struct {
	mock.Mock
}

type TimelockExecutor_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *TimelockExecutor[T]) EXPECT() *TimelockExecutor_Expecter[T] {
	return &TimelockExecutor_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, bop, timelockAddress, predecessor, salt
func (_m *TimelockExecutor[T]) Execute(ctx context.Context, bop types.BatchOperation, timelockAddress string, predecessor common.Hash, salt common.Hash) (string, error) {
	ret := _m.Called(ctx, bop, timelockAddress, predecessor, salt)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.BatchOperation, string, common.Hash, common.Hash) (string, error)); ok {
		return rf(ctx, bop, timelockAddress, predecessor, salt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.BatchOperation, string, common.Hash, common.Hash) string); ok {
		r0 = rf(ctx, bop, timelockAddress, predecessor, salt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.BatchOperation, string, common.Hash, common.Hash) error); ok {
		r1 = rf(ctx, bop, timelockAddress, predecessor, salt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type TimelockExecutor_Execute_Call[T any] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - bop types.BatchOperation
//   - timelockAddress string
//   - predecessor common.Hash
//   - salt common.Hash
func (_e *TimelockExecutor_Expecter[T]) Execute(ctx interface{}, bop interface{}, timelockAddress interface{}, predecessor interface{}, salt interface{}) *TimelockExecutor_Execute_Call[T] {
	return &TimelockExecutor_Execute_Call[T]{Call: _e.mock.On("Execute", ctx, bop, timelockAddress, predecessor, salt)}
}

func (_c *TimelockExecutor_Execute_Call[T]) Run(run func(ctx context.Context, bop types.BatchOperation, timelockAddress string, predecessor common.Hash, salt common.Hash)) *TimelockExecutor_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.BatchOperation), args[2].(string), args[3].(common.Hash), args[4].(common.Hash))
	})
	return _c
}

func (_c *TimelockExecutor_Execute_Call[T]) Return(_a0 string, _a1 error) *TimelockExecutor_Execute_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_Execute_Call[T]) RunAndReturn(run func(context.Context, types.BatchOperation, string, common.Hash, common.Hash) (string, error)) *TimelockExecutor_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetBypassers provides a mock function with given fields: ctx, address
func (_m *TimelockExecutor[T]) GetBypassers(ctx context.Context, address string) ([]T, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetBypassers")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]T, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []T); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_GetBypassers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBypassers'
type TimelockExecutor_GetBypassers_Call[T any] struct {
	*mock.Call
}

// GetBypassers is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *TimelockExecutor_Expecter[T]) GetBypassers(ctx interface{}, address interface{}) *TimelockExecutor_GetBypassers_Call[T] {
	return &TimelockExecutor_GetBypassers_Call[T]{Call: _e.mock.On("GetBypassers", ctx, address)}
}

func (_c *TimelockExecutor_GetBypassers_Call[T]) Run(run func(ctx context.Context, address string)) *TimelockExecutor_GetBypassers_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TimelockExecutor_GetBypassers_Call[T]) Return(_a0 []T, _a1 error) *TimelockExecutor_GetBypassers_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_GetBypassers_Call[T]) RunAndReturn(run func(context.Context, string) ([]T, error)) *TimelockExecutor_GetBypassers_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetCancellers provides a mock function with given fields: ctx, address
func (_m *TimelockExecutor[T]) GetCancellers(ctx context.Context, address string) ([]T, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetCancellers")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]T, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []T); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_GetCancellers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCancellers'
type TimelockExecutor_GetCancellers_Call[T any] struct {
	*mock.Call
}

// GetCancellers is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *TimelockExecutor_Expecter[T]) GetCancellers(ctx interface{}, address interface{}) *TimelockExecutor_GetCancellers_Call[T] {
	return &TimelockExecutor_GetCancellers_Call[T]{Call: _e.mock.On("GetCancellers", ctx, address)}
}

func (_c *TimelockExecutor_GetCancellers_Call[T]) Run(run func(ctx context.Context, address string)) *TimelockExecutor_GetCancellers_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TimelockExecutor_GetCancellers_Call[T]) Return(_a0 []T, _a1 error) *TimelockExecutor_GetCancellers_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_GetCancellers_Call[T]) RunAndReturn(run func(context.Context, string) ([]T, error)) *TimelockExecutor_GetCancellers_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetExecutors provides a mock function with given fields: ctx, address
func (_m *TimelockExecutor[T]) GetExecutors(ctx context.Context, address string) ([]T, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetExecutors")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]T, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []T); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_GetExecutors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecutors'
type TimelockExecutor_GetExecutors_Call[T any] struct {
	*mock.Call
}

// GetExecutors is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *TimelockExecutor_Expecter[T]) GetExecutors(ctx interface{}, address interface{}) *TimelockExecutor_GetExecutors_Call[T] {
	return &TimelockExecutor_GetExecutors_Call[T]{Call: _e.mock.On("GetExecutors", ctx, address)}
}

func (_c *TimelockExecutor_GetExecutors_Call[T]) Run(run func(ctx context.Context, address string)) *TimelockExecutor_GetExecutors_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TimelockExecutor_GetExecutors_Call[T]) Return(_a0 []T, _a1 error) *TimelockExecutor_GetExecutors_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_GetExecutors_Call[T]) RunAndReturn(run func(context.Context, string) ([]T, error)) *TimelockExecutor_GetExecutors_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetProposers provides a mock function with given fields: ctx, address
func (_m *TimelockExecutor[T]) GetProposers(ctx context.Context, address string) ([]T, error) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetProposers")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]T, error)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []T); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_GetProposers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProposers'
type TimelockExecutor_GetProposers_Call[T any] struct {
	*mock.Call
}

// GetProposers is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
func (_e *TimelockExecutor_Expecter[T]) GetProposers(ctx interface{}, address interface{}) *TimelockExecutor_GetProposers_Call[T] {
	return &TimelockExecutor_GetProposers_Call[T]{Call: _e.mock.On("GetProposers", ctx, address)}
}

func (_c *TimelockExecutor_GetProposers_Call[T]) Run(run func(ctx context.Context, address string)) *TimelockExecutor_GetProposers_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TimelockExecutor_GetProposers_Call[T]) Return(_a0 []T, _a1 error) *TimelockExecutor_GetProposers_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_GetProposers_Call[T]) RunAndReturn(run func(context.Context, string) ([]T, error)) *TimelockExecutor_GetProposers_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsOperation provides a mock function with given fields: ctx, address, opID
func (_m *TimelockExecutor[T]) IsOperation(ctx context.Context, address string, opID [32]byte) (bool, error) {
	ret := _m.Called(ctx, address, opID)

	if len(ret) == 0 {
		panic("no return value specified for IsOperation")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, [32]byte) (bool, error)); ok {
		return rf(ctx, address, opID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, [32]byte) bool); ok {
		r0 = rf(ctx, address, opID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, [32]byte) error); ok {
		r1 = rf(ctx, address, opID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_IsOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOperation'
type TimelockExecutor_IsOperation_Call[T any] struct {
	*mock.Call
}

// IsOperation is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - opID [32]byte
func (_e *TimelockExecutor_Expecter[T]) IsOperation(ctx interface{}, address interface{}, opID interface{}) *TimelockExecutor_IsOperation_Call[T] {
	return &TimelockExecutor_IsOperation_Call[T]{Call: _e.mock.On("IsOperation", ctx, address, opID)}
}

func (_c *TimelockExecutor_IsOperation_Call[T]) Run(run func(ctx context.Context, address string, opID [32]byte)) *TimelockExecutor_IsOperation_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([32]byte))
	})
	return _c
}

func (_c *TimelockExecutor_IsOperation_Call[T]) Return(_a0 bool, _a1 error) *TimelockExecutor_IsOperation_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_IsOperation_Call[T]) RunAndReturn(run func(context.Context, string, [32]byte) (bool, error)) *TimelockExecutor_IsOperation_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsOperationDone provides a mock function with given fields: ctx, address, opID
func (_m *TimelockExecutor[T]) IsOperationDone(ctx context.Context, address string, opID [32]byte) (bool, error) {
	ret := _m.Called(ctx, address, opID)

	if len(ret) == 0 {
		panic("no return value specified for IsOperationDone")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, [32]byte) (bool, error)); ok {
		return rf(ctx, address, opID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, [32]byte) bool); ok {
		r0 = rf(ctx, address, opID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, [32]byte) error); ok {
		r1 = rf(ctx, address, opID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_IsOperationDone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOperationDone'
type TimelockExecutor_IsOperationDone_Call[T any] struct {
	*mock.Call
}

// IsOperationDone is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - opID [32]byte
func (_e *TimelockExecutor_Expecter[T]) IsOperationDone(ctx interface{}, address interface{}, opID interface{}) *TimelockExecutor_IsOperationDone_Call[T] {
	return &TimelockExecutor_IsOperationDone_Call[T]{Call: _e.mock.On("IsOperationDone", ctx, address, opID)}
}

func (_c *TimelockExecutor_IsOperationDone_Call[T]) Run(run func(ctx context.Context, address string, opID [32]byte)) *TimelockExecutor_IsOperationDone_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([32]byte))
	})
	return _c
}

func (_c *TimelockExecutor_IsOperationDone_Call[T]) Return(_a0 bool, _a1 error) *TimelockExecutor_IsOperationDone_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_IsOperationDone_Call[T]) RunAndReturn(run func(context.Context, string, [32]byte) (bool, error)) *TimelockExecutor_IsOperationDone_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsOperationPending provides a mock function with given fields: ctx, address, opID
func (_m *TimelockExecutor[T]) IsOperationPending(ctx context.Context, address string, opID [32]byte) (bool, error) {
	ret := _m.Called(ctx, address, opID)

	if len(ret) == 0 {
		panic("no return value specified for IsOperationPending")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, [32]byte) (bool, error)); ok {
		return rf(ctx, address, opID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, [32]byte) bool); ok {
		r0 = rf(ctx, address, opID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, [32]byte) error); ok {
		r1 = rf(ctx, address, opID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_IsOperationPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOperationPending'
type TimelockExecutor_IsOperationPending_Call[T any] struct {
	*mock.Call
}

// IsOperationPending is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - opID [32]byte
func (_e *TimelockExecutor_Expecter[T]) IsOperationPending(ctx interface{}, address interface{}, opID interface{}) *TimelockExecutor_IsOperationPending_Call[T] {
	return &TimelockExecutor_IsOperationPending_Call[T]{Call: _e.mock.On("IsOperationPending", ctx, address, opID)}
}

func (_c *TimelockExecutor_IsOperationPending_Call[T]) Run(run func(ctx context.Context, address string, opID [32]byte)) *TimelockExecutor_IsOperationPending_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([32]byte))
	})
	return _c
}

func (_c *TimelockExecutor_IsOperationPending_Call[T]) Return(_a0 bool, _a1 error) *TimelockExecutor_IsOperationPending_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_IsOperationPending_Call[T]) RunAndReturn(run func(context.Context, string, [32]byte) (bool, error)) *TimelockExecutor_IsOperationPending_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsOperationReady provides a mock function with given fields: ctx, address, opID
func (_m *TimelockExecutor[T]) IsOperationReady(ctx context.Context, address string, opID [32]byte) (bool, error) {
	ret := _m.Called(ctx, address, opID)

	if len(ret) == 0 {
		panic("no return value specified for IsOperationReady")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, [32]byte) (bool, error)); ok {
		return rf(ctx, address, opID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, [32]byte) bool); ok {
		r0 = rf(ctx, address, opID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, [32]byte) error); ok {
		r1 = rf(ctx, address, opID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimelockExecutor_IsOperationReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOperationReady'
type TimelockExecutor_IsOperationReady_Call[T any] struct {
	*mock.Call
}

// IsOperationReady is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - opID [32]byte
func (_e *TimelockExecutor_Expecter[T]) IsOperationReady(ctx interface{}, address interface{}, opID interface{}) *TimelockExecutor_IsOperationReady_Call[T] {
	return &TimelockExecutor_IsOperationReady_Call[T]{Call: _e.mock.On("IsOperationReady", ctx, address, opID)}
}

func (_c *TimelockExecutor_IsOperationReady_Call[T]) Run(run func(ctx context.Context, address string, opID [32]byte)) *TimelockExecutor_IsOperationReady_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([32]byte))
	})
	return _c
}

func (_c *TimelockExecutor_IsOperationReady_Call[T]) Return(_a0 bool, _a1 error) *TimelockExecutor_IsOperationReady_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimelockExecutor_IsOperationReady_Call[T]) RunAndReturn(run func(context.Context, string, [32]byte) (bool, error)) *TimelockExecutor_IsOperationReady_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewTimelockExecutor creates a new instance of TimelockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimelockExecutor[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *TimelockExecutor[T] {
	mock := &TimelockExecutor[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
