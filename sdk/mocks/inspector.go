// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/mcms/types"
)

// Inspector is an autogenerated mock type for the Inspector type
type Inspector struct {
	mock.Mock
}

type Inspector_Expecter struct {
	mock *mock.Mock
}

func (_m *Inspector) EXPECT() *Inspector_Expecter {
	return &Inspector_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function with given fields: mcmAddress
func (_m *Inspector) GetConfig(mcmAddress string) (*types.Config, error) {
	ret := _m.Called(mcmAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *types.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Config, error)); ok {
		return rf(mcmAddress)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Config); ok {
		r0 = rf(mcmAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mcmAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspector_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type Inspector_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - mcmAddress string
func (_e *Inspector_Expecter) GetConfig(mcmAddress interface{}) *Inspector_GetConfig_Call {
	return &Inspector_GetConfig_Call{Call: _e.mock.On("GetConfig", mcmAddress)}
}

func (_c *Inspector_GetConfig_Call) Run(run func(mcmAddress string)) *Inspector_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_GetConfig_Call) Return(_a0 *types.Config, _a1 error) *Inspector_GetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inspector_GetConfig_Call) RunAndReturn(run func(string) (*types.Config, error)) *Inspector_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpCount provides a mock function with given fields: mcmAddress
func (_m *Inspector) GetOpCount(mcmAddress string) (uint64, error) {
	ret := _m.Called(mcmAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetOpCount")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint64, error)); ok {
		return rf(mcmAddress)
	}
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(mcmAddress)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mcmAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspector_GetOpCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpCount'
type Inspector_GetOpCount_Call struct {
	*mock.Call
}

// GetOpCount is a helper method to define mock.On call
//   - mcmAddress string
func (_e *Inspector_Expecter) GetOpCount(mcmAddress interface{}) *Inspector_GetOpCount_Call {
	return &Inspector_GetOpCount_Call{Call: _e.mock.On("GetOpCount", mcmAddress)}
}

func (_c *Inspector_GetOpCount_Call) Run(run func(mcmAddress string)) *Inspector_GetOpCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_GetOpCount_Call) Return(_a0 uint64, _a1 error) *Inspector_GetOpCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inspector_GetOpCount_Call) RunAndReturn(run func(string) (uint64, error)) *Inspector_GetOpCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoot provides a mock function with given fields: mcmAddress
func (_m *Inspector) GetRoot(mcmAddress string) (common.Hash, uint32, error) {
	ret := _m.Called(mcmAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetRoot")
	}

	var r0 common.Hash
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (common.Hash, uint32, error)); ok {
		return rf(mcmAddress)
	}
	if rf, ok := ret.Get(0).(func(string) common.Hash); ok {
		r0 = rf(mcmAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(string) uint32); ok {
		r1 = rf(mcmAddress)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(mcmAddress)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Inspector_GetRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoot'
type Inspector_GetRoot_Call struct {
	*mock.Call
}

// GetRoot is a helper method to define mock.On call
//   - mcmAddress string
func (_e *Inspector_Expecter) GetRoot(mcmAddress interface{}) *Inspector_GetRoot_Call {
	return &Inspector_GetRoot_Call{Call: _e.mock.On("GetRoot", mcmAddress)}
}

func (_c *Inspector_GetRoot_Call) Run(run func(mcmAddress string)) *Inspector_GetRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_GetRoot_Call) Return(_a0 common.Hash, _a1 uint32, _a2 error) *Inspector_GetRoot_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Inspector_GetRoot_Call) RunAndReturn(run func(string) (common.Hash, uint32, error)) *Inspector_GetRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootMetadata provides a mock function with given fields: mcmAddress
func (_m *Inspector) GetRootMetadata(mcmAddress string) (types.ChainMetadata, error) {
	ret := _m.Called(mcmAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetRootMetadata")
	}

	var r0 types.ChainMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.ChainMetadata, error)); ok {
		return rf(mcmAddress)
	}
	if rf, ok := ret.Get(0).(func(string) types.ChainMetadata); ok {
		r0 = rf(mcmAddress)
	} else {
		r0 = ret.Get(0).(types.ChainMetadata)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mcmAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspector_GetRootMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootMetadata'
type Inspector_GetRootMetadata_Call struct {
	*mock.Call
}

// GetRootMetadata is a helper method to define mock.On call
//   - mcmAddress string
func (_e *Inspector_Expecter) GetRootMetadata(mcmAddress interface{}) *Inspector_GetRootMetadata_Call {
	return &Inspector_GetRootMetadata_Call{Call: _e.mock.On("GetRootMetadata", mcmAddress)}
}

func (_c *Inspector_GetRootMetadata_Call) Run(run func(mcmAddress string)) *Inspector_GetRootMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inspector_GetRootMetadata_Call) Return(_a0 types.ChainMetadata, _a1 error) *Inspector_GetRootMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inspector_GetRootMetadata_Call) RunAndReturn(run func(string) (types.ChainMetadata, error)) *Inspector_GetRootMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewInspector creates a new instance of Inspector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInspector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Inspector {
	mock := &Inspector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
